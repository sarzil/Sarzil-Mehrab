
AurdionoLCD16x2scrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800116  00800116  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053ec  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001214  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000178f  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000920  00000000  00000000  00008a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a99  00000000  00000000  00009374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b40  00000000  00000000  0000ae0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000e94d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	ce 00       	.word	0x00ce	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e8 eb       	ldi	r30, 0xB8	; 184
  ce:	f8 e0       	ldi	r31, 0x08	; 8
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a6 31       	cpi	r26, 0x16	; 22
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a6 e1       	ldi	r26, 0x16	; 22
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a7 33       	cpi	r26, 0x37	; 55
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
 106:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <setup>:

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

void setup() {
  lcd.begin(16, 2);
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	60 e1       	ldi	r22, 0x10	; 16
 114:	86 e1       	ldi	r24, 0x16	; 22
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN13LiquidCrystal5beginEhhh>
  lcd.print("hello, world!");
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	86 e1       	ldi	r24, 0x16	; 22
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZN5Print5printEPKc>
  delay(1000);
 128:	68 ee       	ldi	r22, 0xE8	; 232
 12a:	73 e0       	ldi	r23, 0x03	; 3
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0c 94 9f 01 	jmp	0x33e	; 0x33e <delay>

00000134 <loop>:
}

void loop() {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd e0       	ldi	r28, 0x0D	; 13
 13a:	d0 e0       	ldi	r29, 0x00	; 0
  for (int positionCounter = 0; positionCounter < 13; positionCounter++) {
    lcd.scrollDisplayLeft();
 13c:	86 e1       	ldi	r24, 0x16	; 22
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN13LiquidCrystal17scrollDisplayLeftEv>
    delay(150);
 144:	66 e9       	ldi	r22, 0x96	; 150
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 9f 01 	call	0x33e	; 0x33e <delay>
 150:	21 97       	sbiw	r28, 0x01	; 1
  lcd.print("hello, world!");
  delay(1000);
}

void loop() {
  for (int positionCounter = 0; positionCounter < 13; positionCounter++) {
 152:	a1 f7       	brne	.-24     	; 0x13c <loop+0x8>
 154:	cd e1       	ldi	r28, 0x1D	; 29
 156:	d0 e0       	ldi	r29, 0x00	; 0
    lcd.scrollDisplayLeft();
    delay(150);
  }
  for (int positionCounter = 0; positionCounter < 29; positionCounter++) {
    lcd.scrollDisplayRight();
 158:	86 e1       	ldi	r24, 0x16	; 22
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN13LiquidCrystal18scrollDisplayRightEv>
    delay(150);
 160:	66 e9       	ldi	r22, 0x96	; 150
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 9f 01 	call	0x33e	; 0x33e <delay>
 16c:	21 97       	sbiw	r28, 0x01	; 1
void loop() {
  for (int positionCounter = 0; positionCounter < 13; positionCounter++) {
    lcd.scrollDisplayLeft();
    delay(150);
  }
  for (int positionCounter = 0; positionCounter < 29; positionCounter++) {
 16e:	a1 f7       	brne	.-24     	; 0x158 <loop+0x24>
 170:	c0 e1       	ldi	r28, 0x10	; 16
 172:	d0 e0       	ldi	r29, 0x00	; 0
    lcd.scrollDisplayRight();
    delay(150);
  }
  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {
    lcd.scrollDisplayLeft();
 174:	86 e1       	ldi	r24, 0x16	; 22
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN13LiquidCrystal17scrollDisplayLeftEv>
    delay(150);
 17c:	66 e9       	ldi	r22, 0x96	; 150
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 9f 01 	call	0x33e	; 0x33e <delay>
 188:	21 97       	sbiw	r28, 0x01	; 1
  }
  for (int positionCounter = 0; positionCounter < 29; positionCounter++) {
    lcd.scrollDisplayRight();
    delay(150);
  }
  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {
 18a:	a1 f7       	brne	.-24     	; 0x174 <loop+0x40>
    lcd.scrollDisplayLeft();
    delay(150);
  }
  delay(1000);
 18c:	68 ee       	ldi	r22, 0xE8	; 232
 18e:	73 e0       	ldi	r23, 0x03	; 3
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
  }
  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {
    lcd.scrollDisplayLeft();
    delay(150);
  }
  delay(1000);
 198:	0c 94 9f 01 	jmp	0x33e	; 0x33e <delay>

0000019c <_GLOBAL__sub_I_lcd>:
}
 19c:	cf 92       	push	r12
 19e:	ef 92       	push	r14
 1a0:	0f 93       	push	r16
//End of Auto generated function prototypes by Atmel Studio



// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	c8 2e       	mov	r12, r24
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	e9 2e       	mov	r14, r25
 1aa:	04 e0       	ldi	r16, 0x04	; 4
 1ac:	25 e0       	ldi	r18, 0x05	; 5
 1ae:	4b e0       	ldi	r20, 0x0B	; 11
 1b0:	6c e0       	ldi	r22, 0x0C	; 12
 1b2:	86 e1       	ldi	r24, 0x16	; 22
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN13LiquidCrystalC1Ehhhhhh>
  for (int positionCounter = 0; positionCounter < 16; positionCounter++) {
    lcd.scrollDisplayLeft();
    delay(150);
  }
  delay(1000);
}
 1ba:	0f 91       	pop	r16
 1bc:	ef 90       	pop	r14
 1be:	cf 90       	pop	r12
 1c0:	08 95       	ret

000001c2 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 1c2:	08 95       	ret

000001c4 <main>:

int main(void)
{
	init();
 1c4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init>

	initVariant();
 1c8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1cc:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1d4:	0e 94 9a 00 	call	0x134	; 0x134 <loop>
		if (serialEventRun) serialEventRun();
 1d8:	20 97       	sbiw	r28, 0x00	; 0
 1da:	e1 f3       	breq	.-8      	; 0x1d4 <main+0x10>
 1dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1e0:	f9 cf       	rjmp	.-14     	; 0x1d4 <main+0x10>

000001e2 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	6c 01       	movw	r12, r24
 1f4:	eb 01       	movw	r28, r22
 1f6:	7b 01       	movw	r14, r22
 1f8:	e4 0e       	add	r14, r20
 1fa:	f5 1e       	adc	r15, r21
 1fc:	00 e0       	ldi	r16, 0x00	; 0
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	ce 15       	cp	r28, r14
 202:	df 05       	cpc	r29, r15
 204:	61 f0       	breq	.+24     	; 0x21e <_ZN5Print5writeEPKhj+0x3c>
 206:	69 91       	ld	r22, Y+
 208:	d6 01       	movw	r26, r12
 20a:	ed 91       	ld	r30, X+
 20c:	fc 91       	ld	r31, X
 20e:	01 90       	ld	r0, Z+
 210:	f0 81       	ld	r31, Z
 212:	e0 2d       	mov	r30, r0
 214:	c6 01       	movw	r24, r12
 216:	09 95       	icall
 218:	08 0f       	add	r16, r24
 21a:	19 1f       	adc	r17, r25
 21c:	f1 cf       	rjmp	.-30     	; 0x200 <_ZN5Print5writeEPKhj+0x1e>
 21e:	c8 01       	movw	r24, r16
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <_ZN5Print5writeEPKc>:
 232:	61 15       	cp	r22, r1
 234:	71 05       	cpc	r23, r1
 236:	79 f0       	breq	.+30     	; 0x256 <_ZN5Print5writeEPKc+0x24>
 238:	fb 01       	movw	r30, r22
 23a:	01 90       	ld	r0, Z+
 23c:	00 20       	and	r0, r0
 23e:	e9 f7       	brne	.-6      	; 0x23a <_ZN5Print5writeEPKc+0x8>
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	af 01       	movw	r20, r30
 244:	46 1b       	sub	r20, r22
 246:	57 0b       	sbc	r21, r23
 248:	dc 01       	movw	r26, r24
 24a:	ed 91       	ld	r30, X+
 24c:	fc 91       	ld	r31, X
 24e:	02 80       	ldd	r0, Z+2	; 0x02
 250:	f3 81       	ldd	r31, Z+3	; 0x03
 252:	e0 2d       	mov	r30, r0
 254:	09 94       	ijmp
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	08 95       	ret

0000025c <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 25c:	0c 94 19 01 	jmp	0x232	; 0x232 <_ZN5Print5writeEPKc>

00000260 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <timer0_millis>
 27a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <timer0_millis+0x1>
 27e:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <timer0_millis+0x2>
 282:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <timer0_millis+0x3>
 286:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <timer0_fract>
 28a:	23 e0       	ldi	r18, 0x03	; 3
 28c:	23 0f       	add	r18, r19
 28e:	2d 37       	cpi	r18, 0x7D	; 125
 290:	20 f4       	brcc	.+8      	; 0x29a <__vector_16+0x3a>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <__vector_16+0x44>
 29a:	26 e8       	ldi	r18, 0x86	; 134
 29c:	23 0f       	add	r18, r19
 29e:	02 96       	adiw	r24, 0x02	; 2
 2a0:	a1 1d       	adc	r26, r1
 2a2:	b1 1d       	adc	r27, r1
 2a4:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <timer0_fract>
 2a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <timer0_millis>
 2ac:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <timer0_millis+0x1>
 2b0:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <timer0_millis+0x2>
 2b4:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <timer0_millis+0x3>
 2b8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <timer0_overflow_count>
 2bc:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <timer0_overflow_count+0x1>
 2c0:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <timer0_overflow_count+0x2>
 2c4:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <timer0_overflow_count+0x3>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	a1 1d       	adc	r26, r1
 2cc:	b1 1d       	adc	r27, r1
 2ce:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <timer0_overflow_count>
 2d2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <timer0_overflow_count+0x1>
 2d6:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <timer0_overflow_count+0x2>
 2da:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <timer0_overflow_count+0x3>
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 2f4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 2f6:	f8 94       	cli
	m = timer0_overflow_count;
 2f8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <timer0_overflow_count>
 2fc:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <timer0_overflow_count+0x1>
 300:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <timer0_overflow_count+0x2>
 304:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 308:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 30a:	a8 9b       	sbis	0x15, 0	; 21
 30c:	05 c0       	rjmp	.+10     	; 0x318 <micros+0x24>
 30e:	2f 3f       	cpi	r18, 0xFF	; 255
 310:	19 f0       	breq	.+6      	; 0x318 <micros+0x24>
		m++;
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 318:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 31a:	ba 2f       	mov	r27, r26
 31c:	a9 2f       	mov	r26, r25
 31e:	98 2f       	mov	r25, r24
 320:	88 27       	eor	r24, r24
 322:	82 0f       	add	r24, r18
 324:	91 1d       	adc	r25, r1
 326:	a1 1d       	adc	r26, r1
 328:	b1 1d       	adc	r27, r1
 32a:	bc 01       	movw	r22, r24
 32c:	cd 01       	movw	r24, r26
 32e:	42 e0       	ldi	r20, 0x02	; 2
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	4a 95       	dec	r20
 33a:	d1 f7       	brne	.-12     	; 0x330 <micros+0x3c>
}
 33c:	08 95       	ret

0000033e <delay>:

void delay(unsigned long ms)
{
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 34e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <micros>
 352:	eb 01       	movw	r28, r22

	while (ms > 0) {
 354:	c1 14       	cp	r12, r1
 356:	d1 04       	cpc	r13, r1
 358:	e1 04       	cpc	r14, r1
 35a:	f1 04       	cpc	r15, r1
 35c:	89 f0       	breq	.+34     	; 0x380 <delay+0x42>
		yield();
 35e:	0e 94 bf 03 	call	0x77e	; 0x77e <yield>
		if (((uint16_t)micros() - start) >= 1000) {
 362:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <micros>
 366:	6c 1b       	sub	r22, r28
 368:	7d 0b       	sbc	r23, r29
 36a:	68 3e       	cpi	r22, 0xE8	; 232
 36c:	73 40       	sbci	r23, 0x03	; 3
 36e:	90 f3       	brcs	.-28     	; 0x354 <delay+0x16>
			ms--;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	c8 1a       	sub	r12, r24
 374:	d1 08       	sbc	r13, r1
 376:	e1 08       	sbc	r14, r1
 378:	f1 08       	sbc	r15, r1
			start += 1000;
 37a:	c8 51       	subi	r28, 0x18	; 24
 37c:	dc 4f       	sbci	r29, 0xFC	; 252
 37e:	ea cf       	rjmp	.-44     	; 0x354 <delay+0x16>
		}
	}
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	08 95       	ret

0000038e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	39 f0       	breq	.+14     	; 0x3a0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 39a:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <delayMicroseconds+0xe>
 3a0:	08 95       	ret

000003a2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3a2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3aa:	84 b5       	in	r24, 0x24	; 36
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3b0:	85 b5       	in	r24, 0x25	; 37
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3b6:	85 b5       	in	r24, 0x25	; 37
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3bc:	ee e6       	ldi	r30, 0x6E	; 110
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3c6:	e1 e8       	ldi	r30, 0x81	; 129
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3cc:	80 81       	ld	r24, Z
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3d8:	e0 e8       	ldi	r30, 0x80	; 128
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3e2:	e1 eb       	ldi	r30, 0xB1	; 177
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ec:	e0 eb       	ldi	r30, 0xB0	; 176
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3f6:	ea e7       	ldi	r30, 0x7A	; 122
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 400:	80 81       	ld	r24, Z
 402:	82 60       	ori	r24, 0x02	; 2
 404:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 406:	80 81       	ld	r24, Z
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 40c:	80 81       	ld	r24, Z
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 412:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 416:	08 95       	ret

00000418 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	ec 01       	movw	r28, r24
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8e 81       	ldd	r24, Y+6	; 0x06
 422:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8e 81       	ldd	r24, Y+6	; 0x06
 432:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	8e 81       	ldd	r24, Y+6	; 0x06
 442:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 446:	84 e6       	ldi	r24, 0x64	; 100
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	0c 94 c7 01 	jmp	0x38e	; 0x38e <delayMicroseconds>

00000452 <_ZN13LiquidCrystal10write4bitsEh>:
 452:	af 92       	push	r10
 454:	bf 92       	push	r11
 456:	cf 92       	push	r12
 458:	df 92       	push	r13
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	5c 01       	movw	r10, r24
 468:	7c 01       	movw	r14, r24
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	e8 0e       	add	r14, r24
 46e:	f1 1c       	adc	r15, r1
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	d0 e0       	ldi	r29, 0x00	; 0
 474:	06 2f       	mov	r16, r22
 476:	10 e0       	ldi	r17, 0x00	; 0
 478:	67 01       	movw	r12, r14
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	f7 01       	movw	r30, r14
 47e:	81 91       	ld	r24, Z+
 480:	7f 01       	movw	r14, r30
 482:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pinMode>
 486:	b8 01       	movw	r22, r16
 488:	0c 2e       	mov	r0, r28
 48a:	02 c0       	rjmp	.+4      	; 0x490 <_ZN13LiquidCrystal10write4bitsEh+0x3e>
 48c:	75 95       	asr	r23
 48e:	67 95       	ror	r22
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <_ZN13LiquidCrystal10write4bitsEh+0x3a>
 494:	61 70       	andi	r22, 0x01	; 1
 496:	f6 01       	movw	r30, r12
 498:	80 81       	ld	r24, Z
 49a:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 49e:	21 96       	adiw	r28, 0x01	; 1
 4a0:	c4 30       	cpi	r28, 0x04	; 4
 4a2:	d1 05       	cpc	r29, r1
 4a4:	49 f7       	brne	.-46     	; 0x478 <_ZN13LiquidCrystal10write4bitsEh+0x26>
 4a6:	c5 01       	movw	r24, r10
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN13LiquidCrystal11pulseEnableEv>

000004c0 <_ZN13LiquidCrystal10write8bitsEh>:
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	5c 01       	movw	r10, r24
 4d6:	7c 01       	movw	r14, r24
 4d8:	87 e0       	ldi	r24, 0x07	; 7
 4da:	e8 0e       	add	r14, r24
 4dc:	f1 1c       	adc	r15, r1
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
 4e2:	06 2f       	mov	r16, r22
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	67 01       	movw	r12, r14
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	f7 01       	movw	r30, r14
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pinMode>
 4f4:	b8 01       	movw	r22, r16
 4f6:	0c 2e       	mov	r0, r28
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <_ZN13LiquidCrystal10write8bitsEh+0x3e>
 4fa:	75 95       	asr	r23
 4fc:	67 95       	ror	r22
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <_ZN13LiquidCrystal10write8bitsEh+0x3a>
 502:	61 70       	andi	r22, 0x01	; 1
 504:	f6 01       	movw	r30, r12
 506:	80 81       	ld	r24, Z
 508:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 50c:	21 96       	adiw	r28, 0x01	; 1
 50e:	c8 30       	cpi	r28, 0x08	; 8
 510:	d1 05       	cpc	r29, r1
 512:	49 f7       	brne	.-46     	; 0x4e6 <_ZN13LiquidCrystal10write8bitsEh+0x26>
 514:	c5 01       	movw	r24, r10
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	df 90       	pop	r13
 524:	cf 90       	pop	r12
 526:	bf 90       	pop	r11
 528:	af 90       	pop	r10
 52a:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN13LiquidCrystal11pulseEnableEv>

0000052e <_ZN13LiquidCrystal4sendEhh>:
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
 536:	16 2f       	mov	r17, r22
 538:	64 2f       	mov	r22, r20
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 540:	8d 81       	ldd	r24, Y+5	; 0x05
 542:	8f 3f       	cpi	r24, 0xFF	; 255
 544:	19 f0       	breq	.+6      	; 0x54c <_ZN13LiquidCrystal4sendEhh+0x1e>
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 54c:	8f 85       	ldd	r24, Y+15	; 0x0f
 54e:	61 2f       	mov	r22, r17
 550:	84 ff       	sbrs	r24, 4
 552:	06 c0       	rjmp	.+12     	; 0x560 <_ZN13LiquidCrystal4sendEhh+0x32>
 554:	ce 01       	movw	r24, r28
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_ZN13LiquidCrystal10write8bitsEh>
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	75 95       	asr	r23
 566:	67 95       	ror	r22
 568:	8a 95       	dec	r24
 56a:	e1 f7       	brne	.-8      	; 0x564 <_ZN13LiquidCrystal4sendEhh+0x36>
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>
 572:	61 2f       	mov	r22, r17
 574:	ce 01       	movw	r24, r28
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0c 94 29 02 	jmp	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>

00000580 <_ZN13LiquidCrystal7commandEh>:
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	0c 94 97 02 	jmp	0x52e	; 0x52e <_ZN13LiquidCrystal4sendEhh>

00000586 <_ZN13LiquidCrystal5clearEv>:
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>
 58c:	80 ed       	ldi	r24, 0xD0	; 208
 58e:	97 e0       	ldi	r25, 0x07	; 7
 590:	0c 94 c7 01 	jmp	0x38e	; 0x38e <delayMicroseconds>

00000594 <_ZN13LiquidCrystal7displayEv>:
 594:	fc 01       	movw	r30, r24
 596:	60 89       	ldd	r22, Z+16	; 0x10
 598:	26 2f       	mov	r18, r22
 59a:	24 60       	ori	r18, 0x04	; 4
 59c:	20 8b       	std	Z+16, r18	; 0x10
 59e:	6c 60       	ori	r22, 0x0C	; 12
 5a0:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>

000005a4 <_ZN13LiquidCrystal5beginEhhh>:
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
 5aa:	42 30       	cpi	r20, 0x02	; 2
 5ac:	18 f0       	brcs	.+6      	; 0x5b4 <_ZN13LiquidCrystal5beginEhhh+0x10>
 5ae:	8f 85       	ldd	r24, Y+15	; 0x0f
 5b0:	88 60       	ori	r24, 0x08	; 8
 5b2:	8f 87       	std	Y+15, r24	; 0x0f
 5b4:	4b 8b       	std	Y+19, r20	; 0x13
 5b6:	1c 8a       	std	Y+20, r1	; 0x14
 5b8:	80 e4       	ldi	r24, 0x40	; 64
 5ba:	8d 8b       	std	Y+21, r24	; 0x15
 5bc:	6e 8b       	std	Y+22, r22	; 0x16
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 5c       	subi	r22, 0xC0	; 192
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	6f 8b       	std	Y+23, r22	; 0x17
 5c6:	22 23       	and	r18, r18
 5c8:	29 f0       	breq	.+10     	; 0x5d4 <_ZN13LiquidCrystal5beginEhhh+0x30>
 5ca:	41 30       	cpi	r20, 0x01	; 1
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <_ZN13LiquidCrystal5beginEhhh+0x30>
 5ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 5d0:	84 60       	ori	r24, 0x04	; 4
 5d2:	8f 87       	std	Y+15, r24	; 0x0f
 5d4:	80 e5       	ldi	r24, 0x50	; 80
 5d6:	93 ec       	ldi	r25, 0xC3	; 195
 5d8:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	8e 81       	ldd	r24, Y+6	; 0x06
 5e8:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 5ec:	8d 81       	ldd	r24, Y+5	; 0x05
 5ee:	8f 3f       	cpi	r24, 0xFF	; 255
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <_ZN13LiquidCrystal5beginEhhh+0x54>
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	0e 94 25 04 	call	0x84a	; 0x84a <digitalWrite>
 5f8:	6f 85       	ldd	r22, Y+15	; 0x0f
 5fa:	64 fd       	sbrc	r22, 4
 5fc:	1d c0       	rjmp	.+58     	; 0x638 <_ZN13LiquidCrystal5beginEhhh+0x94>
 5fe:	63 e0       	ldi	r22, 0x03	; 3
 600:	ce 01       	movw	r24, r28
 602:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>
 606:	84 e9       	ldi	r24, 0x94	; 148
 608:	91 e1       	ldi	r25, 0x11	; 17
 60a:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	ce 01       	movw	r24, r28
 612:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>
 616:	84 e9       	ldi	r24, 0x94	; 148
 618:	91 e1       	ldi	r25, 0x11	; 17
 61a:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 61e:	63 e0       	ldi	r22, 0x03	; 3
 620:	ce 01       	movw	r24, r28
 622:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>
 626:	86 e9       	ldi	r24, 0x96	; 150
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	ce 01       	movw	r24, r28
 632:	0e 94 29 02 	call	0x452	; 0x452 <_ZN13LiquidCrystal10write4bitsEh>
 636:	16 c0       	rjmp	.+44     	; 0x664 <_ZN13LiquidCrystal5beginEhhh+0xc0>
 638:	60 62       	ori	r22, 0x20	; 32
 63a:	ce 01       	movw	r24, r28
 63c:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>
 640:	84 e9       	ldi	r24, 0x94	; 148
 642:	91 e1       	ldi	r25, 0x11	; 17
 644:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 648:	6f 85       	ldd	r22, Y+15	; 0x0f
 64a:	60 62       	ori	r22, 0x20	; 32
 64c:	ce 01       	movw	r24, r28
 64e:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>
 652:	86 e9       	ldi	r24, 0x96	; 150
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 c7 01 	call	0x38e	; 0x38e <delayMicroseconds>
 65a:	6f 85       	ldd	r22, Y+15	; 0x0f
 65c:	60 62       	ori	r22, 0x20	; 32
 65e:	ce 01       	movw	r24, r28
 660:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>
 664:	6f 85       	ldd	r22, Y+15	; 0x0f
 666:	60 62       	ori	r22, 0x20	; 32
 668:	ce 01       	movw	r24, r28
 66a:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	88 8b       	std	Y+16, r24	; 0x10
 672:	ce 01       	movw	r24, r28
 674:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN13LiquidCrystal7displayEv>
 678:	ce 01       	movw	r24, r28
 67a:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13LiquidCrystal5clearEv>
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	89 8b       	std	Y+17, r24	; 0x11
 682:	66 e0       	ldi	r22, 0x06	; 6
 684:	ce 01       	movw	r24, r28
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>

0000068e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
 68e:	6f 92       	push	r6
 690:	7f 92       	push	r7
 692:	8f 92       	push	r8
 694:	af 92       	push	r10
 696:	cf 92       	push	r12
 698:	ef 92       	push	r14
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	3c 01       	movw	r6, r24
 6a8:	16 2f       	mov	r17, r22
 6aa:	84 2f       	mov	r24, r20
 6ac:	5d 85       	ldd	r21, Y+13	; 0x0d
 6ae:	4e 85       	ldd	r20, Y+14	; 0x0e
 6b0:	3f 85       	ldd	r19, Y+15	; 0x0f
 6b2:	98 89       	ldd	r25, Y+16	; 0x10
 6b4:	f3 01       	movw	r30, r6
 6b6:	84 83       	std	Z+4, r24	; 0x04
 6b8:	25 83       	std	Z+5, r18	; 0x05
 6ba:	06 83       	std	Z+6, r16	; 0x06
 6bc:	e7 82       	std	Z+7, r14	; 0x07
 6be:	c0 86       	std	Z+8, r12	; 0x08
 6c0:	a1 86       	std	Z+9, r10	; 0x09
 6c2:	82 86       	std	Z+10, r8	; 0x0a
 6c4:	53 87       	std	Z+11, r21	; 0x0b
 6c6:	44 87       	std	Z+12, r20	; 0x0c
 6c8:	35 87       	std	Z+13, r19	; 0x0d
 6ca:	96 87       	std	Z+14, r25	; 0x0e
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pinMode>
 6d2:	f3 01       	movw	r30, r6
 6d4:	85 81       	ldd	r24, Z+5	; 0x05
 6d6:	8f 3f       	cpi	r24, 0xFF	; 255
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pinMode>
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	f3 01       	movw	r30, r6
 6e4:	86 81       	ldd	r24, Z+6	; 0x06
 6e6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pinMode>
 6ea:	11 23       	and	r17, r17
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
 6ee:	f3 01       	movw	r30, r6
 6f0:	17 86       	std	Z+15, r1	; 0x0f
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
 6f4:	80 e1       	ldi	r24, 0x10	; 16
 6f6:	f3 01       	movw	r30, r6
 6f8:	87 87       	std	Z+15, r24	; 0x0f
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	60 e1       	ldi	r22, 0x10	; 16
 700:	c3 01       	movw	r24, r6
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ef 90       	pop	r14
 70c:	cf 90       	pop	r12
 70e:	af 90       	pop	r10
 710:	8f 90       	pop	r8
 712:	7f 90       	pop	r7
 714:	6f 90       	pop	r6
 716:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_ZN13LiquidCrystal5beginEhhh>

0000071a <_ZN13LiquidCrystalC1Ehhhhhh>:
 71a:	8f 92       	push	r8
 71c:	af 92       	push	r10
 71e:	cf 92       	push	r12
 720:	ef 92       	push	r14
 722:	0f 93       	push	r16
 724:	dc 01       	movw	r26, r24
 726:	13 96       	adiw	r26, 0x03	; 3
 728:	1c 92       	st	X, r1
 72a:	1e 92       	st	-X, r1
 72c:	12 97       	sbiw	r26, 0x02	; 2
 72e:	e2 e1       	ldi	r30, 0x12	; 18
 730:	f1 e0       	ldi	r31, 0x01	; 1
 732:	ed 93       	st	X+, r30
 734:	fc 93       	st	X, r31
 736:	1f 92       	push	r1
 738:	1f 92       	push	r1
 73a:	1f 92       	push	r1
 73c:	1f 92       	push	r1
 73e:	8c 2c       	mov	r8, r12
 740:	ae 2c       	mov	r10, r14
 742:	c0 2e       	mov	r12, r16
 744:	e2 2e       	mov	r14, r18
 746:	04 2f       	mov	r16, r20
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	46 2f       	mov	r20, r22
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 91       	pop	r16
 75c:	ef 90       	pop	r14
 75e:	cf 90       	pop	r12
 760:	af 90       	pop	r10
 762:	8f 90       	pop	r8
 764:	08 95       	ret

00000766 <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
 766:	68 e1       	ldi	r22, 0x18	; 24
 768:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>

0000076c <_ZN13LiquidCrystal18scrollDisplayRightEv>:
 76c:	6c e1       	ldi	r22, 0x1C	; 28
 76e:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN13LiquidCrystal7commandEh>

00000772 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	08 95       	ret

0000077e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 77e:	08 95       	ret

00000780 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	81 f0       	breq	.+32     	; 0x7a4 <turnOffPWM+0x24>
 784:	28 f4       	brcc	.+10     	; 0x790 <turnOffPWM+0x10>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	99 f0       	breq	.+38     	; 0x7b0 <turnOffPWM+0x30>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	a1 f0       	breq	.+40     	; 0x7b6 <turnOffPWM+0x36>
 78e:	08 95       	ret
 790:	87 30       	cpi	r24, 0x07	; 7
 792:	a9 f0       	breq	.+42     	; 0x7be <turnOffPWM+0x3e>
 794:	88 30       	cpi	r24, 0x08	; 8
 796:	b9 f0       	breq	.+46     	; 0x7c6 <turnOffPWM+0x46>
 798:	84 30       	cpi	r24, 0x04	; 4
 79a:	d1 f4       	brne	.+52     	; 0x7d0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 79c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 7a0:	8f 7d       	andi	r24, 0xDF	; 223
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 7a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 7a8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 7aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 7ae:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 7b0:	84 b5       	in	r24, 0x24	; 36
 7b2:	8f 77       	andi	r24, 0x7F	; 127
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 7b6:	84 b5       	in	r24, 0x24	; 36
 7b8:	8f 7d       	andi	r24, 0xDF	; 223
 7ba:	84 bd       	out	0x24, r24	; 36
 7bc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 7be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7c2:	8f 77       	andi	r24, 0x7F	; 127
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 7c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7ca:	8f 7d       	andi	r24, 0xDF	; 223
 7cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7d0:	08 95       	ret

000007d2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	fc 01       	movw	r30, r24
 7da:	e4 58       	subi	r30, 0x84	; 132
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 7e0:	fc 01       	movw	r30, r24
 7e2:	e0 57       	subi	r30, 0x70	; 112
 7e4:	ff 4f       	sbci	r31, 0xFF	; 255
 7e6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 7e8:	88 23       	and	r24, r24
 7ea:	61 f1       	breq	.+88     	; 0x844 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	fc 01       	movw	r30, r24
 7f4:	e2 55       	subi	r30, 0x52	; 82
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	c5 91       	lpm	r28, Z+
 7fa:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 7fc:	fc 01       	movw	r30, r24
 7fe:	ec 55       	subi	r30, 0x5C	; 92
 800:	ff 4f       	sbci	r31, 0xFF	; 255
 802:	a5 91       	lpm	r26, Z+
 804:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 806:	61 11       	cpse	r22, r1
 808:	09 c0       	rjmp	.+18     	; 0x81c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 80a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 80c:	f8 94       	cli
		*reg &= ~bit;
 80e:	88 81       	ld	r24, Y
 810:	20 95       	com	r18
 812:	82 23       	and	r24, r18
 814:	88 83       	st	Y, r24
		*out &= ~bit;
 816:	ec 91       	ld	r30, X
 818:	2e 23       	and	r18, r30
 81a:	0b c0       	rjmp	.+22     	; 0x832 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 81c:	62 30       	cpi	r22, 0x02	; 2
 81e:	61 f4       	brne	.+24     	; 0x838 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 820:	9f b7       	in	r25, 0x3f	; 63
                cli();
 822:	f8 94       	cli
		*reg &= ~bit;
 824:	88 81       	ld	r24, Y
 826:	32 2f       	mov	r19, r18
 828:	30 95       	com	r19
 82a:	83 23       	and	r24, r19
 82c:	88 83       	st	Y, r24
		*out |= bit;
 82e:	ec 91       	ld	r30, X
 830:	2e 2b       	or	r18, r30
 832:	2c 93       	st	X, r18
		SREG = oldSREG;
 834:	9f bf       	out	0x3f, r25	; 63
 836:	06 c0       	rjmp	.+12     	; 0x844 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 838:	8f b7       	in	r24, 0x3f	; 63
                cli();
 83a:	f8 94       	cli
		*reg |= bit;
 83c:	e8 81       	ld	r30, Y
 83e:	2e 2b       	or	r18, r30
 840:	28 83       	st	Y, r18
		SREG = oldSREG;
 842:	8f bf       	out	0x3f, r24	; 63
	}
}
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	08 95       	ret

0000084a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 850:	28 2f       	mov	r18, r24
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	f9 01       	movw	r30, r18
 856:	e8 59       	subi	r30, 0x98	; 152
 858:	ff 4f       	sbci	r31, 0xFF	; 255
 85a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 85c:	f9 01       	movw	r30, r18
 85e:	e4 58       	subi	r30, 0x84	; 132
 860:	ff 4f       	sbci	r31, 0xFF	; 255
 862:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 864:	f9 01       	movw	r30, r18
 866:	e0 57       	subi	r30, 0x70	; 112
 868:	ff 4f       	sbci	r31, 0xFF	; 255
 86a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 86c:	cc 23       	and	r28, r28
 86e:	c1 f0       	breq	.+48     	; 0x8a0 <digitalWrite+0x56>
 870:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 872:	81 11       	cpse	r24, r1
 874:	0e 94 c0 03 	call	0x780	; 0x780 <turnOffPWM>

	out = portOutputRegister(port);
 878:	ec 2f       	mov	r30, r28
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	ee 0f       	add	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	ec 55       	subi	r30, 0x5C	; 92
 882:	ff 4f       	sbci	r31, 0xFF	; 255
 884:	a5 91       	lpm	r26, Z+
 886:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 888:	9f b7       	in	r25, 0x3f	; 63
	cli();
 88a:	f8 94       	cli

	if (val == LOW) {
 88c:	11 11       	cpse	r17, r1
 88e:	04 c0       	rjmp	.+8      	; 0x898 <digitalWrite+0x4e>
		*out &= ~bit;
 890:	8c 91       	ld	r24, X
 892:	d0 95       	com	r29
 894:	d8 23       	and	r29, r24
 896:	02 c0       	rjmp	.+4      	; 0x89c <digitalWrite+0x52>
	} else {
		*out |= bit;
 898:	ec 91       	ld	r30, X
 89a:	de 2b       	or	r29, r30
 89c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 89e:	9f bf       	out	0x3f, r25	; 63
}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	08 95       	ret

000008a8 <__tablejump2__>:
 8a8:	ee 0f       	add	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	05 90       	lpm	r0, Z+
 8ae:	f4 91       	lpm	r31, Z
 8b0:	e0 2d       	mov	r30, r0
 8b2:	09 94       	ijmp

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
