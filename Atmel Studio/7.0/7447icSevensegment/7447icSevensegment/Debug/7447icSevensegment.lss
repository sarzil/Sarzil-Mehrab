
7447icSevensegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000d8  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000640  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>
#include <avr/io.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0b11111111;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 bb       	out	0x14, r24	; 20
  9a:	9e 01       	movw	r18, r28
  9c:	25 5f       	subi	r18, 0xF5	; 245
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
	/* Replace with your application code */
	while (1)
	{
		char output[] = {0b0000,0b0001,0b0010,0b0011,0b0100,0b0101,0b0110,0b0111,0b1000,0b1001};
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x28>
  b2:	fe 01       	movw	r30, r28
  b4:	31 96       	adiw	r30, 0x01	; 1
		for(int i=0;i<=9;i++)
		{
			PORTC = output[i];
  b6:	81 91       	ld	r24, Z+
  b8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	4f e7       	ldi	r20, 0x7F	; 127
  bc:	8a e1       	ldi	r24, 0x1A	; 26
  be:	96 e0       	ldi	r25, 0x06	; 6
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x48>
  ca:	00 00       	nop
	DDRC = 0b11111111;
	/* Replace with your application code */
	while (1)
	{
		char output[] = {0b0000,0b0001,0b0010,0b0011,0b0100,0b0101,0b0110,0b0111,0b1000,0b1001};
		for(int i=0;i<=9;i++)
  cc:	e2 17       	cp	r30, r18
  ce:	f3 07       	cpc	r31, r19
  d0:	91 f7       	brne	.-28     	; 0xb6 <main+0x34>
  d2:	e6 cf       	rjmp	.-52     	; 0xa0 <main+0x1e>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
