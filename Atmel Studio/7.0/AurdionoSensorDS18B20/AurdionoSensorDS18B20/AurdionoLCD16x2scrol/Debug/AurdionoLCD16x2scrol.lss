
AurdionoLCD16x2scrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  000019c4  00001a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c7  00800192  00800192  00001aea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba70  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002198  00000000  00000000  0000dadc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a2f  00000000  00000000  0000fc74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010f4  00000000  00000000  000126a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003038  00000000  00000000  00013798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ef9  00000000  00000000  000167d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0001c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
       c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      10:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      14:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      18:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      1c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      20:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      24:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      28:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      2c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      30:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      34:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      38:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      3c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      40:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_16>
      44:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      48:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_18>
      4c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_19>
      50:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      54:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      58:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      5c:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      60:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>
      64:	0c 94 01 01 	jmp	0x202	; 0x202 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN7OneWire5resetEv+0x6>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN17DallasTemperature15readPowerSupplyEPKh+0x12>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <__addsf3x+0x62>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN14HardwareSerial5beginEmh+0x42>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x94>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_bit_mask_PGM+0xc>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <loop+0xc>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <port_to_input_PGM+0x8>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <_ZN7OneWire6searchEPhb+0x28>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZN14HardwareSerial4readEv+0x6>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <digital_pin_to_bit_mask_PGM>:
     168:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     178:	04 08 10 20                                         ... 

0000017c <digital_pin_to_port_PGM>:
     17c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     18c:	03 03 03 03                                         ....

00000190 <port_to_input_PGM>:
     190:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000019a <port_to_output_PGM>:
     19a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001a4 <port_to_mode_PGM>:
     1a4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001ae <__ctors_start>:
     1ae:	39 01       	movw	r6, r18
     1b0:	ae 08       	sbc	r10, r14

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	d8 e0       	ldi	r29, 0x08	; 8
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61

000001be <__do_copy_data>:
     1be:	11 e0       	ldi	r17, 0x01	; 1
     1c0:	a0 e0       	ldi	r26, 0x00	; 0
     1c2:	b1 e0       	ldi	r27, 0x01	; 1
     1c4:	e4 ec       	ldi	r30, 0xC4	; 196
     1c6:	f9 e1       	ldi	r31, 0x19	; 25
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x10>
     1ca:	05 90       	lpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	a2 39       	cpi	r26, 0x92	; 146
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0xc>

000001d4 <__do_clear_bss>:
     1d4:	22 e0       	ldi	r18, 0x02	; 2
     1d6:	a2 e9       	ldi	r26, 0x92	; 146
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a9 35       	cpi	r26, 0x59	; 89
     1e0:	b2 07       	cpc	r27, r18
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>

000001e4 <__do_global_ctors>:
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	c9 ed       	ldi	r28, 0xD9	; 217
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <__do_global_ctors+0x10>
     1ec:	21 97       	sbiw	r28, 0x01	; 1
     1ee:	fe 01       	movw	r30, r28
     1f0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__tablejump2__>
     1f4:	c7 3d       	cpi	r28, 0xD7	; 215
     1f6:	d1 07       	cpc	r29, r17
     1f8:	c9 f7       	brne	.-14     	; 0x1ec <__do_global_ctors+0x8>
     1fa:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <main>
     1fe:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <_exit>

00000202 <__bad_interrupt>:
     202:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000206 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     206:	26 e0       	ldi	r18, 0x06	; 6
     208:	40 e8       	ldi	r20, 0x80	; 128
     20a:	55 e2       	ldi	r21, 0x25	; 37
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	83 eb       	ldi	r24, 0xB3	; 179
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN14HardwareSerial5beginEmh>

void setup(void)
{
	// start serial port
	Serial.begin(9600);
	Serial.println("Dallas Temperature IC Control Library Demo");
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	71 e0       	ldi	r23, 0x01	; 1
     21c:	83 eb       	ldi	r24, 0xB3	; 179
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5Print7printlnEPKc>

	// Start up the library
	sensors.begin();
     224:	82 e9       	ldi	r24, 0x92	; 146
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0c 94 34 02 	jmp	0x468	; 0x468 <_ZN17DallasTemperature5beginEv>

0000022c <loop>:

void loop(void)
{
	// call sensors.requestTemperatures() to issue a global temperature
	// request to all devices on the bus
	Serial.print(" Requesting temperatures...");
     22c:	6b e2       	ldi	r22, 0x2B	; 43
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	83 eb       	ldi	r24, 0xB3	; 179
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN5Print5printEPKc>
	sensors.requestTemperatures(); // Send the command to get temperatures
     238:	82 e9       	ldi	r24, 0x92	; 146
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 19 03 	call	0x632	; 0x632 <_ZN17DallasTemperature19requestTemperaturesEv>
	Serial.println("DONE");
     240:	67 e4       	ldi	r22, 0x47	; 71
     242:	71 e0       	ldi	r23, 0x01	; 1
     244:	83 eb       	ldi	r24, 0xB3	; 179
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5Print7printlnEPKc>

	Serial.print("Temperature for Device 1 is: ");
     24c:	6c e4       	ldi	r22, 0x4C	; 76
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	83 eb       	ldi	r24, 0xB3	; 179
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN5Print5printEPKc>
	Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	82 e9       	ldi	r24, 0x92	; 146
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN17DallasTemperature15getTempCByIndexEh>
     262:	ab 01       	movw	r20, r22
     264:	bc 01       	movw	r22, r24
     266:	22 e0       	ldi	r18, 0x02	; 2
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	83 eb       	ldi	r24, 0xB3	; 179
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <_ZN5Print5printEdi>

00000272 <_GLOBAL__sub_I_oneWire>:
// Data wire is plugged into pin 2 on the Arduino
#define ONE_WIRE_BUS 2

// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
     272:	62 e0       	ldi	r22, 0x02	; 2
     274:	85 ea       	ldi	r24, 0xA5	; 165
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
     27c:	65 ea       	ldi	r22, 0xA5	; 165
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	82 e9       	ldi	r24, 0x92	; 146
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0c 94 45 01 	jmp	0x28a	; 0x28a <_ZN17DallasTemperatureC1EP7OneWire>

00000288 <_ZN17DallasTemperature19defaultAlarmHandlerEPKh>:
    DeviceAddress deviceAddress;
    getAddress(deviceAddress, deviceIndex);

    return requestTemperaturesByAddress(deviceAddress);

}
     288:	08 95       	ret

0000028a <_ZN17DallasTemperatureC1EP7OneWire>:
     28a:	fc 01       	movw	r30, r24
     28c:	84 e4       	ldi	r24, 0x44	; 68
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	92 8b       	std	Z+18, r25	; 0x12
     292:	81 8b       	std	Z+17, r24	; 0x11
     294:	76 83       	std	Z+6, r23	; 0x06
     296:	65 83       	std	Z+5, r22	; 0x05
     298:	14 82       	std	Z+4, r1	; 0x04
     29a:	10 82       	st	Z, r1
     29c:	89 e0       	ldi	r24, 0x09	; 9
     29e:	81 83       	std	Z+1, r24	; 0x01
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	82 83       	std	Z+2, r24	; 0x02
     2a4:	83 83       	std	Z+3, r24	; 0x03
     2a6:	08 95       	ret

000002a8 <_ZN17DallasTemperature12validAddressEPKh>:
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	eb 01       	movw	r28, r22
     2ae:	67 e0       	ldi	r22, 0x07	; 7
     2b0:	ce 01       	movw	r24, r28
     2b2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN7OneWire4crc8EPKhh>
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ba:	28 13       	cpse	r18, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	89 2f       	mov	r24, r25
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <_ZN17DallasTemperature10getAddressEPhh>:
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	8c 01       	movw	r16, r24
     2d4:	7b 01       	movw	r14, r22
     2d6:	d4 2f       	mov	r29, r20
     2d8:	fc 01       	movw	r30, r24
     2da:	85 81       	ldd	r24, Z+5	; 0x05
     2dc:	96 81       	ldd	r25, Z+6	; 0x06
     2de:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN7OneWire12reset_searchEv>
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	b7 01       	movw	r22, r14
     2e8:	f8 01       	movw	r30, r16
     2ea:	85 81       	ldd	r24, Z+5	; 0x05
     2ec:	96 81       	ldd	r25, Z+6	; 0x06
     2ee:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN7OneWire6searchEPhb>
     2f2:	88 23       	and	r24, r24
     2f4:	59 f0       	breq	.+22     	; 0x30c <_ZN17DallasTemperature10getAddressEPhh+0x46>
     2f6:	dc 13       	cpse	r29, r28
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <_ZN17DallasTemperature10getAddressEPhh+0x40>
     2fa:	b7 01       	movw	r22, r14
     2fc:	c8 01       	movw	r24, r16
     2fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN17DallasTemperature12validAddressEPKh>
     302:	81 11       	cpse	r24, r1
     304:	04 c0       	rjmp	.+8      	; 0x30e <_ZN17DallasTemperature10getAddressEPhh+0x48>
     306:	cf 5f       	subi	r28, 0xFF	; 255
     308:	dc 17       	cp	r29, r28
     30a:	60 f7       	brcc	.-40     	; 0x2e4 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <_ZN17DallasTemperature14readScratchPadEPKhPh>:
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
     32a:	eb 01       	movw	r28, r22
     32c:	7a 01       	movw	r14, r20
     32e:	fc 01       	movw	r30, r24
     330:	85 81       	ldd	r24, Z+5	; 0x05
     332:	96 81       	ldd	r25, Z+6	; 0x06
     334:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     338:	88 23       	and	r24, r24
     33a:	11 f1       	breq	.+68     	; 0x380 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x64>
     33c:	be 01       	movw	r22, r28
     33e:	f8 01       	movw	r30, r16
     340:	85 81       	ldd	r24, Z+5	; 0x05
     342:	96 81       	ldd	r25, Z+6	; 0x06
     344:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN7OneWire6selectEPKh>
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	6e eb       	ldi	r22, 0xBE	; 190
     34c:	f8 01       	movw	r30, r16
     34e:	85 81       	ldd	r24, Z+5	; 0x05
     350:	96 81       	ldd	r25, Z+6	; 0x06
     352:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
     356:	e7 01       	movw	r28, r14
     358:	f9 e0       	ldi	r31, 0x09	; 9
     35a:	ef 0e       	add	r14, r31
     35c:	f1 1c       	adc	r15, r1
     35e:	f8 01       	movw	r30, r16
     360:	85 81       	ldd	r24, Z+5	; 0x05
     362:	96 81       	ldd	r25, Z+6	; 0x06
     364:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN7OneWire4readEv>
     368:	89 93       	st	Y+, r24
     36a:	ce 15       	cp	r28, r14
     36c:	df 05       	cpc	r29, r15
     36e:	b9 f7       	brne	.-18     	; 0x35e <_ZN17DallasTemperature14readScratchPadEPKhPh+0x42>
     370:	f8 01       	movw	r30, r16
     372:	85 81       	ldd	r24, Z+5	; 0x05
     374:	96 81       	ldd	r25, Z+6	; 0x06
     376:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	09 f0       	breq	.+2      	; 0x382 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x66>
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	89 2f       	mov	r24, r25
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	08 95       	ret

00000392 <_ZN17DallasTemperature11isConnectedEPKhPh>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ea 01       	movw	r28, r20
     398:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17DallasTemperature14readScratchPadEPKhPh>
     39c:	88 23       	and	r24, r24
     39e:	39 f0       	breq	.+14     	; 0x3ae <_ZN17DallasTemperature11isConnectedEPKhPh+0x1c>
     3a0:	68 e0       	ldi	r22, 0x08	; 8
     3a2:	ce 01       	movw	r24, r28
     3a4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN7OneWire4crc8EPKhh>
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	28 85       	ldd	r18, Y+8	; 0x08
     3ac:	28 13       	cpse	r18, r24
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	89 2f       	mov	r24, r25
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <_ZN17DallasTemperature15readPowerSupplyEPKh>:
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
     3c2:	8b 01       	movw	r16, r22
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     3cc:	b8 01       	movw	r22, r16
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	9e 81       	ldd	r25, Y+6	; 0x06
     3d2:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN7OneWire6selectEPKh>
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	64 eb       	ldi	r22, 0xB4	; 180
     3da:	8d 81       	ldd	r24, Y+5	; 0x05
     3dc:	9e 81       	ldd	r25, Y+6	; 0x06
     3de:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	9e 81       	ldd	r25, Y+6	; 0x06
     3e6:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7OneWire8read_bitEv>
     3ea:	18 2f       	mov	r17, r24
     3ec:	8d 81       	ldd	r24, Y+5	; 0x05
     3ee:	9e 81       	ldd	r25, Y+6	; 0x06
     3f0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	11 11       	cpse	r17, r1
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	08 95       	ret

00000404 <_ZN17DallasTemperature13getResolutionEPKh>:
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	29 97       	sbiw	r28, 0x09	; 9
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	fb 01       	movw	r30, r22
     41a:	20 81       	ld	r18, Z
     41c:	20 31       	cpi	r18, 0x10	; 16
     41e:	d1 f0       	breq	.+52     	; 0x454 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
     420:	ae 01       	movw	r20, r28
     422:	4f 5f       	subi	r20, 0xFF	; 255
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN17DallasTemperature11isConnectedEPKhPh>
     42a:	88 23       	and	r24, r24
     42c:	89 f0       	breq	.+34     	; 0x450 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     42e:	8d 81       	ldd	r24, Y+5	; 0x05
     430:	8f 33       	cpi	r24, 0x3F	; 63
     432:	61 f0       	breq	.+24     	; 0x44c <_ZN17DallasTemperature13getResolutionEPKh+0x48>
     434:	20 f4       	brcc	.+8      	; 0x43e <_ZN17DallasTemperature13getResolutionEPKh+0x3a>
     436:	8f 31       	cpi	r24, 0x1F	; 31
     438:	59 f4       	brne	.+22     	; 0x450 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     43a:	89 e0       	ldi	r24, 0x09	; 9
     43c:	0c c0       	rjmp	.+24     	; 0x456 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     43e:	8f 35       	cpi	r24, 0x5F	; 95
     440:	19 f0       	breq	.+6      	; 0x448 <_ZN17DallasTemperature13getResolutionEPKh+0x44>
     442:	8f 37       	cpi	r24, 0x7F	; 127
     444:	39 f0       	breq	.+14     	; 0x454 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
     446:	04 c0       	rjmp	.+8      	; 0x450 <_ZN17DallasTemperature13getResolutionEPKh+0x4c>
     448:	8b e0       	ldi	r24, 0x0B	; 11
     44a:	05 c0       	rjmp	.+10     	; 0x456 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     44c:	8a e0       	ldi	r24, 0x0A	; 10
     44e:	03 c0       	rjmp	.+6      	; 0x456 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	01 c0       	rjmp	.+2      	; 0x456 <_ZN17DallasTemperature13getResolutionEPKh+0x52>
     454:	8c e0       	ldi	r24, 0x0C	; 12
     456:	29 96       	adiw	r28, 0x09	; 9
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <_ZN17DallasTemperature5beginEv>:
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	61 97       	sbiw	r28, 0x11	; 17
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
     482:	8c 01       	movw	r16, r24
     484:	fc 01       	movw	r30, r24
     486:	85 81       	ldd	r24, Z+5	; 0x05
     488:	96 81       	ldd	r25, Z+6	; 0x06
     48a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN7OneWire12reset_searchEv>
     48e:	f8 01       	movw	r30, r16
     490:	14 82       	std	Z+4, r1	; 0x04
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	be 01       	movw	r22, r28
     496:	66 5f       	subi	r22, 0xF6	; 246
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	f8 01       	movw	r30, r16
     49c:	85 81       	ldd	r24, Z+5	; 0x05
     49e:	96 81       	ldd	r25, Z+6	; 0x06
     4a0:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN7OneWire6searchEPhb>
     4a4:	88 23       	and	r24, r24
     4a6:	d1 f1       	breq	.+116    	; 0x51c <_ZN17DallasTemperature5beginEv+0xb4>
     4a8:	be 01       	movw	r22, r28
     4aa:	66 5f       	subi	r22, 0xF6	; 246
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	c8 01       	movw	r24, r16
     4b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN17DallasTemperature12validAddressEPKh>
     4b4:	88 23       	and	r24, r24
     4b6:	69 f3       	breq	.-38     	; 0x492 <_ZN17DallasTemperature5beginEv+0x2a>
     4b8:	f8 01       	movw	r30, r16
     4ba:	80 81       	ld	r24, Z
     4bc:	81 11       	cpse	r24, r1
     4be:	08 c0       	rjmp	.+16     	; 0x4d0 <_ZN17DallasTemperature5beginEv+0x68>
     4c0:	be 01       	movw	r22, r28
     4c2:	66 5f       	subi	r22, 0xF6	; 246
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	c8 01       	movw	r24, r16
     4c8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN17DallasTemperature15readPowerSupplyEPKh>
     4cc:	81 11       	cpse	r24, r1
     4ce:	22 c0       	rjmp	.+68     	; 0x514 <_ZN17DallasTemperature5beginEv+0xac>
     4d0:	ae 01       	movw	r20, r28
     4d2:	4f 5f       	subi	r20, 0xFF	; 255
     4d4:	5f 4f       	sbci	r21, 0xFF	; 255
     4d6:	be 01       	movw	r22, r28
     4d8:	66 5f       	subi	r22, 0xF6	; 246
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	c8 01       	movw	r24, r16
     4de:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17DallasTemperature14readScratchPadEPKhPh>
     4e2:	f8 01       	movw	r30, r16
     4e4:	f1 80       	ldd	r15, Z+1	; 0x01
     4e6:	be 01       	movw	r22, r28
     4e8:	66 5f       	subi	r22, 0xF6	; 246
     4ea:	7f 4f       	sbci	r23, 0xFF	; 255
     4ec:	c8 01       	movw	r24, r16
     4ee:	0e 94 02 02 	call	0x404	; 0x404 <_ZN17DallasTemperature13getResolutionEPKh>
     4f2:	8f 15       	cp	r24, r15
     4f4:	18 f4       	brcc	.+6      	; 0x4fc <_ZN17DallasTemperature5beginEv+0x94>
     4f6:	f8 01       	movw	r30, r16
     4f8:	81 81       	ldd	r24, Z+1	; 0x01
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <_ZN17DallasTemperature5beginEv+0xa0>
     4fc:	be 01       	movw	r22, r28
     4fe:	66 5f       	subi	r22, 0xF6	; 246
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	c8 01       	movw	r24, r16
     504:	0e 94 02 02 	call	0x404	; 0x404 <_ZN17DallasTemperature13getResolutionEPKh>
     508:	f8 01       	movw	r30, r16
     50a:	81 83       	std	Z+1, r24	; 0x01
     50c:	84 81       	ldd	r24, Z+4	; 0x04
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	84 83       	std	Z+4, r24	; 0x04
     512:	bf cf       	rjmp	.-130    	; 0x492 <_ZN17DallasTemperature5beginEv+0x2a>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	f8 01       	movw	r30, r16
     518:	80 83       	st	Z, r24
     51a:	da cf       	rjmp	.-76     	; 0x4d0 <_ZN17DallasTemperature5beginEv+0x68>
     51c:	61 96       	adiw	r28, 0x11	; 17
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	08 95       	ret

00000534 <_ZN17DallasTemperature21isConversionAvailableEPKh>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	29 97       	sbiw	r28, 0x09	; 9
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	ae 01       	movw	r20, r28
     54a:	4f 5f       	subi	r20, 0xFF	; 255
     54c:	5f 4f       	sbci	r21, 0xFF	; 255
     54e:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17DallasTemperature14readScratchPadEPKhPh>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	99 81       	ldd	r25, Y+1	; 0x01
     556:	91 11       	cpse	r25, r1
     558:	01 c0       	rjmp	.+2      	; 0x55c <_ZN17DallasTemperature21isConversionAvailableEPKh+0x28>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	29 96       	adiw	r28, 0x09	; 9
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh>:
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	e7 ef       	ldi	r30, 0xF7	; 247
     58a:	e6 0f       	add	r30, r22
     58c:	e3 30       	cpi	r30, 0x03	; 3
     58e:	40 f4       	brcc	.+16     	; 0x5a0 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x32>
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e6 59       	subi	r30, 0x96	; 150
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	c0 80       	ld	r12, Z
     59c:	d1 80       	ldd	r13, Z+1	; 0x01
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x3a>
     5a0:	8e ee       	ldi	r24, 0xEE	; 238
     5a2:	c8 2e       	mov	r12, r24
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	d8 2e       	mov	r13, r24
     5a8:	41 15       	cp	r20, r1
     5aa:	51 05       	cpc	r21, r1
     5ac:	19 f1       	breq	.+70     	; 0x5f4 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x86>
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	88 23       	and	r24, r24
     5b2:	01 f1       	breq	.+64     	; 0x5f4 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x86>
     5b4:	88 81       	ld	r24, Y
     5b6:	81 11       	cpse	r24, r1
     5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x86>
     5ba:	8a 01       	movw	r16, r20
     5bc:	0e 94 cc 0a 	call	0x1598	; 0x1598 <millis>
     5c0:	4b 01       	movw	r8, r22
     5c2:	5c 01       	movw	r10, r24
     5c4:	0d 2c       	mov	r0, r13
     5c6:	00 0c       	add	r0, r0
     5c8:	ee 08       	sbc	r14, r14
     5ca:	ff 08       	sbc	r15, r15
     5cc:	b8 01       	movw	r22, r16
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN17DallasTemperature21isConversionAvailableEPKh>
     5d4:	81 11       	cpse	r24, r1
     5d6:	20 c0       	rjmp	.+64     	; 0x618 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0xaa>
     5d8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <millis>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	8c 19       	sub	r24, r12
     5e2:	9d 09       	sbc	r25, r13
     5e4:	ae 09       	sbc	r26, r14
     5e6:	bf 09       	sbc	r27, r15
     5e8:	88 15       	cp	r24, r8
     5ea:	99 05       	cpc	r25, r9
     5ec:	aa 05       	cpc	r26, r10
     5ee:	bb 05       	cpc	r27, r11
     5f0:	68 f3       	brcs	.-38     	; 0x5cc <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0x5e>
     5f2:	12 c0       	rjmp	.+36     	; 0x618 <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh+0xaa>
     5f4:	b6 01       	movw	r22, r12
     5f6:	dd 0c       	add	r13, r13
     5f8:	88 0b       	sbc	r24, r24
     5fa:	99 0b       	sbc	r25, r25
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <delay>
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	bf 90       	pop	r11
     62a:	af 90       	pop	r10
     62c:	9f 90       	pop	r9
     62e:	8f 90       	pop	r8
     630:	08 95       	ret

00000632 <_ZN17DallasTemperature19requestTemperaturesEv>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
     638:	8d 81       	ldd	r24, Y+5	; 0x05
     63a:	9e 81       	ldd	r25, Y+6	; 0x06
     63c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     640:	8d 81       	ldd	r24, Y+5	; 0x05
     642:	9e 81       	ldd	r25, Y+6	; 0x06
     644:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN7OneWire4skipEv>
     648:	48 81       	ld	r20, Y
     64a:	64 e4       	ldi	r22, 0x44	; 68
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	9e 81       	ldd	r25, Y+6	; 0x06
     650:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	88 23       	and	r24, r24
     658:	41 f0       	breq	.+16     	; 0x66a <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	ce 01       	movw	r24, r28
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_ZN17DallasTemperature27blockTillConversionCompleteEhPKh>
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:
    return getTempF((uint8_t*)deviceAddress);

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad){
     670:	fa 01       	movw	r30, r20

    int16_t fpTemperature =
    (((int16_t) scratchPad[TEMP_MSB]) << 11) |
    (((int16_t) scratchPad[TEMP_LSB]) << 3);
     672:	21 81       	ldd	r18, Z+1	; 0x01
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	c9 01       	movw	r24, r18
     678:	98 2f       	mov	r25, r24
     67a:	88 27       	eor	r24, r24
     67c:	99 0f       	add	r25, r25
     67e:	99 0f       	add	r25, r25
     680:	99 0f       	add	r25, r25
     682:	20 81       	ld	r18, Z
     684:	48 e0       	ldi	r20, 0x08	; 8
     686:	24 9f       	mul	r18, r20
     688:	90 01       	movw	r18, r0
     68a:	11 24       	eor	r1, r1
     68c:	28 2b       	or	r18, r24
     68e:	39 2b       	or	r19, r25
    value for a DS18S20, and James Cameron added legacy DS1820 support.

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
     690:	db 01       	movw	r26, r22
     692:	8c 91       	ld	r24, X
     694:	80 31       	cpi	r24, 0x10	; 16
     696:	c1 f4       	brne	.+48     	; 0x6c8 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x58>
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
            (
                ((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) /
     698:	67 81       	ldd	r22, Z+7	; 0x07
     69a:	70 e0       	ldi	r23, 0x00	; 0

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
     69c:	86 81       	ldd	r24, Z+6	; 0x06
     69e:	ab 01       	movw	r20, r22
     6a0:	48 1b       	sub	r20, r24
     6a2:	51 09       	sbc	r21, r1
     6a4:	ca 01       	movw	r24, r20
     6a6:	96 95       	lsr	r25
     6a8:	98 2f       	mov	r25, r24
     6aa:	88 27       	eor	r24, r24
     6ac:	97 95       	ror	r25
     6ae:	87 95       	ror	r24
     6b0:	0e 94 90 0c 	call	0x1920	; 0x1920 <__divmodhi4>
     6b4:	60 51       	subi	r22, 0x10	; 16
     6b6:	71 09       	sbc	r23, r1
     6b8:	20 7f       	andi	r18, 0xF0	; 240
     6ba:	53 e0       	ldi	r21, 0x03	; 3
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	5a 95       	dec	r21
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x4c>
     6c4:	26 0f       	add	r18, r22
     6c6:	37 1f       	adc	r19, r23
                  scratchPad[COUNT_PER_C]
            );
    }

    return fpTemperature;
}
     6c8:	c9 01       	movw	r24, r18
     6ca:	08 95       	ret

000006cc <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress){
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	29 97       	sbiw	r28, 0x09	; 9
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	8c 01       	movw	r16, r24
     6ea:	7b 01       	movw	r14, r22

    ScratchPad scratchPad;
    if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
     6ec:	ae 01       	movw	r20, r28
     6ee:	4f 5f       	subi	r20, 0xFF	; 255
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN17DallasTemperature11isConnectedEPKhPh>
     6f6:	88 23       	and	r24, r24
     6f8:	41 f0       	breq	.+16     	; 0x70a <_ZN17DallasTemperature7getTempEPKh+0x3e>
     6fa:	ae 01       	movw	r20, r28
     6fc:	4f 5f       	subi	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	b7 01       	movw	r22, r14
     702:	c8 01       	movw	r24, r16
     704:	0e 94 38 03 	call	0x670	; 0x670 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
     708:	02 c0       	rjmp	.+4      	; 0x70e <_ZN17DallasTemperature7getTempEPKh+0x42>
    return DEVICE_DISCONNECTED_RAW;
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	94 ee       	ldi	r25, 0xE4	; 228

}
     70e:	29 96       	adiw	r28, 0x09	; 9
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	08 95       	ret

00000728 <_ZN17DallasTemperature8getTempCEPKh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
     728:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN17DallasTemperature7getTempEPKh>
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
     72c:	81 38       	cpi	r24, 0x81	; 129
     72e:	24 ee       	ldi	r18, 0xE4	; 228
     730:	92 07       	cpc	r25, r18
     732:	6c f0       	brlt	.+26     	; 0x74e <_ZN17DallasTemperature8getTempCEPKh+0x26>
    return DEVICE_DISCONNECTED_C;
    // C = RAW/128
    return (float)raw * 0.0078125;
     734:	bc 01       	movw	r22, r24
     736:	99 0f       	add	r25, r25
     738:	88 0b       	sbc	r24, r24
     73a:	99 0b       	sbc	r25, r25
     73c:	0e 94 19 06 	call	0xc32	; 0xc32 <__floatsisf>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	5c e3       	ldi	r21, 0x3C	; 60
     748:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__mulsf3>
     74c:	08 95       	ret

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
    return DEVICE_DISCONNECTED_C;
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8e ef       	ldi	r24, 0xFE	; 254
     754:	92 ec       	ldi	r25, 0xC2	; 194
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
}
     756:	08 95       	ret

00000758 <_ZN17DallasTemperature15getTempCByIndexEh>:
    return requestTemperaturesByAddress(deviceAddress);

}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	28 97       	sbiw	r28, 0x08	; 8
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	8c 01       	movw	r16, r24
     772:	46 2f       	mov	r20, r22

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
     774:	be 01       	movw	r22, r28
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN17DallasTemperature10getAddressEPhh>
     77e:	88 23       	and	r24, r24
     780:	39 f0       	breq	.+14     	; 0x790 <_ZN17DallasTemperature15getTempCByIndexEh+0x38>
        return DEVICE_DISCONNECTED_C;
    }

    return getTempC((uint8_t*)deviceAddress);
     782:	be 01       	movw	r22, r28
     784:	6f 5f       	subi	r22, 0xFF	; 255
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	c8 01       	movw	r24, r16
     78a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN17DallasTemperature8getTempCEPKh>
     78e:	04 c0       	rjmp	.+8      	; 0x798 <_ZN17DallasTemperature15getTempCByIndexEh+0x40>
// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
        return DEVICE_DISCONNECTED_C;
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	8e ef       	ldi	r24, 0xFE	; 254
     796:	92 ec       	ldi	r25, 0xC2	; 194
    }

    return getTempC((uint8_t*)deviceAddress);

}
     798:	28 96       	adiw	r28, 0x08	; 8
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	fc 01       	movw	r30, r24
     7ba:	f0 80       	ld	r15, Z
     7bc:	c1 81       	ldd	r28, Z+1	; 0x01
     7be:	d2 81       	ldd	r29, Z+2	; 0x02
     7c0:	f8 94       	cli
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	0f 2d       	mov	r16, r15
     7c6:	00 95       	com	r16
     7c8:	80 23       	and	r24, r16
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	78 94       	sei
     7ce:	1d e7       	ldi	r17, 0x7D	; 125
     7d0:	11 50       	subi	r17, 0x01	; 1
     7d2:	29 f1       	breq	.+74     	; 0x81e <_ZN7OneWire5resetEv+0x70>
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     7dc:	88 81       	ld	r24, Y
     7de:	8f 21       	and	r24, r15
     7e0:	b9 f3       	breq	.-18     	; 0x7d0 <_ZN7OneWire5resetEv+0x22>
     7e2:	f8 94       	cli
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	80 23       	and	r24, r16
     7e8:	8a 83       	std	Y+2, r24	; 0x02
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	8f 29       	or	r24, r15
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	78 94       	sei
     7f2:	80 ee       	ldi	r24, 0xE0	; 224
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     7fa:	f8 94       	cli
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	08 23       	and	r16, r24
     800:	09 83       	std	Y+1, r16	; 0x01
     802:	86 e4       	ldi	r24, 0x46	; 70
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     80a:	88 81       	ld	r24, Y
     80c:	f8 22       	and	r15, r24
     80e:	11 e0       	ldi	r17, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <_ZN7OneWire5resetEv+0x66>
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	78 94       	sei
     816:	8a e9       	ldi	r24, 0x9A	; 154
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     81e:	81 2f       	mov	r24, r17
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	08 95       	ret

0000082c <_ZN7OneWire9write_bitEh>:
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	fc 01       	movw	r30, r24
     834:	10 81       	ld	r17, Z
     836:	c1 81       	ldd	r28, Z+1	; 0x01
     838:	d2 81       	ldd	r29, Z+2	; 0x02
     83a:	81 2f       	mov	r24, r17
     83c:	80 95       	com	r24
     83e:	60 ff       	sbrs	r22, 0
     840:	12 c0       	rjmp	.+36     	; 0x866 <_ZN7OneWire9write_bitEh+0x3a>
     842:	f8 94       	cli
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	89 23       	and	r24, r25
     848:	8a 83       	std	Y+2, r24	; 0x02
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	81 2b       	or	r24, r17
     84e:	89 83       	std	Y+1, r24	; 0x01
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	18 2b       	or	r17, r24
     85c:	1a 83       	std	Y+2, r17	; 0x02
     85e:	78 94       	sei
     860:	87 e3       	ldi	r24, 0x37	; 55
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	11 c0       	rjmp	.+34     	; 0x888 <_ZN7OneWire9write_bitEh+0x5c>
     866:	f8 94       	cli
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	89 23       	and	r24, r25
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	81 2b       	or	r24, r17
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	81 e4       	ldi	r24, 0x41	; 65
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	18 2b       	or	r17, r24
     880:	1a 83       	std	Y+2, r17	; 0x02
     882:	78 94       	sei
     884:	85 e0       	ldi	r24, 0x05	; 5
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <delayMicroseconds>

00000892 <_ZN7OneWire8read_bitEv>:
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	fc 01       	movw	r30, r24
     89c:	00 81       	ld	r16, Z
     89e:	c1 81       	ldd	r28, Z+1	; 0x01
     8a0:	d2 81       	ldd	r29, Z+2	; 0x02
     8a2:	f8 94       	cli
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	80 2b       	or	r24, r16
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	10 2f       	mov	r17, r16
     8ae:	10 95       	com	r17
     8b0:	81 23       	and	r24, r17
     8b2:	8a 83       	std	Y+2, r24	; 0x02
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	18 23       	and	r17, r24
     8c0:	19 83       	std	Y+1, r17	; 0x01
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     8ca:	c8 81       	ld	r28, Y
     8cc:	78 94       	sei
     8ce:	85 e3       	ldi	r24, 0x35	; 53
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 39 0b 	call	0x1672	; 0x1672 <delayMicroseconds>
     8d6:	c0 23       	and	r28, r16
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	09 f4       	brne	.+2      	; 0x8de <_ZN7OneWire8read_bitEv+0x4c>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <_ZN7OneWire5writeEhh>:
     8e8:	df 92       	push	r13
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	d6 2e       	mov	r13, r22
     8fa:	e4 2e       	mov	r14, r20
     8fc:	08 e0       	ldi	r16, 0x08	; 8
     8fe:	10 e0       	ldi	r17, 0x00	; 0
     900:	ff 24       	eor	r15, r15
     902:	f3 94       	inc	r15
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	8d 2d       	mov	r24, r13
     908:	8f 21       	and	r24, r15
     90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN7OneWire9write_bitEh>
     914:	ff 0c       	add	r15, r15
     916:	01 50       	subi	r16, 0x01	; 1
     918:	11 09       	sbc	r17, r1
     91a:	a1 f7       	brne	.-24     	; 0x904 <__stack+0x5>
     91c:	e1 10       	cpse	r14, r1
     91e:	10 c0       	rjmp	.+32     	; 0x940 <__stack+0x41>
     920:	f8 94       	cli
     922:	e9 81       	ldd	r30, Y+1	; 0x01
     924:	fa 81       	ldd	r31, Y+2	; 0x02
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	88 81       	ld	r24, Y
     92a:	80 95       	com	r24
     92c:	89 23       	and	r24, r25
     92e:	81 83       	std	Z+1, r24	; 0x01
     930:	e9 81       	ldd	r30, Y+1	; 0x01
     932:	fa 81       	ldd	r31, Y+2	; 0x02
     934:	92 81       	ldd	r25, Z+2	; 0x02
     936:	88 81       	ld	r24, Y
     938:	80 95       	com	r24
     93a:	89 23       	and	r24, r25
     93c:	82 83       	std	Z+2, r24	; 0x02
     93e:	78 94       	sei
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	08 95       	ret

00000950 <_ZN7OneWire4readEv>:
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	7c 01       	movw	r14, r24
     95e:	08 e0       	ldi	r16, 0x08	; 8
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	d1 e0       	ldi	r29, 0x01	; 1
     966:	c7 01       	movw	r24, r14
     968:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7OneWire8read_bitEv>
     96c:	81 11       	cpse	r24, r1
     96e:	cd 2b       	or	r28, r29
     970:	dd 0f       	add	r29, r29
     972:	01 50       	subi	r16, 0x01	; 1
     974:	11 09       	sbc	r17, r1
     976:	b9 f7       	brne	.-18     	; 0x966 <_ZN7OneWire4readEv+0x16>
     978:	8c 2f       	mov	r24, r28
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <_ZN7OneWire6selectEPKh>:
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	8c 01       	movw	r16, r24
     996:	7b 01       	movw	r14, r22
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	65 e5       	ldi	r22, 0x55	; 85
     99c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
     9a0:	e7 01       	movw	r28, r14
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	e8 0e       	add	r14, r24
     9a6:	f1 1c       	adc	r15, r1
     9a8:	69 91       	ld	r22, Y+
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	c8 01       	movw	r24, r16
     9ae:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
     9b2:	ce 15       	cp	r28, r14
     9b4:	df 05       	cpc	r29, r15
     9b6:	c1 f7       	brne	.-16     	; 0x9a8 <_ZN7OneWire6selectEPKh+0x20>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	08 95       	ret

000009c6 <_ZN7OneWire4skipEv>:
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	6c ec       	ldi	r22, 0xCC	; 204
     9ca:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>

000009ce <_ZN7OneWire12reset_searchEv>:
     9ce:	fc 01       	movw	r30, r24
     9d0:	13 86       	std	Z+11, r1	; 0x0b
     9d2:	15 86       	std	Z+13, r1	; 0x0d
     9d4:	14 86       	std	Z+12, r1	; 0x0c
     9d6:	dc 01       	movw	r26, r24
     9d8:	1b 96       	adiw	r26, 0x0b	; 11
     9da:	33 96       	adiw	r30, 0x03	; 3
     9dc:	1e 92       	st	-X, r1
     9de:	ae 17       	cp	r26, r30
     9e0:	bf 07       	cpc	r27, r31
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <_ZN7OneWire12reset_searchEv+0xe>
     9e4:	08 95       	ret

000009e6 <_ZN7OneWireC1Eh>:
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
     9ee:	16 2f       	mov	r17, r22
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	81 2f       	mov	r24, r17
     9f4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <pinMode>
     9f8:	61 2f       	mov	r22, r17
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	fb 01       	movw	r30, r22
     9fe:	e8 59       	subi	r30, 0x98	; 152
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	e4 91       	lpm	r30, Z
     a04:	e8 83       	st	Y, r30
     a06:	fb 01       	movw	r30, r22
     a08:	e4 58       	subi	r30, 0x84	; 132
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	e4 91       	lpm	r30, Z
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e0 57       	subi	r30, 0x70	; 112
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	85 91       	lpm	r24, Z+
     a1a:	94 91       	lpm	r25, Z
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	ce 01       	movw	r24, r28
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_ZN7OneWire12reset_searchEv>

00000a2c <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	6b 01       	movw	r12, r22
     a42:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
     a44:	8d 85       	ldd	r24, Y+13	; 0x0d
     a46:	81 11       	cpse	r24, r1
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <_ZN7OneWire6searchEPhb+0x28>
   {
      // 1-Wire reset
      if (!reset())
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN7OneWire5resetEv>
     a50:	81 11       	cpse	r24, r1
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <_ZN7OneWire6searchEPhb+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
     a54:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
     a56:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     a58:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	64 c0       	rjmp	.+200    	; 0xb26 <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
     a5e:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return FALSE;
      }

      // issue the search command
      if (search_mode == true) {
     a60:	11 23       	and	r17, r17
     a62:	11 f0       	breq	.+4      	; 0xa68 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
     a64:	60 ef       	ldi	r22, 0xF0	; 240
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
     a68:	6c ee       	ldi	r22, 0xEC	; 236
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     a70:	01 e0       	ldi	r16, 0x01	; 1
     a72:	e1 2c       	mov	r14, r1
     a74:	b1 2c       	mov	r11, r1
     a76:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7OneWire8read_bitEv>
     a7e:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 49 04 	call	0x892	; 0x892 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	f9 12       	cpse	r15, r25
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <_ZN7OneWire6searchEPhb+0x66>
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	b1 f4       	brne	.+44     	; 0xabc <_ZN7OneWire6searchEPhb+0x90>
     a90:	34 c0       	rjmp	.+104    	; 0xafa <_ZN7OneWire6searchEPhb+0xce>
     a92:	2e 2d       	mov	r18, r14
     a94:	30 e0       	ldi	r19, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
     a96:	f8 12       	cpse	r15, r24
     a98:	1b c0       	rjmp	.+54     	; 0xad0 <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
     a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a9c:	18 17       	cp	r17, r24
     a9e:	38 f4       	brcc	.+14     	; 0xaae <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     aa0:	fe 01       	movw	r30, r28
     aa2:	e2 0f       	add	r30, r18
     aa4:	f3 1f       	adc	r31, r19
     aa6:	83 81       	ldd	r24, Z+3	; 0x03
     aa8:	80 23       	and	r24, r16
     aaa:	41 f4       	brne	.+16     	; 0xabc <_ZN7OneWire6searchEPhb+0x90>
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_ZN7OneWire6searchEPhb+0x86>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     aae:	18 17       	cp	r17, r24
     ab0:	29 f0       	breq	.+10     	; 0xabc <_ZN7OneWire6searchEPhb+0x90>
     ab2:	f1 2c       	mov	r15, r1
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
     ab4:	19 30       	cpi	r17, 0x09	; 9
     ab6:	58 f4       	brcc	.+22     	; 0xace <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
     ab8:	1c 87       	std	Y+12, r17	; 0x0c
     aba:	09 c0       	rjmp	.+18     	; 0xace <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
     abc:	fe 01       	movw	r30, r28
     abe:	ee 0d       	add	r30, r14
     ac0:	f1 1d       	adc	r31, r1
     ac2:	83 81       	ldd	r24, Z+3	; 0x03
     ac4:	80 2b       	or	r24, r16
     ac6:	83 83       	std	Z+3, r24	; 0x03
     ac8:	ff 24       	eor	r15, r15
     aca:	f3 94       	inc	r15
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     ace:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     ad0:	fe 01       	movw	r30, r28
     ad2:	e2 0f       	add	r30, r18
     ad4:	f3 1f       	adc	r31, r19
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	80 2f       	mov	r24, r16
     ada:	80 95       	com	r24
     adc:	89 23       	and	r24, r25
     ade:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
     ae0:	6f 2d       	mov	r22, r15
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
     ae8:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
     aea:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
     aec:	11 f4       	brne	.+4      	; 0xaf2 <_ZN7OneWire6searchEPhb+0xc6>
            {
                rom_byte_number++;
     aee:	e3 94       	inc	r14
                rom_byte_mask = 1;
     af0:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
     af2:	87 e0       	ldi	r24, 0x07	; 7
     af4:	8e 15       	cp	r24, r14
     af6:	08 f0       	brcs	.+2      	; 0xafa <_ZN7OneWire6searchEPhb+0xce>
     af8:	bf cf       	rjmp	.-130    	; 0xa78 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65))
     afa:	11 34       	cpi	r17, 0x41	; 65
     afc:	08 f4       	brcc	.+2      	; 0xb00 <_ZN7OneWire6searchEPhb+0xd4>
     afe:	aa cf       	rjmp	.-172    	; 0xa54 <_ZN7OneWire6searchEPhb+0x28>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
     b00:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
     b02:	b1 10       	cpse	r11, r1
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = TRUE;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	88 23       	and	r24, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_ZN7OneWire6searchEPhb+0xe6>
     b10:	a1 cf       	rjmp	.-190    	; 0xa54 <_ZN7OneWire6searchEPhb+0x28>
     b12:	de 01       	movw	r26, r28
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	f6 01       	movw	r30, r12
     b18:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = FALSE;
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
     b1a:	8d 91       	ld	r24, X+
     b1c:	81 93       	st	Z+, r24
     b1e:	ca 17       	cp	r28, r26
     b20:	db 07       	cpc	r29, r27
     b22:	d9 f7       	brne	.-10     	; 0xb1a <_ZN7OneWire6searchEPhb+0xee>
     b24:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	08 95       	ret

00000b3a <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
     b3a:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
     b3e:	61 50       	subi	r22, 0x01	; 1
     b40:	40 f0       	brcs	.+16     	; 0xb52 <_ZN7OneWire4crc8EPKhh+0x18>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
     b42:	9d 91       	ld	r25, X+
     b44:	e8 2f       	mov	r30, r24
     b46:	e9 27       	eor	r30, r25
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	e8 59       	subi	r30, 0x98	; 152
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
     b50:	f6 cf       	rjmp	.-20     	; 0xb3e <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
     b52:	08 95       	ret

00000b54 <__subsf3>:
     b54:	50 58       	subi	r21, 0x80	; 128

00000b56 <__addsf3>:
     b56:	bb 27       	eor	r27, r27
     b58:	aa 27       	eor	r26, r26
     b5a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__addsf3x>
     b5e:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_round>
     b62:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_pscA>
     b66:	38 f0       	brcs	.+14     	; 0xb76 <__addsf3+0x20>
     b68:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_pscB>
     b6c:	20 f0       	brcs	.+8      	; 0xb76 <__addsf3+0x20>
     b6e:	39 f4       	brne	.+14     	; 0xb7e <__addsf3+0x28>
     b70:	9f 3f       	cpi	r25, 0xFF	; 255
     b72:	19 f4       	brne	.+6      	; 0xb7a <__addsf3+0x24>
     b74:	26 f4       	brtc	.+8      	; 0xb7e <__addsf3+0x28>
     b76:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_nan>
     b7a:	0e f4       	brtc	.+2      	; 0xb7e <__addsf3+0x28>
     b7c:	e0 95       	com	r30
     b7e:	e7 fb       	bst	r30, 7
     b80:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_inf>

00000b84 <__addsf3x>:
     b84:	e9 2f       	mov	r30, r25
     b86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_split3>
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__addsf3+0xc>
     b8c:	ba 17       	cp	r27, r26
     b8e:	62 07       	cpc	r22, r18
     b90:	73 07       	cpc	r23, r19
     b92:	84 07       	cpc	r24, r20
     b94:	95 07       	cpc	r25, r21
     b96:	20 f0       	brcs	.+8      	; 0xba0 <__addsf3x+0x1c>
     b98:	79 f4       	brne	.+30     	; 0xbb8 <__addsf3x+0x34>
     b9a:	a6 f5       	brtc	.+104    	; 0xc04 <__addsf3x+0x80>
     b9c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_zero>
     ba0:	0e f4       	brtc	.+2      	; 0xba4 <__addsf3x+0x20>
     ba2:	e0 95       	com	r30
     ba4:	0b 2e       	mov	r0, r27
     ba6:	ba 2f       	mov	r27, r26
     ba8:	a0 2d       	mov	r26, r0
     baa:	0b 01       	movw	r0, r22
     bac:	b9 01       	movw	r22, r18
     bae:	90 01       	movw	r18, r0
     bb0:	0c 01       	movw	r0, r24
     bb2:	ca 01       	movw	r24, r20
     bb4:	a0 01       	movw	r20, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	ff 27       	eor	r31, r31
     bba:	59 1b       	sub	r21, r25
     bbc:	99 f0       	breq	.+38     	; 0xbe4 <__addsf3x+0x60>
     bbe:	59 3f       	cpi	r21, 0xF9	; 249
     bc0:	50 f4       	brcc	.+20     	; 0xbd6 <__addsf3x+0x52>
     bc2:	50 3e       	cpi	r21, 0xE0	; 224
     bc4:	68 f1       	brcs	.+90     	; 0xc20 <__addsf3x+0x9c>
     bc6:	1a 16       	cp	r1, r26
     bc8:	f0 40       	sbci	r31, 0x00	; 0
     bca:	a2 2f       	mov	r26, r18
     bcc:	23 2f       	mov	r18, r19
     bce:	34 2f       	mov	r19, r20
     bd0:	44 27       	eor	r20, r20
     bd2:	58 5f       	subi	r21, 0xF8	; 248
     bd4:	f3 cf       	rjmp	.-26     	; 0xbbc <__addsf3x+0x38>
     bd6:	46 95       	lsr	r20
     bd8:	37 95       	ror	r19
     bda:	27 95       	ror	r18
     bdc:	a7 95       	ror	r26
     bde:	f0 40       	sbci	r31, 0x00	; 0
     be0:	53 95       	inc	r21
     be2:	c9 f7       	brne	.-14     	; 0xbd6 <__addsf3x+0x52>
     be4:	7e f4       	brtc	.+30     	; 0xc04 <__addsf3x+0x80>
     be6:	1f 16       	cp	r1, r31
     be8:	ba 0b       	sbc	r27, r26
     bea:	62 0b       	sbc	r22, r18
     bec:	73 0b       	sbc	r23, r19
     bee:	84 0b       	sbc	r24, r20
     bf0:	ba f0       	brmi	.+46     	; 0xc20 <__addsf3x+0x9c>
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	a1 f0       	breq	.+40     	; 0xc1e <__addsf3x+0x9a>
     bf6:	ff 0f       	add	r31, r31
     bf8:	bb 1f       	adc	r27, r27
     bfa:	66 1f       	adc	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	88 1f       	adc	r24, r24
     c00:	c2 f7       	brpl	.-16     	; 0xbf2 <__addsf3x+0x6e>
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <__addsf3x+0x9c>
     c04:	ba 0f       	add	r27, r26
     c06:	62 1f       	adc	r22, r18
     c08:	73 1f       	adc	r23, r19
     c0a:	84 1f       	adc	r24, r20
     c0c:	48 f4       	brcc	.+18     	; 0xc20 <__addsf3x+0x9c>
     c0e:	87 95       	ror	r24
     c10:	77 95       	ror	r23
     c12:	67 95       	ror	r22
     c14:	b7 95       	ror	r27
     c16:	f7 95       	ror	r31
     c18:	9e 3f       	cpi	r25, 0xFE	; 254
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <__addsf3x+0x9a>
     c1c:	b0 cf       	rjmp	.-160    	; 0xb7e <__addsf3+0x28>
     c1e:	93 95       	inc	r25
     c20:	88 0f       	add	r24, r24
     c22:	08 f0       	brcs	.+2      	; 0xc26 <__addsf3x+0xa2>
     c24:	99 27       	eor	r25, r25
     c26:	ee 0f       	add	r30, r30
     c28:	97 95       	ror	r25
     c2a:	87 95       	ror	r24
     c2c:	08 95       	ret

00000c2e <__floatunsisf>:
     c2e:	e8 94       	clt
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <__floatsisf+0x12>

00000c32 <__floatsisf>:
     c32:	97 fb       	bst	r25, 7
     c34:	3e f4       	brtc	.+14     	; 0xc44 <__floatsisf+0x12>
     c36:	90 95       	com	r25
     c38:	80 95       	com	r24
     c3a:	70 95       	com	r23
     c3c:	61 95       	neg	r22
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	99 23       	and	r25, r25
     c46:	a9 f0       	breq	.+42     	; 0xc72 <__floatsisf+0x40>
     c48:	f9 2f       	mov	r31, r25
     c4a:	96 e9       	ldi	r25, 0x96	; 150
     c4c:	bb 27       	eor	r27, r27
     c4e:	93 95       	inc	r25
     c50:	f6 95       	lsr	r31
     c52:	87 95       	ror	r24
     c54:	77 95       	ror	r23
     c56:	67 95       	ror	r22
     c58:	b7 95       	ror	r27
     c5a:	f1 11       	cpse	r31, r1
     c5c:	f8 cf       	rjmp	.-16     	; 0xc4e <__floatsisf+0x1c>
     c5e:	fa f4       	brpl	.+62     	; 0xc9e <__floatsisf+0x6c>
     c60:	bb 0f       	add	r27, r27
     c62:	11 f4       	brne	.+4      	; 0xc68 <__floatsisf+0x36>
     c64:	60 ff       	sbrs	r22, 0
     c66:	1b c0       	rjmp	.+54     	; 0xc9e <__floatsisf+0x6c>
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	16 c0       	rjmp	.+44     	; 0xc9e <__floatsisf+0x6c>
     c72:	88 23       	and	r24, r24
     c74:	11 f0       	breq	.+4      	; 0xc7a <__floatsisf+0x48>
     c76:	96 e9       	ldi	r25, 0x96	; 150
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <__floatsisf+0x6a>
     c7a:	77 23       	and	r23, r23
     c7c:	21 f0       	breq	.+8      	; 0xc86 <__floatsisf+0x54>
     c7e:	9e e8       	ldi	r25, 0x8E	; 142
     c80:	87 2f       	mov	r24, r23
     c82:	76 2f       	mov	r23, r22
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <__floatsisf+0x5e>
     c86:	66 23       	and	r22, r22
     c88:	71 f0       	breq	.+28     	; 0xca6 <__floatsisf+0x74>
     c8a:	96 e8       	ldi	r25, 0x86	; 134
     c8c:	86 2f       	mov	r24, r22
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	2a f0       	brmi	.+10     	; 0xc9e <__floatsisf+0x6c>
     c94:	9a 95       	dec	r25
     c96:	66 0f       	add	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	88 1f       	adc	r24, r24
     c9c:	da f7       	brpl	.-10     	; 0xc94 <__floatsisf+0x62>
     c9e:	88 0f       	add	r24, r24
     ca0:	96 95       	lsr	r25
     ca2:	87 95       	ror	r24
     ca4:	97 f9       	bld	r25, 7
     ca6:	08 95       	ret

00000ca8 <__fp_inf>:
     ca8:	97 f9       	bld	r25, 7
     caa:	9f 67       	ori	r25, 0x7F	; 127
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	08 95       	ret

00000cb4 <__fp_nan>:
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
     cb6:	80 ec       	ldi	r24, 0xC0	; 192
     cb8:	08 95       	ret

00000cba <__fp_pscA>:
     cba:	00 24       	eor	r0, r0
     cbc:	0a 94       	dec	r0
     cbe:	16 16       	cp	r1, r22
     cc0:	17 06       	cpc	r1, r23
     cc2:	18 06       	cpc	r1, r24
     cc4:	09 06       	cpc	r0, r25
     cc6:	08 95       	ret

00000cc8 <__fp_pscB>:
     cc8:	00 24       	eor	r0, r0
     cca:	0a 94       	dec	r0
     ccc:	12 16       	cp	r1, r18
     cce:	13 06       	cpc	r1, r19
     cd0:	14 06       	cpc	r1, r20
     cd2:	05 06       	cpc	r0, r21
     cd4:	08 95       	ret

00000cd6 <__fp_round>:
     cd6:	09 2e       	mov	r0, r25
     cd8:	03 94       	inc	r0
     cda:	00 0c       	add	r0, r0
     cdc:	11 f4       	brne	.+4      	; 0xce2 <__fp_round+0xc>
     cde:	88 23       	and	r24, r24
     ce0:	52 f0       	brmi	.+20     	; 0xcf6 <__fp_round+0x20>
     ce2:	bb 0f       	add	r27, r27
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fp_round+0x20>
     ce6:	bf 2b       	or	r27, r31
     ce8:	11 f4       	brne	.+4      	; 0xcee <__fp_round+0x18>
     cea:	60 ff       	sbrs	r22, 0
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <__fp_round+0x20>
     cee:	6f 5f       	subi	r22, 0xFF	; 255
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	8f 4f       	sbci	r24, 0xFF	; 255
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	08 95       	ret

00000cf8 <__fp_split3>:
     cf8:	57 fd       	sbrc	r21, 7
     cfa:	90 58       	subi	r25, 0x80	; 128
     cfc:	44 0f       	add	r20, r20
     cfe:	55 1f       	adc	r21, r21
     d00:	59 f0       	breq	.+22     	; 0xd18 <__fp_splitA+0x10>
     d02:	5f 3f       	cpi	r21, 0xFF	; 255
     d04:	71 f0       	breq	.+28     	; 0xd22 <__fp_splitA+0x1a>
     d06:	47 95       	ror	r20

00000d08 <__fp_splitA>:
     d08:	88 0f       	add	r24, r24
     d0a:	97 fb       	bst	r25, 7
     d0c:	99 1f       	adc	r25, r25
     d0e:	61 f0       	breq	.+24     	; 0xd28 <__fp_splitA+0x20>
     d10:	9f 3f       	cpi	r25, 0xFF	; 255
     d12:	79 f0       	breq	.+30     	; 0xd32 <__fp_splitA+0x2a>
     d14:	87 95       	ror	r24
     d16:	08 95       	ret
     d18:	12 16       	cp	r1, r18
     d1a:	13 06       	cpc	r1, r19
     d1c:	14 06       	cpc	r1, r20
     d1e:	55 1f       	adc	r21, r21
     d20:	f2 cf       	rjmp	.-28     	; 0xd06 <__fp_split3+0xe>
     d22:	46 95       	lsr	r20
     d24:	f1 df       	rcall	.-30     	; 0xd08 <__fp_splitA>
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <__fp_splitA+0x30>
     d28:	16 16       	cp	r1, r22
     d2a:	17 06       	cpc	r1, r23
     d2c:	18 06       	cpc	r1, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	f1 cf       	rjmp	.-30     	; 0xd14 <__fp_splitA+0xc>
     d32:	86 95       	lsr	r24
     d34:	71 05       	cpc	r23, r1
     d36:	61 05       	cpc	r22, r1
     d38:	08 94       	sec
     d3a:	08 95       	ret

00000d3c <__fp_zero>:
     d3c:	e8 94       	clt

00000d3e <__fp_szero>:
     d3e:	bb 27       	eor	r27, r27
     d40:	66 27       	eor	r22, r22
     d42:	77 27       	eor	r23, r23
     d44:	cb 01       	movw	r24, r22
     d46:	97 f9       	bld	r25, 7
     d48:	08 95       	ret

00000d4a <__mulsf3>:
     d4a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__mulsf3x>
     d4e:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_round>
     d52:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_pscA>
     d56:	38 f0       	brcs	.+14     	; 0xd66 <__mulsf3+0x1c>
     d58:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_pscB>
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <__mulsf3+0x1c>
     d5e:	95 23       	and	r25, r21
     d60:	11 f0       	breq	.+4      	; 0xd66 <__mulsf3+0x1c>
     d62:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_inf>
     d66:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_nan>
     d6a:	11 24       	eor	r1, r1
     d6c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>

00000d70 <__mulsf3x>:
     d70:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_split3>
     d74:	70 f3       	brcs	.-36     	; 0xd52 <__mulsf3+0x8>

00000d76 <__mulsf3_pse>:
     d76:	95 9f       	mul	r25, r21
     d78:	c1 f3       	breq	.-16     	; 0xd6a <__mulsf3+0x20>
     d7a:	95 0f       	add	r25, r21
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	55 1f       	adc	r21, r21
     d80:	62 9f       	mul	r22, r18
     d82:	f0 01       	movw	r30, r0
     d84:	72 9f       	mul	r23, r18
     d86:	bb 27       	eor	r27, r27
     d88:	f0 0d       	add	r31, r0
     d8a:	b1 1d       	adc	r27, r1
     d8c:	63 9f       	mul	r22, r19
     d8e:	aa 27       	eor	r26, r26
     d90:	f0 0d       	add	r31, r0
     d92:	b1 1d       	adc	r27, r1
     d94:	aa 1f       	adc	r26, r26
     d96:	64 9f       	mul	r22, r20
     d98:	66 27       	eor	r22, r22
     d9a:	b0 0d       	add	r27, r0
     d9c:	a1 1d       	adc	r26, r1
     d9e:	66 1f       	adc	r22, r22
     da0:	82 9f       	mul	r24, r18
     da2:	22 27       	eor	r18, r18
     da4:	b0 0d       	add	r27, r0
     da6:	a1 1d       	adc	r26, r1
     da8:	62 1f       	adc	r22, r18
     daa:	73 9f       	mul	r23, r19
     dac:	b0 0d       	add	r27, r0
     dae:	a1 1d       	adc	r26, r1
     db0:	62 1f       	adc	r22, r18
     db2:	83 9f       	mul	r24, r19
     db4:	a0 0d       	add	r26, r0
     db6:	61 1d       	adc	r22, r1
     db8:	22 1f       	adc	r18, r18
     dba:	74 9f       	mul	r23, r20
     dbc:	33 27       	eor	r19, r19
     dbe:	a0 0d       	add	r26, r0
     dc0:	61 1d       	adc	r22, r1
     dc2:	23 1f       	adc	r18, r19
     dc4:	84 9f       	mul	r24, r20
     dc6:	60 0d       	add	r22, r0
     dc8:	21 1d       	adc	r18, r1
     dca:	82 2f       	mov	r24, r18
     dcc:	76 2f       	mov	r23, r22
     dce:	6a 2f       	mov	r22, r26
     dd0:	11 24       	eor	r1, r1
     dd2:	9f 57       	subi	r25, 0x7F	; 127
     dd4:	50 40       	sbci	r21, 0x00	; 0
     dd6:	9a f0       	brmi	.+38     	; 0xdfe <__mulsf3_pse+0x88>
     dd8:	f1 f0       	breq	.+60     	; 0xe16 <__mulsf3_pse+0xa0>
     dda:	88 23       	and	r24, r24
     ddc:	4a f0       	brmi	.+18     	; 0xdf0 <__mulsf3_pse+0x7a>
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	bb 1f       	adc	r27, r27
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	91 50       	subi	r25, 0x01	; 1
     dec:	50 40       	sbci	r21, 0x00	; 0
     dee:	a9 f7       	brne	.-22     	; 0xdda <__mulsf3_pse+0x64>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	80 f0       	brcs	.+32     	; 0xe16 <__mulsf3_pse+0xa0>
     df6:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_inf>
     dfa:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
     dfe:	5f 3f       	cpi	r21, 0xFF	; 255
     e00:	e4 f3       	brlt	.-8      	; 0xdfa <__mulsf3_pse+0x84>
     e02:	98 3e       	cpi	r25, 0xE8	; 232
     e04:	d4 f3       	brlt	.-12     	; 0xdfa <__mulsf3_pse+0x84>
     e06:	86 95       	lsr	r24
     e08:	77 95       	ror	r23
     e0a:	67 95       	ror	r22
     e0c:	b7 95       	ror	r27
     e0e:	f7 95       	ror	r31
     e10:	e7 95       	ror	r30
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	c1 f7       	brne	.-16     	; 0xe06 <__mulsf3_pse+0x90>
     e16:	fe 2b       	or	r31, r30
     e18:	88 0f       	add	r24, r24
     e1a:	91 1d       	adc	r25, r1
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	97 f9       	bld	r25, 7
     e22:	08 95       	ret

00000e24 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     e24:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     e26:	91 8d       	ldd	r25, Z+25	; 0x19
     e28:	22 8d       	ldd	r18, Z+26	; 0x1a
     e2a:	89 2f       	mov	r24, r25
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	80 5c       	subi	r24, 0xC0	; 192
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	82 1b       	sub	r24, r18
     e34:	91 09       	sbc	r25, r1
}
     e36:	8f 73       	andi	r24, 0x3F	; 63
     e38:	99 27       	eor	r25, r25
     e3a:	08 95       	ret

00000e3c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     e3c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     e3e:	91 8d       	ldd	r25, Z+25	; 0x19
     e40:	82 8d       	ldd	r24, Z+26	; 0x1a
     e42:	98 17       	cp	r25, r24
     e44:	31 f0       	breq	.+12     	; 0xe52 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e46:	82 8d       	ldd	r24, Z+26	; 0x1a
     e48:	e8 0f       	add	r30, r24
     e4a:	f1 1d       	adc	r31, r1
     e4c:	85 8d       	ldd	r24, Z+29	; 0x1d
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e56:	08 95       	ret

00000e58 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     e58:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e5a:	91 8d       	ldd	r25, Z+25	; 0x19
     e5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e5e:	98 17       	cp	r25, r24
     e60:	61 f0       	breq	.+24     	; 0xe7a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e62:	82 8d       	ldd	r24, Z+26	; 0x1a
     e64:	df 01       	movw	r26, r30
     e66:	a8 0f       	add	r26, r24
     e68:	b1 1d       	adc	r27, r1
     e6a:	5d 96       	adiw	r26, 0x1d	; 29
     e6c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e70:	9f 5f       	subi	r25, 0xFF	; 255
     e72:	9f 73       	andi	r25, 0x3F	; 63
     e74:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e7e:	08 95       	ret

00000e80 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     e80:	fc 01       	movw	r30, r24
     e82:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     e84:	44 8d       	ldd	r20, Z+28	; 0x1c
     e86:	25 2f       	mov	r18, r21
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	84 2f       	mov	r24, r20
     e8c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e8e:	82 1b       	sub	r24, r18
     e90:	93 0b       	sbc	r25, r19
     e92:	54 17       	cp	r21, r20
     e94:	10 f0       	brcs	.+4      	; 0xe9a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     e96:	cf 96       	adiw	r24, 0x3f	; 63
     e98:	08 95       	ret
  return tail - head - 1;
     e9a:	01 97       	sbiw	r24, 0x01	; 1
}
     e9c:	08 95       	ret

00000e9e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e9e:	84 ea       	ldi	r24, 0xA4	; 164
     ea0:	98 e0       	ldi	r25, 0x08	; 8
     ea2:	89 2b       	or	r24, r25
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <_Z14serialEventRunv+0x1a>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	89 2b       	or	r24, r25
     eac:	29 f0       	breq	.+10     	; 0xeb8 <_Z14serialEventRunv+0x1a>
     eae:	0e 94 a4 08 	call	0x1148	; 0x1148 <_Z17Serial0_availablev>
     eb2:	81 11       	cpse	r24, r1
     eb4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     eb8:	08 95       	ret

00000eba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     eba:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     ebc:	84 8d       	ldd	r24, Z+28	; 0x1c
     ebe:	df 01       	movw	r26, r30
     ec0:	a8 0f       	add	r26, r24
     ec2:	b1 1d       	adc	r27, r1
     ec4:	a3 5a       	subi	r26, 0xA3	; 163
     ec6:	bf 4f       	sbci	r27, 0xFF	; 255
     ec8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     eca:	84 8d       	ldd	r24, Z+28	; 0x1c
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	8f 73       	andi	r24, 0x3F	; 63
     ed2:	99 27       	eor	r25, r25
     ed4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     ed6:	a6 89       	ldd	r26, Z+22	; 0x16
     ed8:	b7 89       	ldd	r27, Z+23	; 0x17
     eda:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     edc:	a0 89       	ldd	r26, Z+16	; 0x10
     ede:	b1 89       	ldd	r27, Z+17	; 0x11
     ee0:	8c 91       	ld	r24, X
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     ee6:	93 8d       	ldd	r25, Z+27	; 0x1b
     ee8:	84 8d       	ldd	r24, Z+28	; 0x1c
     eea:	98 13       	cpse	r25, r24
     eec:	06 c0       	rjmp	.+12     	; 0xefa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     eee:	02 88       	ldd	r0, Z+18	; 0x12
     ef0:	f3 89       	ldd	r31, Z+19	; 0x13
     ef2:	e0 2d       	mov	r30, r0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 7d       	andi	r24, 0xDF	; 223
     ef8:	80 83       	st	Z, r24
     efa:	08 95       	ret

00000efc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
  _written = true;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f10:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f12:	98 13       	cpse	r25, r24
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <_ZN14HardwareSerial5writeEh+0x24>
     f16:	e8 89       	ldd	r30, Y+16	; 0x10
     f18:	f9 89       	ldd	r31, Y+17	; 0x11
     f1a:	80 81       	ld	r24, Z
     f1c:	85 fd       	sbrc	r24, 5
     f1e:	24 c0       	rjmp	.+72     	; 0xf68 <_ZN14HardwareSerial5writeEh+0x6c>
     f20:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f22:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	0f 5f       	subi	r16, 0xFF	; 255
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	0f 73       	andi	r16, 0x3F	; 63
     f2c:	11 27       	eor	r17, r17
     f2e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f32:	e8 12       	cpse	r14, r24
     f34:	0c c0       	rjmp	.+24     	; 0xf4e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	07 fc       	sbrc	r0, 7
     f3a:	fa cf       	rjmp	.-12     	; 0xf30 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f3c:	e8 89       	ldd	r30, Y+16	; 0x10
     f3e:	f9 89       	ldd	r31, Y+17	; 0x11
     f40:	80 81       	ld	r24, Z
     f42:	85 ff       	sbrs	r24, 5
     f44:	f5 cf       	rjmp	.-22     	; 0xf30 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     f46:	ce 01       	movw	r24, r28
     f48:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f4c:	f1 cf       	rjmp	.-30     	; 0xf30 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f50:	fe 01       	movw	r30, r28
     f52:	e8 0f       	add	r30, r24
     f54:	f1 1d       	adc	r31, r1
     f56:	e3 5a       	subi	r30, 0xA3	; 163
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     f5c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     f5e:	ea 89       	ldd	r30, Y+18	; 0x12
     f60:	fb 89       	ldd	r31, Y+19	; 0x13
     f62:	80 81       	ld	r24, Z
     f64:	80 62       	ori	r24, 0x20	; 32
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     f68:	ee 89       	ldd	r30, Y+22	; 0x16
     f6a:	ff 89       	ldd	r31, Y+23	; 0x17
     f6c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     f6e:	e8 89       	ldd	r30, Y+16	; 0x10
     f70:	f9 89       	ldd	r31, Y+17	; 0x11
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	08 95       	ret

00000f8a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     f90:	88 8d       	ldd	r24, Y+24	; 0x18
     f92:	88 23       	and	r24, r24
     f94:	c9 f0       	breq	.+50     	; 0xfc8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f96:	ea 89       	ldd	r30, Y+18	; 0x12
     f98:	fb 89       	ldd	r31, Y+19	; 0x13
     f9a:	80 81       	ld	r24, Z
     f9c:	85 fd       	sbrc	r24, 5
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <_ZN14HardwareSerial5flushEv+0x20>
     fa0:	a8 89       	ldd	r26, Y+16	; 0x10
     fa2:	b9 89       	ldd	r27, Y+17	; 0x11
     fa4:	8c 91       	ld	r24, X
     fa6:	86 fd       	sbrc	r24, 6
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	07 fc       	sbrc	r0, 7
     fae:	f5 cf       	rjmp	.-22     	; 0xf9a <_ZN14HardwareSerial5flushEv+0x10>
     fb0:	80 81       	ld	r24, Z
     fb2:	85 ff       	sbrs	r24, 5
     fb4:	f2 cf       	rjmp	.-28     	; 0xf9a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     fb6:	a8 89       	ldd	r26, Y+16	; 0x10
     fb8:	b9 89       	ldd	r27, Y+17	; 0x11
     fba:	8c 91       	ld	r24, X
     fbc:	85 ff       	sbrs	r24, 5
     fbe:	ed cf       	rjmp	.-38     	; 0xf9a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fc6:	e7 cf       	rjmp	.-50     	; 0xf96 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	6a 01       	movw	r12, r20
     fe0:	7b 01       	movw	r14, r22
     fe2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     fe4:	e8 89       	ldd	r30, Y+16	; 0x10
     fe6:	f9 89       	ldd	r31, Y+17	; 0x11
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fec:	41 15       	cp	r20, r1
     fee:	51 4e       	sbci	r21, 0xE1	; 225
     ff0:	61 05       	cpc	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	b1 f0       	breq	.+44     	; 0x1022 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	79 e0       	ldi	r23, 0x09	; 9
     ffa:	8d e3       	ldi	r24, 0x3D	; 61
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a7 01       	movw	r20, r14
    1000:	96 01       	movw	r18, r12
    1002:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodsi4>
    1006:	da 01       	movw	r26, r20
    1008:	c9 01       	movw	r24, r18
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	a1 09       	sbc	r26, r1
    100e:	b1 09       	sbc	r27, r1
    1010:	b6 95       	lsr	r27
    1012:	a7 95       	ror	r26
    1014:	97 95       	ror	r25
    1016:	87 95       	ror	r24
    1018:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    101a:	21 15       	cp	r18, r1
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	38 07       	cpc	r19, r24
    1020:	a8 f0       	brcs	.+42     	; 0x104c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1022:	e8 89       	ldd	r30, Y+16	; 0x10
    1024:	f9 89       	ldd	r31, Y+17	; 0x11
    1026:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1028:	60 e8       	ldi	r22, 0x80	; 128
    102a:	74 e8       	ldi	r23, 0x84	; 132
    102c:	8e e1       	ldi	r24, 0x1E	; 30
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a7 01       	movw	r20, r14
    1032:	96 01       	movw	r18, r12
    1034:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodsi4>
    1038:	da 01       	movw	r26, r20
    103a:	c9 01       	movw	r24, r18
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	a1 09       	sbc	r26, r1
    1040:	b1 09       	sbc	r27, r1
    1042:	b6 95       	lsr	r27
    1044:	a7 95       	ror	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    104c:	ec 85       	ldd	r30, Y+12	; 0x0c
    104e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1050:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1052:	ee 85       	ldd	r30, Y+14	; 0x0e
    1054:	ff 85       	ldd	r31, Y+15	; 0x0f
    1056:	20 83       	st	Z, r18

  _written = false;
    1058:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    105a:	ec 89       	ldd	r30, Y+20	; 0x14
    105c:	fd 89       	ldd	r31, Y+21	; 0x15
    105e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1060:	ea 89       	ldd	r30, Y+18	; 0x12
    1062:	fb 89       	ldd	r31, Y+19	; 0x13
    1064:	80 81       	ld	r24, Z
    1066:	80 61       	ori	r24, 0x10	; 16
    1068:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    106a:	ea 89       	ldd	r30, Y+18	; 0x12
    106c:	fb 89       	ldd	r31, Y+19	; 0x13
    106e:	80 81       	ld	r24, Z
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1074:	ea 89       	ldd	r30, Y+18	; 0x12
    1076:	fb 89       	ldd	r31, Y+19	; 0x13
    1078:	80 81       	ld	r24, Z
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    107e:	ea 89       	ldd	r30, Y+18	; 0x12
    1080:	fb 89       	ldd	r31, Y+19	; 0x13
    1082:	80 81       	ld	r24, Z
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	80 83       	st	Z, r24
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	08 95       	ret

00001098 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10ac:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <Serial+0x10>
    10b0:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <Serial+0x11>
    10b4:	80 81       	ld	r24, Z
    10b6:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Serial+0x16>
    10ba:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Serial+0x17>
    10be:	82 fd       	sbrc	r24, 2
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    10c2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    10c4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Serial+0x19>
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    10cc:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <Serial+0x1a>
    10d0:	82 17       	cp	r24, r18
    10d2:	51 f0       	breq	.+20     	; 0x10e8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    10d4:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <Serial+0x19>
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	ed 54       	subi	r30, 0x4D	; 77
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    10e0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Serial+0x19>
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    10e6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    111e:	83 eb       	ldi	r24, 0xB3	; 179
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1148:	83 eb       	ldi	r24, 0xB3	; 179
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN14HardwareSerial9availableEv>
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	89 2b       	or	r24, r25
    1154:	09 f4       	brne	.+2      	; 0x1158 <_Z17Serial0_availablev+0x10>
    1156:	20 e0       	ldi	r18, 0x00	; 0
}
    1158:	82 2f       	mov	r24, r18
    115a:	08 95       	ret

0000115c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    115c:	e3 eb       	ldi	r30, 0xB3	; 179
    115e:	f1 e0       	ldi	r31, 0x01	; 1
    1160:	13 82       	std	Z+3, r1	; 0x03
    1162:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1164:	88 ee       	ldi	r24, 0xE8	; 232
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	84 83       	std	Z+4, r24	; 0x04
    116e:	95 83       	std	Z+5, r25	; 0x05
    1170:	a6 83       	std	Z+6, r26	; 0x06
    1172:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1174:	84 e7       	ldi	r24, 0x74	; 116
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	85 ec       	ldi	r24, 0xC5	; 197
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	95 87       	std	Z+13, r25	; 0x0d
    1182:	84 87       	std	Z+12, r24	; 0x0c
    1184:	84 ec       	ldi	r24, 0xC4	; 196
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	97 87       	std	Z+15, r25	; 0x0f
    118a:	86 87       	std	Z+14, r24	; 0x0e
    118c:	80 ec       	ldi	r24, 0xC0	; 192
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	91 8b       	std	Z+17, r25	; 0x11
    1192:	80 8b       	std	Z+16, r24	; 0x10
    1194:	81 ec       	ldi	r24, 0xC1	; 193
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	93 8b       	std	Z+19, r25	; 0x13
    119a:	82 8b       	std	Z+18, r24	; 0x12
    119c:	82 ec       	ldi	r24, 0xC2	; 194
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	95 8b       	std	Z+21, r25	; 0x15
    11a2:	84 8b       	std	Z+20, r24	; 0x14
    11a4:	86 ec       	ldi	r24, 0xC6	; 198
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	97 8b       	std	Z+23, r25	; 0x17
    11aa:	86 8b       	std	Z+22, r24	; 0x16
    11ac:	11 8e       	std	Z+25, r1	; 0x19
    11ae:	12 8e       	std	Z+26, r1	; 0x1a
    11b0:	13 8e       	std	Z+27, r1	; 0x1b
    11b2:	14 8e       	std	Z+28, r1	; 0x1c
    11b4:	08 95       	ret

000011b6 <initVariant>:
    11b6:	08 95       	ret

000011b8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    11b8:	0e 94 44 0b 	call	0x1688	; 0x1688 <init>

	initVariant();
    11bc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    11c0:	0e 94 03 01 	call	0x206	; 0x206 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    11c4:	cf e4       	ldi	r28, 0x4F	; 79
    11c6:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    11c8:	0e 94 16 01 	call	0x22c	; 0x22c <loop>
		if (serialEventRun) serialEventRun();
    11cc:	20 97       	sbiw	r28, 0x00	; 0
    11ce:	e1 f3       	breq	.-8      	; 0x11c8 <main+0x10>
    11d0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z14serialEventRunv>
    11d4:	f9 cf       	rjmp	.-14     	; 0x11c8 <main+0x10>

000011d6 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	6c 01       	movw	r12, r24
    11e8:	7a 01       	movw	r14, r20
    11ea:	8b 01       	movw	r16, r22
    11ec:	c0 e0       	ldi	r28, 0x00	; 0
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
    11f0:	ce 15       	cp	r28, r14
    11f2:	df 05       	cpc	r29, r15
    11f4:	81 f0       	breq	.+32     	; 0x1216 <_ZN5Print5writeEPKhj+0x40>
    11f6:	d8 01       	movw	r26, r16
    11f8:	6d 91       	ld	r22, X+
    11fa:	8d 01       	movw	r16, r26
    11fc:	d6 01       	movw	r26, r12
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	01 90       	ld	r0, Z+
    1204:	f0 81       	ld	r31, Z
    1206:	e0 2d       	mov	r30, r0
    1208:	c6 01       	movw	r24, r12
    120a:	09 95       	icall
    120c:	89 2b       	or	r24, r25
    120e:	11 f0       	breq	.+4      	; 0x1214 <_ZN5Print5writeEPKhj+0x3e>
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	ee cf       	rjmp	.-36     	; 0x11f0 <_ZN5Print5writeEPKhj+0x1a>
    1214:	7e 01       	movw	r14, r28
    1216:	c7 01       	movw	r24, r14
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <_ZN5Print5writeEPKc>:
    122a:	61 15       	cp	r22, r1
    122c:	71 05       	cpc	r23, r1
    122e:	79 f0       	breq	.+30     	; 0x124e <_ZN5Print5writeEPKc+0x24>
    1230:	fb 01       	movw	r30, r22
    1232:	01 90       	ld	r0, Z+
    1234:	00 20       	and	r0, r0
    1236:	e9 f7       	brne	.-6      	; 0x1232 <_ZN5Print5writeEPKc+0x8>
    1238:	31 97       	sbiw	r30, 0x01	; 1
    123a:	af 01       	movw	r20, r30
    123c:	46 1b       	sub	r20, r22
    123e:	57 0b       	sbc	r21, r23
    1240:	dc 01       	movw	r26, r24
    1242:	ed 91       	ld	r30, X+
    1244:	fc 91       	ld	r31, X
    1246:	02 80       	ldd	r0, Z+2	; 0x02
    1248:	f3 81       	ldd	r31, Z+3	; 0x03
    124a:	e0 2d       	mov	r30, r0
    124c:	09 94       	ijmp
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	08 95       	ret

00001254 <_ZN5Print5printEPKc>:
    1254:	0c 94 15 09 	jmp	0x122a	; 0x122a <_ZN5Print5writeEPKc>

00001258 <_ZN5Print5printEc>:
    1258:	dc 01       	movw	r26, r24
    125a:	ed 91       	ld	r30, X+
    125c:	fc 91       	ld	r31, X
    125e:	01 90       	ld	r0, Z+
    1260:	f0 81       	ld	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	09 94       	ijmp

00001266 <_ZN5Print7printlnEv>:
    1266:	62 e8       	ldi	r22, 0x82	; 130
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	0c 94 15 09 	jmp	0x122a	; 0x122a <_ZN5Print5writeEPKc>

0000126e <_ZN5Print7printlnEPKc>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN5Print5writeEPKc>
    127c:	8c 01       	movw	r16, r24
    127e:	ce 01       	movw	r24, r28
    1280:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN5Print7printlnEv>
    1284:	80 0f       	add	r24, r16
    1286:	91 1f       	adc	r25, r17
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <_ZN5Print11printNumberEmh>:
    1292:	8f 92       	push	r8
    1294:	9f 92       	push	r9
    1296:	af 92       	push	r10
    1298:	bf 92       	push	r11
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	a1 97       	sbiw	r28, 0x21	; 33
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	7c 01       	movw	r14, r24
    12b8:	fa 01       	movw	r30, r20
    12ba:	cb 01       	movw	r24, r22
    12bc:	19 a2       	std	Y+33, r1	; 0x21
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <_ZN5Print11printNumberEmh+0x32>
    12c2:	2a e0       	ldi	r18, 0x0A	; 10
    12c4:	8e 01       	movw	r16, r28
    12c6:	0f 5d       	subi	r16, 0xDF	; 223
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	82 2e       	mov	r8, r18
    12cc:	91 2c       	mov	r9, r1
    12ce:	a1 2c       	mov	r10, r1
    12d0:	b1 2c       	mov	r11, r1
    12d2:	bf 01       	movw	r22, r30
    12d4:	a5 01       	movw	r20, r10
    12d6:	94 01       	movw	r18, r8
    12d8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodsi4>
    12dc:	f9 01       	movw	r30, r18
    12de:	ca 01       	movw	r24, r20
    12e0:	01 50       	subi	r16, 0x01	; 1
    12e2:	11 09       	sbc	r17, r1
    12e4:	6a 30       	cpi	r22, 0x0A	; 10
    12e6:	10 f4       	brcc	.+4      	; 0x12ec <_ZN5Print11printNumberEmh+0x5a>
    12e8:	60 5d       	subi	r22, 0xD0	; 208
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <_ZN5Print11printNumberEmh+0x5c>
    12ec:	69 5c       	subi	r22, 0xC9	; 201
    12ee:	d8 01       	movw	r26, r16
    12f0:	6c 93       	st	X, r22
    12f2:	23 2b       	or	r18, r19
    12f4:	24 2b       	or	r18, r20
    12f6:	25 2b       	or	r18, r21
    12f8:	61 f7       	brne	.-40     	; 0x12d2 <_ZN5Print11printNumberEmh+0x40>
    12fa:	b8 01       	movw	r22, r16
    12fc:	c7 01       	movw	r24, r14
    12fe:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN5Print5writeEPKc>
    1302:	a1 96       	adiw	r28, 0x21	; 33
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	9f 90       	pop	r9
    1320:	8f 90       	pop	r8
    1322:	08 95       	ret

00001324 <_ZN5Print5printEmi>:
    1324:	21 15       	cp	r18, r1
    1326:	31 05       	cpc	r19, r1
    1328:	41 f4       	brne	.+16     	; 0x133a <_ZN5Print5printEmi+0x16>
    132a:	dc 01       	movw	r26, r24
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	01 90       	ld	r0, Z+
    1332:	f0 81       	ld	r31, Z
    1334:	e0 2d       	mov	r30, r0
    1336:	64 2f       	mov	r22, r20
    1338:	09 94       	ijmp
    133a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_ZN5Print11printNumberEmh>

0000133e <_ZN5Print5printEji>:
    133e:	9a 01       	movw	r18, r20
    1340:	ab 01       	movw	r20, r22
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0c 94 92 09 	jmp	0x1324	; 0x1324 <_ZN5Print5printEmi>

0000134a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    134a:	7f 92       	push	r7
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	8c 01       	movw	r16, r24
    1366:	6a 01       	movw	r12, r20
    1368:	7b 01       	movw	r14, r22
    136a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    136c:	9a 01       	movw	r18, r20
    136e:	ab 01       	movw	r20, r22
    1370:	c7 01       	movw	r24, r14
    1372:	b6 01       	movw	r22, r12
    1374:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__unordsf2>
    1378:	88 23       	and	r24, r24
    137a:	19 f0       	breq	.+6      	; 0x1382 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    137c:	65 e8       	ldi	r22, 0x85	; 133
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	27 c0       	rjmp	.+78     	; 0x13d0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1382:	46 01       	movw	r8, r12
    1384:	57 01       	movw	r10, r14
    1386:	e8 94       	clt
    1388:	b7 f8       	bld	r11, 7
    138a:	2f ef       	ldi	r18, 0xFF	; 255
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	5f e7       	ldi	r21, 0x7F	; 127
    1392:	c5 01       	movw	r24, r10
    1394:	b4 01       	movw	r22, r8
    1396:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__unordsf2>
    139a:	81 11       	cpse	r24, r1
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <_ZN5Print10printFloatEdh+0x6e>
    139e:	2f ef       	ldi	r18, 0xFF	; 255
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	5f e7       	ldi	r21, 0x7F	; 127
    13a6:	c5 01       	movw	r24, r10
    13a8:	b4 01       	movw	r22, r8
    13aa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__cmpsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	1c f4       	brge	.+6      	; 0x13b8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    13b2:	69 e8       	ldi	r22, 0x89	; 137
    13b4:	71 e0       	ldi	r23, 0x01	; 1
    13b6:	0c c0       	rjmp	.+24     	; 0x13d0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	5f e4       	ldi	r21, 0x4F	; 79
    13c0:	c7 01       	movw	r24, r14
    13c2:	b6 01       	movw	r22, r12
    13c4:	0e 94 86 0c 	call	0x190c	; 0x190c <__gesf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	94 f4       	brge	.+36     	; 0x13f0 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    13cc:	6d e8       	ldi	r22, 0x8D	; 141
    13ce:	71 e0       	ldi	r23, 0x01	; 1
    13d0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    13ec:	0c 94 15 09 	jmp	0x122a	; 0x122a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    13f0:	2f ef       	ldi	r18, 0xFF	; 255
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	5f ec       	ldi	r21, 0xCF	; 207
    13f8:	c7 01       	movw	r24, r14
    13fa:	b6 01       	movw	r22, r12
    13fc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__cmpsf2>
    1400:	87 fd       	sbrc	r24, 7
    1402:	e4 cf       	rjmp	.-56     	; 0x13cc <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__cmpsf2>
    1412:	87 ff       	sbrs	r24, 7
    1414:	0a c0       	rjmp	.+20     	; 0x142a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1416:	6d e2       	ldi	r22, 0x2D	; 45
    1418:	c8 01       	movw	r24, r16
    141a:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZN5Print5printEc>
    141e:	ec 01       	movw	r28, r24
     number = -number;
    1420:	f7 fa       	bst	r15, 7
    1422:	f0 94       	com	r15
    1424:	f7 f8       	bld	r15, 7
    1426:	f0 94       	com	r15
    1428:	02 c0       	rjmp	.+4      	; 0x142e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    142a:	c0 e0       	ldi	r28, 0x00	; 0
    142c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    142e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1438:	7b 14       	cp	r7, r11
    143a:	41 f0       	breq	.+16     	; 0x144c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e2       	ldi	r20, 0x20	; 32
    1442:	51 e4       	ldi	r21, 0x41	; 65
    1444:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1448:	b3 94       	inc	r11
    144a:	f6 cf       	rjmp	.-20     	; 0x1438 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    144c:	a7 01       	movw	r20, r14
    144e:	96 01       	movw	r18, r12
    1450:	0e 94 ab 05 	call	0xb56	; 0xb56 <__addsf3>
    1454:	6b 01       	movw	r12, r22
    1456:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1458:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fixunssfsi>
    145c:	4b 01       	movw	r8, r22
    145e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1460:	2a e0       	ldi	r18, 0x0A	; 10
    1462:	ab 01       	movw	r20, r22
    1464:	bc 01       	movw	r22, r24
    1466:	c8 01       	movw	r24, r16
    1468:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    146c:	c8 0f       	add	r28, r24
    146e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1470:	77 20       	and	r7, r7
    1472:	b9 f1       	breq	.+110    	; 0x14e2 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1474:	c5 01       	movw	r24, r10
    1476:	b4 01       	movw	r22, r8
    1478:	0e 94 17 06 	call	0xc2e	; 0xc2e <__floatunsisf>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 aa 05 	call	0xb54	; 0xb54 <__subsf3>
    1488:	6b 01       	movw	r12, r22
    148a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    148c:	6e e2       	ldi	r22, 0x2E	; 46
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZN5Print5printEc>
    1494:	c8 0f       	add	r28, r24
    1496:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	c7 01       	movw	r24, r14
    14a2:	b6 01       	movw	r22, r12
    14a4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__mulsf3>
    14a8:	4b 01       	movw	r8, r22
    14aa:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    14ac:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fixunssfsi>
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    14b4:	4a e0       	ldi	r20, 0x0A	; 10
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN5Print5printEji>
    14be:	c8 0f       	add	r28, r24
    14c0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    14c2:	b6 01       	movw	r22, r12
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__floatunsisf>
    14cc:	9b 01       	movw	r18, r22
    14ce:	ac 01       	movw	r20, r24
    14d0:	c5 01       	movw	r24, r10
    14d2:	b4 01       	movw	r22, r8
    14d4:	0e 94 aa 05 	call	0xb54	; 0xb54 <__subsf3>
    14d8:	6b 01       	movw	r12, r22
    14da:	7c 01       	movw	r14, r24
    14dc:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    14de:	71 10       	cpse	r7, r1
    14e0:	db cf       	rjmp	.-74     	; 0x1498 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    14e2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	08 95       	ret

00001500 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1500:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_ZN5Print10printFloatEdh>

00001504 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	2f 93       	push	r18
    1510:	3f 93       	push	r19
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    151a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <timer0_millis>
    151e:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <timer0_millis+0x1>
    1522:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <timer0_millis+0x2>
    1526:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    152a:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    152e:	23 e0       	ldi	r18, 0x03	; 3
    1530:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1532:	2d 37       	cpi	r18, 0x7D	; 125
    1534:	20 f4       	brcc	.+8      	; 0x153e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	a1 1d       	adc	r26, r1
    153a:	b1 1d       	adc	r27, r1
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    153e:	26 e8       	ldi	r18, 0x86	; 134
    1540:	23 0f       	add	r18, r19
		m += 1;
    1542:	02 96       	adiw	r24, 0x02	; 2
    1544:	a1 1d       	adc	r26, r1
    1546:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1548:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <timer0_fract>
	timer0_millis = m;
    154c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <timer0_millis>
    1550:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <timer0_millis+0x1>
    1554:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <timer0_millis+0x2>
    1558:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <timer0_millis+0x3>
	timer0_overflow_count++;
    155c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <timer0_overflow_count>
    1560:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <timer0_overflow_count+0x1>
    1564:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <timer0_overflow_count+0x2>
    1568:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <timer0_overflow_count+0x3>
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	a1 1d       	adc	r26, r1
    1570:	b1 1d       	adc	r27, r1
    1572:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <timer0_overflow_count>
    1576:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <timer0_overflow_count+0x1>
    157a:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <timer0_overflow_count+0x2>
    157e:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <timer0_overflow_count+0x3>
}
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1598:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    159a:	f8 94       	cli
	m = timer0_millis;
    159c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <timer0_millis>
    15a0:	70 91 52 02 	lds	r23, 0x0252	; 0x800252 <timer0_millis+0x1>
    15a4:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timer0_millis+0x2>
    15a8:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <timer0_millis+0x3>
	SREG = oldSREG;
    15ac:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    15ae:	08 95       	ret

000015b0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    15b0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    15b2:	f8 94       	cli
	m = timer0_overflow_count;
    15b4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <timer0_overflow_count>
    15b8:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <timer0_overflow_count+0x1>
    15bc:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <timer0_overflow_count+0x2>
    15c0:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    15c4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    15c6:	a8 9b       	sbis	0x15, 0	; 21
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <micros+0x24>
    15ca:	2f 3f       	cpi	r18, 0xFF	; 255
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <micros+0x24>
		m++;
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	a1 1d       	adc	r26, r1
    15d2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    15d4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    15d6:	ba 2f       	mov	r27, r26
    15d8:	a9 2f       	mov	r26, r25
    15da:	98 2f       	mov	r25, r24
    15dc:	88 27       	eor	r24, r24
    15de:	82 0f       	add	r24, r18
    15e0:	91 1d       	adc	r25, r1
    15e2:	a1 1d       	adc	r26, r1
    15e4:	b1 1d       	adc	r27, r1
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	4a 95       	dec	r20
    15f6:	d1 f7       	brne	.-12     	; 0x15ec <micros+0x3c>
}
    15f8:	08 95       	ret

000015fa <delay>:

void delay(unsigned long ms)
{
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	6b 01       	movw	r12, r22
    160c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    160e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <micros>
    1612:	4b 01       	movw	r8, r22
    1614:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1616:	c1 14       	cp	r12, r1
    1618:	d1 04       	cpc	r13, r1
    161a:	e1 04       	cpc	r14, r1
    161c:	f1 04       	cpc	r15, r1
    161e:	01 f1       	breq	.+64     	; 0x1660 <delay+0x66>
		yield();
    1620:	0e 94 bb 0b 	call	0x1776	; 0x1776 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1624:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <micros>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	88 19       	sub	r24, r8
    162e:	99 09       	sbc	r25, r9
    1630:	aa 09       	sbc	r26, r10
    1632:	bb 09       	sbc	r27, r11
    1634:	88 3e       	cpi	r24, 0xE8	; 232
    1636:	93 40       	sbci	r25, 0x03	; 3
    1638:	a1 05       	cpc	r26, r1
    163a:	b1 05       	cpc	r27, r1
    163c:	60 f3       	brcs	.-40     	; 0x1616 <delay+0x1c>
			ms--;
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	c2 1a       	sub	r12, r18
    1642:	d1 08       	sbc	r13, r1
    1644:	e1 08       	sbc	r14, r1
    1646:	f1 08       	sbc	r15, r1
			start += 1000;
    1648:	88 ee       	ldi	r24, 0xE8	; 232
    164a:	88 0e       	add	r8, r24
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	98 1e       	adc	r9, r24
    1650:	a1 1c       	adc	r10, r1
    1652:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1654:	c1 14       	cp	r12, r1
    1656:	d1 04       	cpc	r13, r1
    1658:	e1 04       	cpc	r14, r1
    165a:	f1 04       	cpc	r15, r1
    165c:	19 f7       	brne	.-58     	; 0x1624 <delay+0x2a>
    165e:	db cf       	rjmp	.-74     	; 0x1616 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	af 90       	pop	r10
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	08 95       	ret

00001672 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	91 05       	cpc	r25, r1
    1676:	38 f0       	brcs	.+14     	; 0x1686 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1680:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <delayMicroseconds+0x10>
    1686:	08 95       	ret

00001688 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1688:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    168a:	84 b5       	in	r24, 0x24	; 36
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1690:	84 b5       	in	r24, 0x24	; 36
    1692:	81 60       	ori	r24, 0x01	; 1
    1694:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1696:	85 b5       	in	r24, 0x25	; 37
    1698:	82 60       	ori	r24, 0x02	; 2
    169a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    169c:	85 b5       	in	r24, 0x25	; 37
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16a2:	ee e6       	ldi	r30, 0x6E	; 110
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16ac:	e1 e8       	ldi	r30, 0x81	; 129
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16b2:	80 81       	ld	r24, Z
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16b8:	80 81       	ld	r24, Z
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16be:	e0 e8       	ldi	r30, 0x80	; 128
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	81 60       	ori	r24, 0x01	; 1
    16c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    16c8:	e1 eb       	ldi	r30, 0xB1	; 177
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	84 60       	ori	r24, 0x04	; 4
    16d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    16d2:	e0 eb       	ldi	r30, 0xB0	; 176
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16dc:	ea e7       	ldi	r30, 0x7A	; 122
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    16e6:	80 81       	ld	r24, Z
    16e8:	82 60       	ori	r24, 0x02	; 2
    16ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    16ec:	80 81       	ld	r24, Z
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    16f2:	80 81       	ld	r24, Z
    16f4:	80 68       	ori	r24, 0x80	; 128
    16f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    16f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    16fc:	08 95       	ret

000016fe <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	e8 59       	subi	r30, 0x98	; 152
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    170c:	fc 01       	movw	r30, r24
    170e:	e4 58       	subi	r30, 0x84	; 132
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1714:	88 23       	and	r24, r24
    1716:	61 f1       	breq	.+88     	; 0x1770 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	fc 01       	movw	r30, r24
    1720:	ec 55       	subi	r30, 0x5C	; 92
    1722:	fe 4f       	sbci	r31, 0xFE	; 254
    1724:	c5 91       	lpm	r28, Z+
    1726:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1728:	fc 01       	movw	r30, r24
    172a:	e6 56       	subi	r30, 0x66	; 102
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	a5 91       	lpm	r26, Z+
    1730:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1732:	61 11       	cpse	r22, r1
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1736:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1738:	f8 94       	cli
		*reg &= ~bit;
    173a:	88 81       	ld	r24, Y
    173c:	20 95       	com	r18
    173e:	82 23       	and	r24, r18
    1740:	88 83       	st	Y, r24
		*out &= ~bit;
    1742:	ec 91       	ld	r30, X
    1744:	2e 23       	and	r18, r30
    1746:	0b c0       	rjmp	.+22     	; 0x175e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1748:	62 30       	cpi	r22, 0x02	; 2
    174a:	61 f4       	brne	.+24     	; 0x1764 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    174c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    174e:	f8 94       	cli
		*reg &= ~bit;
    1750:	88 81       	ld	r24, Y
    1752:	32 2f       	mov	r19, r18
    1754:	30 95       	com	r19
    1756:	83 23       	and	r24, r19
    1758:	88 83       	st	Y, r24
		*out |= bit;
    175a:	ec 91       	ld	r30, X
    175c:	2e 2b       	or	r18, r30
    175e:	2c 93       	st	X, r18
		SREG = oldSREG;
    1760:	9f bf       	out	0x3f, r25	; 63
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1764:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1766:	f8 94       	cli
		*reg |= bit;
    1768:	e8 81       	ld	r30, Y
    176a:	2e 2b       	or	r18, r30
    176c:	28 83       	st	Y, r18
		SREG = oldSREG;
    176e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1776:	08 95       	ret

00001778 <__cmpsf2>:
    1778:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_cmp>
    177c:	08 f4       	brcc	.+2      	; 0x1780 <__cmpsf2+0x8>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret

00001782 <__divsf3>:
    1782:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__divsf3x>
    1786:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__fp_round>
    178a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_pscB>
    178e:	58 f0       	brcs	.+22     	; 0x17a6 <__divsf3+0x24>
    1790:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_pscA>
    1794:	40 f0       	brcs	.+16     	; 0x17a6 <__divsf3+0x24>
    1796:	29 f4       	brne	.+10     	; 0x17a2 <__divsf3+0x20>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	29 f0       	breq	.+10     	; 0x17a6 <__divsf3+0x24>
    179c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_inf>
    17a0:	51 11       	cpse	r21, r1
    17a2:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
    17a6:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_nan>

000017aa <__divsf3x>:
    17aa:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_split3>
    17ae:	68 f3       	brcs	.-38     	; 0x178a <__divsf3+0x8>

000017b0 <__divsf3_pse>:
    17b0:	99 23       	and	r25, r25
    17b2:	b1 f3       	breq	.-20     	; 0x17a0 <__divsf3+0x1e>
    17b4:	55 23       	and	r21, r21
    17b6:	91 f3       	breq	.-28     	; 0x179c <__divsf3+0x1a>
    17b8:	95 1b       	sub	r25, r21
    17ba:	55 0b       	sbc	r21, r21
    17bc:	bb 27       	eor	r27, r27
    17be:	aa 27       	eor	r26, r26
    17c0:	62 17       	cp	r22, r18
    17c2:	73 07       	cpc	r23, r19
    17c4:	84 07       	cpc	r24, r20
    17c6:	38 f0       	brcs	.+14     	; 0x17d6 <__divsf3_pse+0x26>
    17c8:	9f 5f       	subi	r25, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	44 1f       	adc	r20, r20
    17d2:	aa 1f       	adc	r26, r26
    17d4:	a9 f3       	breq	.-22     	; 0x17c0 <__divsf3_pse+0x10>
    17d6:	35 d0       	rcall	.+106    	; 0x1842 <__divsf3_pse+0x92>
    17d8:	0e 2e       	mov	r0, r30
    17da:	3a f0       	brmi	.+14     	; 0x17ea <__divsf3_pse+0x3a>
    17dc:	e0 e8       	ldi	r30, 0x80	; 128
    17de:	32 d0       	rcall	.+100    	; 0x1844 <__divsf3_pse+0x94>
    17e0:	91 50       	subi	r25, 0x01	; 1
    17e2:	50 40       	sbci	r21, 0x00	; 0
    17e4:	e6 95       	lsr	r30
    17e6:	00 1c       	adc	r0, r0
    17e8:	ca f7       	brpl	.-14     	; 0x17dc <__divsf3_pse+0x2c>
    17ea:	2b d0       	rcall	.+86     	; 0x1842 <__divsf3_pse+0x92>
    17ec:	fe 2f       	mov	r31, r30
    17ee:	29 d0       	rcall	.+82     	; 0x1842 <__divsf3_pse+0x92>
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	bb 1f       	adc	r27, r27
    17f8:	26 17       	cp	r18, r22
    17fa:	37 07       	cpc	r19, r23
    17fc:	48 07       	cpc	r20, r24
    17fe:	ab 07       	cpc	r26, r27
    1800:	b0 e8       	ldi	r27, 0x80	; 128
    1802:	09 f0       	breq	.+2      	; 0x1806 <__divsf3_pse+0x56>
    1804:	bb 0b       	sbc	r27, r27
    1806:	80 2d       	mov	r24, r0
    1808:	bf 01       	movw	r22, r30
    180a:	ff 27       	eor	r31, r31
    180c:	93 58       	subi	r25, 0x83	; 131
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	3a f0       	brmi	.+14     	; 0x1820 <__divsf3_pse+0x70>
    1812:	9e 3f       	cpi	r25, 0xFE	; 254
    1814:	51 05       	cpc	r21, r1
    1816:	78 f0       	brcs	.+30     	; 0x1836 <__divsf3_pse+0x86>
    1818:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_inf>
    181c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
    1820:	5f 3f       	cpi	r21, 0xFF	; 255
    1822:	e4 f3       	brlt	.-8      	; 0x181c <__divsf3_pse+0x6c>
    1824:	98 3e       	cpi	r25, 0xE8	; 232
    1826:	d4 f3       	brlt	.-12     	; 0x181c <__divsf3_pse+0x6c>
    1828:	86 95       	lsr	r24
    182a:	77 95       	ror	r23
    182c:	67 95       	ror	r22
    182e:	b7 95       	ror	r27
    1830:	f7 95       	ror	r31
    1832:	9f 5f       	subi	r25, 0xFF	; 255
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__divsf3_pse+0x78>
    1836:	88 0f       	add	r24, r24
    1838:	91 1d       	adc	r25, r1
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret
    1842:	e1 e0       	ldi	r30, 0x01	; 1
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	bb 1f       	adc	r27, r27
    184c:	62 17       	cp	r22, r18
    184e:	73 07       	cpc	r23, r19
    1850:	84 07       	cpc	r24, r20
    1852:	ba 07       	cpc	r27, r26
    1854:	20 f0       	brcs	.+8      	; 0x185e <__divsf3_pse+0xae>
    1856:	62 1b       	sub	r22, r18
    1858:	73 0b       	sbc	r23, r19
    185a:	84 0b       	sbc	r24, r20
    185c:	ba 0b       	sbc	r27, r26
    185e:	ee 1f       	adc	r30, r30
    1860:	88 f7       	brcc	.-30     	; 0x1844 <__divsf3_pse+0x94>
    1862:	e0 95       	com	r30
    1864:	08 95       	ret

00001866 <__fixunssfsi>:
    1866:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_splitA>
    186a:	88 f0       	brcs	.+34     	; 0x188e <__fixunssfsi+0x28>
    186c:	9f 57       	subi	r25, 0x7F	; 127
    186e:	98 f0       	brcs	.+38     	; 0x1896 <__fixunssfsi+0x30>
    1870:	b9 2f       	mov	r27, r25
    1872:	99 27       	eor	r25, r25
    1874:	b7 51       	subi	r27, 0x17	; 23
    1876:	b0 f0       	brcs	.+44     	; 0x18a4 <__fixunssfsi+0x3e>
    1878:	e1 f0       	breq	.+56     	; 0x18b2 <__fixunssfsi+0x4c>
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	1a f0       	brmi	.+6      	; 0x188a <__fixunssfsi+0x24>
    1884:	ba 95       	dec	r27
    1886:	c9 f7       	brne	.-14     	; 0x187a <__fixunssfsi+0x14>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <__fixunssfsi+0x4c>
    188a:	b1 30       	cpi	r27, 0x01	; 1
    188c:	91 f0       	breq	.+36     	; 0x18b2 <__fixunssfsi+0x4c>
    188e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_zero>
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	08 95       	ret
    1896:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_zero>
    189a:	67 2f       	mov	r22, r23
    189c:	78 2f       	mov	r23, r24
    189e:	88 27       	eor	r24, r24
    18a0:	b8 5f       	subi	r27, 0xF8	; 248
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <__fixunssfsi+0x4c>
    18a4:	b9 3f       	cpi	r27, 0xF9	; 249
    18a6:	cc f3       	brlt	.-14     	; 0x189a <__fixunssfsi+0x34>
    18a8:	86 95       	lsr	r24
    18aa:	77 95       	ror	r23
    18ac:	67 95       	ror	r22
    18ae:	b3 95       	inc	r27
    18b0:	d9 f7       	brne	.-10     	; 0x18a8 <__fixunssfsi+0x42>
    18b2:	3e f4       	brtc	.+14     	; 0x18c2 <__fixunssfsi+0x5c>
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	08 95       	ret

000018c4 <__fp_cmp>:
    18c4:	99 0f       	add	r25, r25
    18c6:	00 08       	sbc	r0, r0
    18c8:	55 0f       	add	r21, r21
    18ca:	aa 0b       	sbc	r26, r26
    18cc:	e0 e8       	ldi	r30, 0x80	; 128
    18ce:	fe ef       	ldi	r31, 0xFE	; 254
    18d0:	16 16       	cp	r1, r22
    18d2:	17 06       	cpc	r1, r23
    18d4:	e8 07       	cpc	r30, r24
    18d6:	f9 07       	cpc	r31, r25
    18d8:	c0 f0       	brcs	.+48     	; 0x190a <__fp_cmp+0x46>
    18da:	12 16       	cp	r1, r18
    18dc:	13 06       	cpc	r1, r19
    18de:	e4 07       	cpc	r30, r20
    18e0:	f5 07       	cpc	r31, r21
    18e2:	98 f0       	brcs	.+38     	; 0x190a <__fp_cmp+0x46>
    18e4:	62 1b       	sub	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	95 0b       	sbc	r25, r21
    18ec:	39 f4       	brne	.+14     	; 0x18fc <__fp_cmp+0x38>
    18ee:	0a 26       	eor	r0, r26
    18f0:	61 f0       	breq	.+24     	; 0x190a <__fp_cmp+0x46>
    18f2:	23 2b       	or	r18, r19
    18f4:	24 2b       	or	r18, r20
    18f6:	25 2b       	or	r18, r21
    18f8:	21 f4       	brne	.+8      	; 0x1902 <__fp_cmp+0x3e>
    18fa:	08 95       	ret
    18fc:	0a 26       	eor	r0, r26
    18fe:	09 f4       	brne	.+2      	; 0x1902 <__fp_cmp+0x3e>
    1900:	a1 40       	sbci	r26, 0x01	; 1
    1902:	a6 95       	lsr	r26
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	81 1d       	adc	r24, r1
    1908:	81 1d       	adc	r24, r1
    190a:	08 95       	ret

0000190c <__gesf2>:
    190c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_cmp>
    1910:	08 f4       	brcc	.+2      	; 0x1914 <__gesf2+0x8>
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	08 95       	ret

00001916 <__unordsf2>:
    1916:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_cmp>
    191a:	88 0b       	sbc	r24, r24
    191c:	99 0b       	sbc	r25, r25
    191e:	08 95       	ret

00001920 <__divmodhi4>:
    1920:	97 fb       	bst	r25, 7
    1922:	07 2e       	mov	r0, r23
    1924:	16 f4       	brtc	.+4      	; 0x192a <__divmodhi4+0xa>
    1926:	00 94       	com	r0
    1928:	07 d0       	rcall	.+14     	; 0x1938 <__divmodhi4_neg1>
    192a:	77 fd       	sbrc	r23, 7
    192c:	09 d0       	rcall	.+18     	; 0x1940 <__divmodhi4_neg2>
    192e:	0e 94 c6 0c 	call	0x198c	; 0x198c <__udivmodhi4>
    1932:	07 fc       	sbrc	r0, 7
    1934:	05 d0       	rcall	.+10     	; 0x1940 <__divmodhi4_neg2>
    1936:	3e f4       	brtc	.+14     	; 0x1946 <__divmodhi4_exit>

00001938 <__divmodhi4_neg1>:
    1938:	90 95       	com	r25
    193a:	81 95       	neg	r24
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	08 95       	ret

00001940 <__divmodhi4_neg2>:
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255

00001946 <__divmodhi4_exit>:
    1946:	08 95       	ret

00001948 <__udivmodsi4>:
    1948:	a1 e2       	ldi	r26, 0x21	; 33
    194a:	1a 2e       	mov	r1, r26
    194c:	aa 1b       	sub	r26, r26
    194e:	bb 1b       	sub	r27, r27
    1950:	fd 01       	movw	r30, r26
    1952:	0d c0       	rjmp	.+26     	; 0x196e <__udivmodsi4_ep>

00001954 <__udivmodsi4_loop>:
    1954:	aa 1f       	adc	r26, r26
    1956:	bb 1f       	adc	r27, r27
    1958:	ee 1f       	adc	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	a2 17       	cp	r26, r18
    195e:	b3 07       	cpc	r27, r19
    1960:	e4 07       	cpc	r30, r20
    1962:	f5 07       	cpc	r31, r21
    1964:	20 f0       	brcs	.+8      	; 0x196e <__udivmodsi4_ep>
    1966:	a2 1b       	sub	r26, r18
    1968:	b3 0b       	sbc	r27, r19
    196a:	e4 0b       	sbc	r30, r20
    196c:	f5 0b       	sbc	r31, r21

0000196e <__udivmodsi4_ep>:
    196e:	66 1f       	adc	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	1a 94       	dec	r1
    1978:	69 f7       	brne	.-38     	; 0x1954 <__udivmodsi4_loop>
    197a:	60 95       	com	r22
    197c:	70 95       	com	r23
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	9b 01       	movw	r18, r22
    1984:	ac 01       	movw	r20, r24
    1986:	bd 01       	movw	r22, r26
    1988:	cf 01       	movw	r24, r30
    198a:	08 95       	ret

0000198c <__udivmodhi4>:
    198c:	aa 1b       	sub	r26, r26
    198e:	bb 1b       	sub	r27, r27
    1990:	51 e1       	ldi	r21, 0x11	; 17
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <__udivmodhi4_ep>

00001994 <__udivmodhi4_loop>:
    1994:	aa 1f       	adc	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	a6 17       	cp	r26, r22
    199a:	b7 07       	cpc	r27, r23
    199c:	10 f0       	brcs	.+4      	; 0x19a2 <__udivmodhi4_ep>
    199e:	a6 1b       	sub	r26, r22
    19a0:	b7 0b       	sbc	r27, r23

000019a2 <__udivmodhi4_ep>:
    19a2:	88 1f       	adc	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	5a 95       	dec	r21
    19a8:	a9 f7       	brne	.-22     	; 0x1994 <__udivmodhi4_loop>
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	08 95       	ret

000019b4 <__tablejump2__>:
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	05 90       	lpm	r0, Z+
    19ba:	f4 91       	lpm	r31, Z
    19bc:	e0 2d       	mov	r30, r0
    19be:	09 94       	ijmp

000019c0 <_exit>:
    19c0:	f8 94       	cli

000019c2 <__stop_program>:
    19c2:	ff cf       	rjmp	.-2      	; 0x19c2 <__stop_program>
