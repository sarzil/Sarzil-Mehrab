
AurdionoLCD16x2scrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080011c  0080011c  00000bc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005da2  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001481  00000000  00000000  00006d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bf0  00000000  00000000  0000819b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  00009d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001df7  00000000  00000000  0000a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040e1  00000000  00000000  0000c4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	ff 00       	.word	0x00ff	; ????

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e8 e1       	ldi	r30, 0x18	; 24
  d8:	fb e0       	ldi	r31, 0x0B	; 11
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	ac 31       	cpi	r26, 0x1C	; 28
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	ac e1       	ldi	r26, 0x1C	; 28
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	af 33       	cpi	r26, 0x3F	; 63
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 84 05 	call	0xb08	; 0xb08 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 13 01 	call	0x226	; 0x226 <main>
 110:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
const int LED =13;
int buttonState = 0;
int count=15;
int sensorValue=0;
void setup() {
	pinMode(Upper, INPUT);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
	pinMode(Lower, INPUT);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
	pinMode(LED, OUTPUT);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
	lcd.begin(16, 2);
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	42 e0       	ldi	r20, 0x02	; 2
 134:	60 e1       	ldi	r22, 0x10	; 16
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13LiquidCrystal5beginEhhh>
	lcd.print("Temperature:");
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	71 e0       	ldi	r23, 0x01	; 1
 142:	8e e1       	ldi	r24, 0x1E	; 30
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_ZN5Print5printEPKc>

0000014a <loop>:
}
void loop() {
	sensorValue = analogRead(sensorPin);
 14a:	8e e0       	ldi	r24, 0x0E	; 14
 14c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <analogRead>
 150:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 154:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	if(digitalRead(Upper)==1)
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	0e 94 a8 03 	call	0x750	; 0x750 <digitalRead>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	49 f4       	brne	.+18     	; 0x174 <loop+0x2a>
	{
		count++;		
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	if(digitalRead(Lower)==1)
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	0e 94 a8 03 	call	0x750	; 0x750 <digitalRead>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	49 f4       	brne	.+18     	; 0x190 <loop+0x46>
	{
		count--;
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	if(sensorValue>count)
 190:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 194:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	82 17       	cp	r24, r18
 1a2:	93 07       	cpc	r25, r19
 1a4:	14 f4       	brge	.+4      	; 0x1aa <loop+0x60>
	{
		digitalWrite(LED, HIGH);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <loop+0x62>
	}
	else{
		digitalWrite(LED, LOW);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
	}
	lcd.setCursor(0, 1);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	8e e1       	ldi	r24, 0x1E	; 30
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN13LiquidCrystal9setCursorEhh>
	// print the number of seconds since reset:
	// lcd.print(millis() / 1000);
	lcd.print(count);
 1be:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1c2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	8e e1       	ldi	r24, 0x1E	; 30
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN5Print5printEii>
	lcd.setCursor(4, 1);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(sensorValue);
 1de:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__data_end>
 1e2:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__data_end+0x1>
 1e6:	4a e0       	ldi	r20, 0x0A	; 10
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	8e e1       	ldi	r24, 0x1E	; 30
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN5Print5printEii>
	delay(250);	
 1f2:	6a ef       	ldi	r22, 0xFA	; 250
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <delay>

000001fe <_GLOBAL__sub_I_lcd>:
 1fe:	cf 92       	push	r12
 200:	ef 92       	push	r14
 202:	0f 93       	push	r16
﻿#include <Arduino.h>
#include <LiquidCrystal.h>
LiquidCrystal lcd(0,1,8,9,10,11);
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	c8 2e       	mov	r12, r24
 208:	9a e0       	ldi	r25, 0x0A	; 10
 20a:	e9 2e       	mov	r14, r25
 20c:	09 e0       	ldi	r16, 0x09	; 9
 20e:	28 e0       	ldi	r18, 0x08	; 8
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8e e1       	ldi	r24, 0x1E	; 30
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN13LiquidCrystalC1Ehhhhhh>
	// lcd.print(millis() / 1000);
	lcd.print(count);
	lcd.setCursor(4, 1);
	lcd.print(sensorValue);
	delay(250);	
 21c:	0f 91       	pop	r16
 21e:	ef 90       	pop	r14
 220:	cf 90       	pop	r12
 222:	08 95       	ret

00000224 <initVariant>:
 224:	08 95       	ret

00000226 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 226:	0e 94 bc 02 	call	0x578	; 0x578 <init>

	initVariant();
 22a:	0e 94 12 01 	call	0x224	; 0x224 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 236:	0e 94 a5 00 	call	0x14a	; 0x14a <loop>
		if (serialEventRun) serialEventRun();
 23a:	20 97       	sbiw	r28, 0x00	; 0
 23c:	e1 f3       	breq	.-8      	; 0x236 <main+0x10>
 23e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 242:	f9 cf       	rjmp	.-14     	; 0x236 <main+0x10>

00000244 <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 95       	ret

0000024a <_ZN5Print5flushEv>:
 24a:	08 95       	ret

0000024c <_ZN5Print5writeEPKhj>:
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	6c 01       	movw	r12, r24
 25e:	7a 01       	movw	r14, r20
 260:	8b 01       	movw	r16, r22
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	ce 15       	cp	r28, r14
 268:	df 05       	cpc	r29, r15
 26a:	81 f0       	breq	.+32     	; 0x28c <_ZN5Print5writeEPKhj+0x40>
 26c:	d8 01       	movw	r26, r16
 26e:	6d 91       	ld	r22, X+
 270:	8d 01       	movw	r16, r26
 272:	d6 01       	movw	r26, r12
 274:	ed 91       	ld	r30, X+
 276:	fc 91       	ld	r31, X
 278:	01 90       	ld	r0, Z+
 27a:	f0 81       	ld	r31, Z
 27c:	e0 2d       	mov	r30, r0
 27e:	c6 01       	movw	r24, r12
 280:	09 95       	icall
 282:	89 2b       	or	r24, r25
 284:	11 f0       	breq	.+4      	; 0x28a <_ZN5Print5writeEPKhj+0x3e>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	ee cf       	rjmp	.-36     	; 0x266 <_ZN5Print5writeEPKhj+0x1a>
 28a:	7e 01       	movw	r14, r28
 28c:	c7 01       	movw	r24, r14
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	08 95       	ret

000002a0 <_ZN5Print5writeEPKc>:
 2a0:	61 15       	cp	r22, r1
 2a2:	71 05       	cpc	r23, r1
 2a4:	79 f0       	breq	.+30     	; 0x2c4 <_ZN5Print5writeEPKc+0x24>
 2a6:	fb 01       	movw	r30, r22
 2a8:	01 90       	ld	r0, Z+
 2aa:	00 20       	and	r0, r0
 2ac:	e9 f7       	brne	.-6      	; 0x2a8 <_ZN5Print5writeEPKc+0x8>
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	af 01       	movw	r20, r30
 2b2:	46 1b       	sub	r20, r22
 2b4:	57 0b       	sbc	r21, r23
 2b6:	dc 01       	movw	r26, r24
 2b8:	ed 91       	ld	r30, X+
 2ba:	fc 91       	ld	r31, X
 2bc:	02 80       	ldd	r0, Z+2	; 0x02
 2be:	f3 81       	ldd	r31, Z+3	; 0x03
 2c0:	e0 2d       	mov	r30, r0
 2c2:	09 94       	ijmp
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <_ZN5Print5printEPKc>:
 2ca:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_ZN5Print5writeEPKc>

000002ce <_ZN5Print5printEc>:
 2ce:	dc 01       	movw	r26, r24
 2d0:	ed 91       	ld	r30, X+
 2d2:	fc 91       	ld	r31, X
 2d4:	01 90       	ld	r0, Z+
 2d6:	f0 81       	ld	r31, Z
 2d8:	e0 2d       	mov	r30, r0
 2da:	09 94       	ijmp

000002dc <_ZN5Print11printNumberEmh>:
 2dc:	8f 92       	push	r8
 2de:	9f 92       	push	r9
 2e0:	af 92       	push	r10
 2e2:	bf 92       	push	r11
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	a1 97       	sbiw	r28, 0x21	; 33
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	7c 01       	movw	r14, r24
 302:	fa 01       	movw	r30, r20
 304:	cb 01       	movw	r24, r22
 306:	19 a2       	std	Y+33, r1	; 0x21
 308:	22 30       	cpi	r18, 0x02	; 2
 30a:	08 f4       	brcc	.+2      	; 0x30e <_ZN5Print11printNumberEmh+0x32>
 30c:	2a e0       	ldi	r18, 0x0A	; 10
 30e:	8e 01       	movw	r16, r28
 310:	0f 5d       	subi	r16, 0xDF	; 223
 312:	1f 4f       	sbci	r17, 0xFF	; 255
 314:	82 2e       	mov	r8, r18
 316:	91 2c       	mov	r9, r1
 318:	a1 2c       	mov	r10, r1
 31a:	b1 2c       	mov	r11, r1
 31c:	bf 01       	movw	r22, r30
 31e:	a5 01       	movw	r20, r10
 320:	94 01       	movw	r18, r8
 322:	0e 94 62 05 	call	0xac4	; 0xac4 <__udivmodsi4>
 326:	f9 01       	movw	r30, r18
 328:	ca 01       	movw	r24, r20
 32a:	01 50       	subi	r16, 0x01	; 1
 32c:	11 09       	sbc	r17, r1
 32e:	6a 30       	cpi	r22, 0x0A	; 10
 330:	10 f4       	brcc	.+4      	; 0x336 <_ZN5Print11printNumberEmh+0x5a>
 332:	60 5d       	subi	r22, 0xD0	; 208
 334:	01 c0       	rjmp	.+2      	; 0x338 <_ZN5Print11printNumberEmh+0x5c>
 336:	69 5c       	subi	r22, 0xC9	; 201
 338:	d8 01       	movw	r26, r16
 33a:	6c 93       	st	X, r22
 33c:	23 2b       	or	r18, r19
 33e:	24 2b       	or	r18, r20
 340:	25 2b       	or	r18, r21
 342:	61 f7       	brne	.-40     	; 0x31c <_ZN5Print11printNumberEmh+0x40>
 344:	b8 01       	movw	r22, r16
 346:	c7 01       	movw	r24, r14
 348:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN5Print5writeEPKc>
 34c:	a1 96       	adiw	r28, 0x21	; 33
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	9f 90       	pop	r9
 36a:	8f 90       	pop	r8
 36c:	08 95       	ret

0000036e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
  if (base == 0) {
 37e:	21 15       	cp	r18, r1
 380:	31 05       	cpc	r19, r1
 382:	81 f4       	brne	.+32     	; 0x3a4 <_ZN5Print5printEli+0x36>
    return write(n);
 384:	dc 01       	movw	r26, r24
 386:	ed 91       	ld	r30, X+
 388:	fc 91       	ld	r31, X
 38a:	01 90       	ld	r0, Z+
 38c:	f0 81       	ld	r31, Z
 38e:	e0 2d       	mov	r30, r0
 390:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 3a2:	09 94       	ijmp
  } else if (base == 10) {
 3a4:	2a 30       	cpi	r18, 0x0A	; 10
 3a6:	31 05       	cpc	r19, r1
 3a8:	01 f5       	brne	.+64     	; 0x3ea <_ZN5Print5printEli+0x7c>
    if (n < 0) {
 3aa:	77 ff       	sbrs	r23, 7
 3ac:	1d c0       	rjmp	.+58     	; 0x3e8 <_ZN5Print5printEli+0x7a>
 3ae:	6a 01       	movw	r12, r20
 3b0:	7b 01       	movw	r14, r22
 3b2:	ec 01       	movw	r28, r24
      int t = print('-');
 3b4:	6d e2       	ldi	r22, 0x2D	; 45
 3b6:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN5Print5printEc>
 3ba:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 3bc:	44 27       	eor	r20, r20
 3be:	55 27       	eor	r21, r21
 3c0:	ba 01       	movw	r22, r20
 3c2:	4c 19       	sub	r20, r12
 3c4:	5d 09       	sbc	r21, r13
 3c6:	6e 09       	sbc	r22, r14
 3c8:	7f 09       	sbc	r23, r15
 3ca:	2a e0       	ldi	r18, 0x0A	; 10
 3cc:	ce 01       	movw	r24, r28
 3ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN5Print11printNumberEmh>
 3d2:	80 0f       	add	r24, r16
 3d4:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 3e8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 3fa:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_ZN5Print11printNumberEmh>

000003fe <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 3fe:	9a 01       	movw	r18, r20
  return print((long) n, base);
 400:	ab 01       	movw	r20, r22
 402:	77 0f       	add	r23, r23
 404:	66 0b       	sbc	r22, r22
 406:	77 0b       	sbc	r23, r23
 408:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_ZN5Print5printEli>

0000040c <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <timer0_millis>
 426:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <timer0_millis+0x1>
 42a:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <timer0_millis+0x2>
 42e:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <timer0_millis+0x3>
 432:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <timer0_fract>
 436:	23 e0       	ldi	r18, 0x03	; 3
 438:	23 0f       	add	r18, r19
 43a:	2d 37       	cpi	r18, 0x7D	; 125
 43c:	20 f4       	brcc	.+8      	; 0x446 <__vector_16+0x3a>
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	a1 1d       	adc	r26, r1
 442:	b1 1d       	adc	r27, r1
 444:	05 c0       	rjmp	.+10     	; 0x450 <__vector_16+0x44>
 446:	26 e8       	ldi	r18, 0x86	; 134
 448:	23 0f       	add	r18, r19
 44a:	02 96       	adiw	r24, 0x02	; 2
 44c:	a1 1d       	adc	r26, r1
 44e:	b1 1d       	adc	r27, r1
 450:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <timer0_fract>
 454:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <timer0_millis>
 458:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <timer0_millis+0x1>
 45c:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <timer0_millis+0x2>
 460:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <timer0_millis+0x3>
 464:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <timer0_overflow_count>
 468:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <timer0_overflow_count+0x1>
 46c:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <timer0_overflow_count+0x2>
 470:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <timer0_overflow_count+0x3>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	a1 1d       	adc	r26, r1
 478:	b1 1d       	adc	r27, r1
 47a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <timer0_overflow_count>
 47e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <timer0_overflow_count+0x1>
 482:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <timer0_overflow_count+0x2>
 486:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <timer0_overflow_count+0x3>
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 4a0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 4a2:	f8 94       	cli
	m = timer0_overflow_count;
 4a4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <timer0_overflow_count>
 4a8:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <timer0_overflow_count+0x1>
 4ac:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <timer0_overflow_count+0x2>
 4b0:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 4b4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 4b6:	a8 9b       	sbis	0x15, 0	; 21
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <micros+0x24>
 4ba:	2f 3f       	cpi	r18, 0xFF	; 255
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <micros+0x24>
		m++;
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	a1 1d       	adc	r26, r1
 4c2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 4c4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 4c6:	ba 2f       	mov	r27, r26
 4c8:	a9 2f       	mov	r26, r25
 4ca:	98 2f       	mov	r25, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	82 0f       	add	r24, r18
 4d0:	91 1d       	adc	r25, r1
 4d2:	a1 1d       	adc	r26, r1
 4d4:	b1 1d       	adc	r27, r1
 4d6:	bc 01       	movw	r22, r24
 4d8:	cd 01       	movw	r24, r26
 4da:	42 e0       	ldi	r20, 0x02	; 2
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	4a 95       	dec	r20
 4e6:	d1 f7       	brne	.-12     	; 0x4dc <micros+0x3c>
}
 4e8:	08 95       	ret

000004ea <delay>:

void delay(unsigned long ms)
{
 4ea:	8f 92       	push	r8
 4ec:	9f 92       	push	r9
 4ee:	af 92       	push	r10
 4f0:	bf 92       	push	r11
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	6b 01       	movw	r12, r22
 4fc:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 4fe:	0e 94 50 02 	call	0x4a0	; 0x4a0 <micros>
 502:	4b 01       	movw	r8, r22
 504:	5c 01       	movw	r10, r24

	while (ms > 0) {
 506:	c1 14       	cp	r12, r1
 508:	d1 04       	cpc	r13, r1
 50a:	e1 04       	cpc	r14, r1
 50c:	f1 04       	cpc	r15, r1
 50e:	01 f1       	breq	.+64     	; 0x550 <delay+0x66>
		yield();
 510:	0e 94 61 05 	call	0xac2	; 0xac2 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 514:	0e 94 50 02 	call	0x4a0	; 0x4a0 <micros>
 518:	dc 01       	movw	r26, r24
 51a:	cb 01       	movw	r24, r22
 51c:	88 19       	sub	r24, r8
 51e:	99 09       	sbc	r25, r9
 520:	aa 09       	sbc	r26, r10
 522:	bb 09       	sbc	r27, r11
 524:	88 3e       	cpi	r24, 0xE8	; 232
 526:	93 40       	sbci	r25, 0x03	; 3
 528:	a1 05       	cpc	r26, r1
 52a:	b1 05       	cpc	r27, r1
 52c:	60 f3       	brcs	.-40     	; 0x506 <delay+0x1c>
			ms--;
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	c2 1a       	sub	r12, r18
 532:	d1 08       	sbc	r13, r1
 534:	e1 08       	sbc	r14, r1
 536:	f1 08       	sbc	r15, r1
			start += 1000;
 538:	88 ee       	ldi	r24, 0xE8	; 232
 53a:	88 0e       	add	r8, r24
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	98 1e       	adc	r9, r24
 540:	a1 1c       	adc	r10, r1
 542:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 544:	c1 14       	cp	r12, r1
 546:	d1 04       	cpc	r13, r1
 548:	e1 04       	cpc	r14, r1
 54a:	f1 04       	cpc	r15, r1
 54c:	19 f7       	brne	.-58     	; 0x514 <delay+0x2a>
 54e:	db cf       	rjmp	.-74     	; 0x506 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	9f 90       	pop	r9
 55e:	8f 90       	pop	r8
 560:	08 95       	ret

00000562 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	91 05       	cpc	r25, r1
 566:	38 f0       	brcs	.+14     	; 0x576 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 570:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <delayMicroseconds+0x10>
 576:	08 95       	ret

00000578 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 578:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 57a:	84 b5       	in	r24, 0x24	; 36
 57c:	82 60       	ori	r24, 0x02	; 2
 57e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 580:	84 b5       	in	r24, 0x24	; 36
 582:	81 60       	ori	r24, 0x01	; 1
 584:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 586:	85 b5       	in	r24, 0x25	; 37
 588:	82 60       	ori	r24, 0x02	; 2
 58a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 58c:	85 b5       	in	r24, 0x25	; 37
 58e:	81 60       	ori	r24, 0x01	; 1
 590:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 592:	ee e6       	ldi	r30, 0x6E	; 110
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 59c:	e1 e8       	ldi	r30, 0x81	; 129
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5a2:	80 81       	ld	r24, Z
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5a8:	80 81       	ld	r24, Z
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 5ae:	e0 e8       	ldi	r30, 0x80	; 128
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 5b8:	e1 eb       	ldi	r30, 0xB1	; 177
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	84 60       	ori	r24, 0x04	; 4
 5c0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 5c2:	e0 eb       	ldi	r30, 0xB0	; 176
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	81 60       	ori	r24, 0x01	; 1
 5ca:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 5cc:	ea e7       	ldi	r30, 0x7A	; 122
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	84 60       	ori	r24, 0x04	; 4
 5d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 5d6:	80 81       	ld	r24, Z
 5d8:	82 60       	ori	r24, 0x02	; 2
 5da:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 5dc:	80 81       	ld	r24, Z
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 5e2:	80 81       	ld	r24, Z
 5e4:	80 68       	ori	r24, 0x80	; 128
 5e6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 5e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5ec:	08 95       	ret

000005ee <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 5ee:	8e 30       	cpi	r24, 0x0E	; 14
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <analogRead+0x6>
 5f2:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 5f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <analog_reference>
 5f8:	90 e4       	ldi	r25, 0x40	; 64
 5fa:	29 9f       	mul	r18, r25
 5fc:	90 01       	movw	r18, r0
 5fe:	11 24       	eor	r1, r1
 600:	87 70       	andi	r24, 0x07	; 7
 602:	82 2b       	or	r24, r18
 604:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 608:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 60c:	80 64       	ori	r24, 0x40	; 64
 60e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 612:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 616:	86 fd       	sbrc	r24, 6
 618:	fc cf       	rjmp	.-8      	; 0x612 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 61a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 61e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 622:	90 e0       	ldi	r25, 0x00	; 0
}
 624:	92 2b       	or	r25, r18
 626:	08 95       	ret

00000628 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	81 f0       	breq	.+32     	; 0x64c <turnOffPWM+0x24>
 62c:	28 f4       	brcc	.+10     	; 0x638 <turnOffPWM+0x10>
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	99 f0       	breq	.+38     	; 0x658 <turnOffPWM+0x30>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	a1 f0       	breq	.+40     	; 0x65e <turnOffPWM+0x36>
 636:	08 95       	ret
 638:	87 30       	cpi	r24, 0x07	; 7
 63a:	a9 f0       	breq	.+42     	; 0x666 <turnOffPWM+0x3e>
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	b9 f0       	breq	.+46     	; 0x66e <turnOffPWM+0x46>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	d1 f4       	brne	.+52     	; 0x678 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 644:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 648:	8f 7d       	andi	r24, 0xDF	; 223
 64a:	03 c0       	rjmp	.+6      	; 0x652 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 64c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 650:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 652:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 656:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 658:	84 b5       	in	r24, 0x24	; 36
 65a:	8f 77       	andi	r24, 0x7F	; 127
 65c:	02 c0       	rjmp	.+4      	; 0x662 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 65e:	84 b5       	in	r24, 0x24	; 36
 660:	8f 7d       	andi	r24, 0xDF	; 223
 662:	84 bd       	out	0x24, r24	; 36
 664:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 666:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 66a:	8f 77       	andi	r24, 0x7F	; 127
 66c:	03 c0       	rjmp	.+6      	; 0x674 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 66e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 672:	8f 7d       	andi	r24, 0xDF	; 223
 674:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 678:	08 95       	ret

0000067a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 67a:	cf 93       	push	r28
 67c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	fc 01       	movw	r30, r24
 682:	e4 58       	subi	r30, 0x84	; 132
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 688:	fc 01       	movw	r30, r24
 68a:	e0 57       	subi	r30, 0x70	; 112
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 690:	88 23       	and	r24, r24
 692:	61 f1       	breq	.+88     	; 0x6ec <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	fc 01       	movw	r30, r24
 69c:	e8 54       	subi	r30, 0x48	; 72
 69e:	ff 4f       	sbci	r31, 0xFF	; 255
 6a0:	c5 91       	lpm	r28, Z+
 6a2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 6a4:	fc 01       	movw	r30, r24
 6a6:	e2 55       	subi	r30, 0x52	; 82
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	a5 91       	lpm	r26, Z+
 6ac:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 6ae:	61 11       	cpse	r22, r1
 6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 6b2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 6b4:	f8 94       	cli
		*reg &= ~bit;
 6b6:	88 81       	ld	r24, Y
 6b8:	20 95       	com	r18
 6ba:	82 23       	and	r24, r18
 6bc:	88 83       	st	Y, r24
		*out &= ~bit;
 6be:	ec 91       	ld	r30, X
 6c0:	2e 23       	and	r18, r30
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 6c4:	62 30       	cpi	r22, 0x02	; 2
 6c6:	61 f4       	brne	.+24     	; 0x6e0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 6c8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 6ca:	f8 94       	cli
		*reg &= ~bit;
 6cc:	88 81       	ld	r24, Y
 6ce:	32 2f       	mov	r19, r18
 6d0:	30 95       	com	r19
 6d2:	83 23       	and	r24, r19
 6d4:	88 83       	st	Y, r24
		*out |= bit;
 6d6:	ec 91       	ld	r30, X
 6d8:	2e 2b       	or	r18, r30
 6da:	2c 93       	st	X, r18
		SREG = oldSREG;
 6dc:	9f bf       	out	0x3f, r25	; 63
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 6e0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 6e2:	f8 94       	cli
		*reg |= bit;
 6e4:	e8 81       	ld	r30, Y
 6e6:	2e 2b       	or	r18, r30
 6e8:	28 83       	st	Y, r18
		SREG = oldSREG;
 6ea:	8f bf       	out	0x3f, r24	; 63
	}
}
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	f9 01       	movw	r30, r18
 6fe:	e8 59       	subi	r30, 0x98	; 152
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 704:	f9 01       	movw	r30, r18
 706:	e4 58       	subi	r30, 0x84	; 132
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 70c:	f9 01       	movw	r30, r18
 70e:	e0 57       	subi	r30, 0x70	; 112
 710:	ff 4f       	sbci	r31, 0xFF	; 255
 712:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 714:	cc 23       	and	r28, r28
 716:	c1 f0       	breq	.+48     	; 0x748 <digitalWrite+0x56>
 718:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 71a:	81 11       	cpse	r24, r1
 71c:	0e 94 14 03 	call	0x628	; 0x628 <turnOffPWM>

	out = portOutputRegister(port);
 720:	ec 2f       	mov	r30, r28
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	e2 55       	subi	r30, 0x52	; 82
 72a:	ff 4f       	sbci	r31, 0xFF	; 255
 72c:	a5 91       	lpm	r26, Z+
 72e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 730:	9f b7       	in	r25, 0x3f	; 63
	cli();
 732:	f8 94       	cli

	if (val == LOW) {
 734:	11 11       	cpse	r17, r1
 736:	04 c0       	rjmp	.+8      	; 0x740 <digitalWrite+0x4e>
		*out &= ~bit;
 738:	8c 91       	ld	r24, X
 73a:	d0 95       	com	r29
 73c:	d8 23       	and	r29, r24
 73e:	02 c0       	rjmp	.+4      	; 0x744 <digitalWrite+0x52>
	} else {
		*out |= bit;
 740:	ec 91       	ld	r30, X
 742:	de 2b       	or	r29, r30
 744:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 746:	9f bf       	out	0x3f, r25	; 63
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	08 95       	ret

00000750 <digitalRead>:

int digitalRead(uint8_t pin)
{
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	f9 01       	movw	r30, r18
 75a:	e8 59       	subi	r30, 0x98	; 152
 75c:	ff 4f       	sbci	r31, 0xFF	; 255
 75e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 760:	f9 01       	movw	r30, r18
 762:	e4 58       	subi	r30, 0x84	; 132
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 768:	f9 01       	movw	r30, r18
 76a:	e0 57       	subi	r30, 0x70	; 112
 76c:	ff 4f       	sbci	r31, 0xFF	; 255
 76e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 770:	cc 23       	and	r28, r28
 772:	91 f0       	breq	.+36     	; 0x798 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 774:	81 11       	cpse	r24, r1
 776:	0e 94 14 03 	call	0x628	; 0x628 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 77a:	ec 2f       	mov	r30, r28
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	ec 55       	subi	r30, 0x5C	; 92
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	a5 91       	lpm	r26, Z+
 788:	b4 91       	lpm	r27, Z
 78a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 78c:	ed 23       	and	r30, r29
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	21 f4       	brne	.+8      	; 0x79c <digitalRead+0x4c>
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <digitalRead+0x4c>
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	ec 01       	movw	r28, r24
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	8e 81       	ldd	r24, Y+6	; 0x06
 7ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	8e 81       	ldd	r24, Y+6	; 0x06
 7bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	8e 81       	ldd	r24, Y+6	; 0x06
 7cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 7d0:	84 e6       	ldi	r24, 0x64	; 100
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <delayMicroseconds>

000007dc <_ZN13LiquidCrystal10write4bitsEh>:
 7dc:	cf 92       	push	r12
 7de:	df 92       	push	r13
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	6c 01       	movw	r12, r24
 7ee:	7c 01       	movw	r14, r24
 7f0:	87 e0       	ldi	r24, 0x07	; 7
 7f2:	e8 0e       	add	r14, r24
 7f4:	f1 1c       	adc	r15, r1
 7f6:	c0 e0       	ldi	r28, 0x00	; 0
 7f8:	d0 e0       	ldi	r29, 0x00	; 0
 7fa:	06 2f       	mov	r16, r22
 7fc:	10 e0       	ldi	r17, 0x00	; 0
 7fe:	b8 01       	movw	r22, r16
 800:	0c 2e       	mov	r0, r28
 802:	02 c0       	rjmp	.+4      	; 0x808 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
 804:	75 95       	asr	r23
 806:	67 95       	ror	r22
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <_ZN13LiquidCrystal10write4bitsEh+0x28>
 80c:	61 70       	andi	r22, 0x01	; 1
 80e:	f7 01       	movw	r30, r14
 810:	81 91       	ld	r24, Z+
 812:	7f 01       	movw	r14, r30
 814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 818:	21 96       	adiw	r28, 0x01	; 1
 81a:	c4 30       	cpi	r28, 0x04	; 4
 81c:	d1 05       	cpc	r29, r1
 81e:	79 f7       	brne	.-34     	; 0x7fe <_ZN13LiquidCrystal10write4bitsEh+0x22>
 820:	c6 01       	movw	r24, r12
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_ZN13LiquidCrystal11pulseEnableEv>

00000836 <_ZN13LiquidCrystal10write8bitsEh>:
 836:	cf 92       	push	r12
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	6c 01       	movw	r12, r24
 848:	7c 01       	movw	r14, r24
 84a:	87 e0       	ldi	r24, 0x07	; 7
 84c:	e8 0e       	add	r14, r24
 84e:	f1 1c       	adc	r15, r1
 850:	c0 e0       	ldi	r28, 0x00	; 0
 852:	d0 e0       	ldi	r29, 0x00	; 0
 854:	06 2f       	mov	r16, r22
 856:	10 e0       	ldi	r17, 0x00	; 0
 858:	b8 01       	movw	r22, r16
 85a:	0c 2e       	mov	r0, r28
 85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
 85e:	75 95       	asr	r23
 860:	67 95       	ror	r22
 862:	0a 94       	dec	r0
 864:	e2 f7       	brpl	.-8      	; 0x85e <_ZN13LiquidCrystal10write8bitsEh+0x28>
 866:	61 70       	andi	r22, 0x01	; 1
 868:	f7 01       	movw	r30, r14
 86a:	81 91       	ld	r24, Z+
 86c:	7f 01       	movw	r14, r30
 86e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 872:	21 96       	adiw	r28, 0x01	; 1
 874:	c8 30       	cpi	r28, 0x08	; 8
 876:	d1 05       	cpc	r29, r1
 878:	79 f7       	brne	.-34     	; 0x858 <_ZN13LiquidCrystal10write8bitsEh+0x22>
 87a:	c6 01       	movw	r24, r12
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	df 90       	pop	r13
 88a:	cf 90       	pop	r12
 88c:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_ZN13LiquidCrystal11pulseEnableEv>

00000890 <_ZN13LiquidCrystal4sendEhh>:
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	ec 01       	movw	r28, r24
 898:	16 2f       	mov	r17, r22
 89a:	64 2f       	mov	r22, r20
 89c:	8c 81       	ldd	r24, Y+4	; 0x04
 89e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 8a2:	8d 81       	ldd	r24, Y+5	; 0x05
 8a4:	8f 3f       	cpi	r24, 0xFF	; 255
 8a6:	19 f0       	breq	.+6      	; 0x8ae <_ZN13LiquidCrystal4sendEhh+0x1e>
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 8ae:	8f 85       	ldd	r24, Y+15	; 0x0f
 8b0:	61 2f       	mov	r22, r17
 8b2:	84 ff       	sbrs	r24, 4
 8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <_ZN13LiquidCrystal4sendEhh+0x32>
 8b6:	ce 01       	movw	r24, r28
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
 8be:	0c 94 1b 04 	jmp	0x836	; 0x836 <_ZN13LiquidCrystal10write8bitsEh>
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	84 e0       	ldi	r24, 0x04	; 4
 8c6:	75 95       	asr	r23
 8c8:	67 95       	ror	r22
 8ca:	8a 95       	dec	r24
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <_ZN13LiquidCrystal4sendEhh+0x36>
 8ce:	ce 01       	movw	r24, r28
 8d0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>
 8d4:	61 2f       	mov	r22, r17
 8d6:	ce 01       	movw	r24, r28
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>

000008e2 <_ZN13LiquidCrystal7commandEh>:
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	0c 94 48 04 	jmp	0x890	; 0x890 <_ZN13LiquidCrystal4sendEhh>

000008e8 <_ZN13LiquidCrystal5clearEv>:
 8e8:	61 e0       	ldi	r22, 0x01	; 1
 8ea:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>
 8ee:	80 ed       	ldi	r24, 0xD0	; 208
 8f0:	97 e0       	ldi	r25, 0x07	; 7
 8f2:	0c 94 b1 02 	jmp	0x562	; 0x562 <delayMicroseconds>

000008f6 <_ZN13LiquidCrystal9setCursorEhh>:
 8f6:	fc 01       	movw	r30, r24
 8f8:	44 30       	cpi	r20, 0x04	; 4
 8fa:	08 f0       	brcs	.+2      	; 0x8fe <_ZN13LiquidCrystal9setCursorEhh+0x8>
 8fc:	43 e0       	ldi	r20, 0x03	; 3
 8fe:	83 89       	ldd	r24, Z+19	; 0x13
 900:	48 17       	cp	r20, r24
 902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0x9>
 904:	4f ef       	ldi	r20, 0xFF	; 255
 906:	48 0f       	add	r20, r24
 908:	df 01       	movw	r26, r30
 90a:	a4 0f       	add	r26, r20
 90c:	b1 1d       	adc	r27, r1
 90e:	54 96       	adiw	r26, 0x14	; 20
 910:	9c 91       	ld	r25, X
 912:	69 0f       	add	r22, r25
 914:	60 68       	ori	r22, 0x80	; 128
 916:	cf 01       	movw	r24, r30
 918:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>

0000091c <_ZN13LiquidCrystal7displayEv>:
 91c:	fc 01       	movw	r30, r24
 91e:	60 89       	ldd	r22, Z+16	; 0x10
 920:	26 2f       	mov	r18, r22
 922:	24 60       	ori	r18, 0x04	; 4
 924:	20 8b       	std	Z+16, r18	; 0x10
 926:	6c 60       	ori	r22, 0x0C	; 12
 928:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>

0000092c <_ZN13LiquidCrystal5beginEhhh>:
 92c:	ef 92       	push	r14
 92e:	ff 92       	push	r15
 930:	0f 93       	push	r16
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	ec 01       	movw	r28, r24
 93a:	42 30       	cpi	r20, 0x02	; 2
 93c:	18 f0       	brcs	.+6      	; 0x944 <_ZN13LiquidCrystal5beginEhhh+0x18>
 93e:	8f 85       	ldd	r24, Y+15	; 0x0f
 940:	88 60       	ori	r24, 0x08	; 8
 942:	8f 87       	std	Y+15, r24	; 0x0f
 944:	4b 8b       	std	Y+19, r20	; 0x13
 946:	1c 8a       	std	Y+20, r1	; 0x14
 948:	80 e4       	ldi	r24, 0x40	; 64
 94a:	8d 8b       	std	Y+21, r24	; 0x15
 94c:	6e 8b       	std	Y+22, r22	; 0x16
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	60 5c       	subi	r22, 0xC0	; 192
 952:	7f 4f       	sbci	r23, 0xFF	; 255
 954:	6f 8b       	std	Y+23, r22	; 0x17
 956:	22 23       	and	r18, r18
 958:	29 f0       	breq	.+10     	; 0x964 <_ZN13LiquidCrystal5beginEhhh+0x38>
 95a:	41 30       	cpi	r20, 0x01	; 1
 95c:	19 f4       	brne	.+6      	; 0x964 <_ZN13LiquidCrystal5beginEhhh+0x38>
 95e:	8f 85       	ldd	r24, Y+15	; 0x0f
 960:	84 60       	ori	r24, 0x04	; 4
 962:	8f 87       	std	Y+15, r24	; 0x0f
 964:	61 e0       	ldi	r22, 0x01	; 1
 966:	8c 81       	ldd	r24, Y+4	; 0x04
 968:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
 96c:	8d 81       	ldd	r24, Y+5	; 0x05
 96e:	8f 3f       	cpi	r24, 0xFF	; 255
 970:	19 f0       	breq	.+6      	; 0x978 <_ZN13LiquidCrystal5beginEhhh+0x4c>
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
 978:	61 e0       	ldi	r22, 0x01	; 1
 97a:	8e 81       	ldd	r24, Y+6	; 0x06
 97c:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
 980:	7e 01       	movw	r14, r28
 982:	87 e0       	ldi	r24, 0x07	; 7
 984:	e8 0e       	add	r14, r24
 986:	f1 1c       	adc	r15, r1
 988:	00 e0       	ldi	r16, 0x00	; 0
 98a:	10 e0       	ldi	r17, 0x00	; 0
 98c:	8f 85       	ldd	r24, Y+15	; 0x0f
 98e:	84 fd       	sbrc	r24, 4
 990:	03 c0       	rjmp	.+6      	; 0x998 <_ZN13LiquidCrystal5beginEhhh+0x6c>
 992:	84 e0       	ldi	r24, 0x04	; 4
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <_ZN13LiquidCrystal5beginEhhh+0x70>
 998:	88 e0       	ldi	r24, 0x08	; 8
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	08 17       	cp	r16, r24
 99e:	19 07       	cpc	r17, r25
 9a0:	4c f4       	brge	.+18     	; 0x9b4 <_ZN13LiquidCrystal5beginEhhh+0x88>
 9a2:	61 e0       	ldi	r22, 0x01	; 1
 9a4:	f7 01       	movw	r30, r14
 9a6:	81 91       	ld	r24, Z+
 9a8:	7f 01       	movw	r14, r30
 9aa:	0e 94 3d 03 	call	0x67a	; 0x67a <pinMode>
 9ae:	0f 5f       	subi	r16, 0xFF	; 255
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	ec cf       	rjmp	.-40     	; 0x98c <_ZN13LiquidCrystal5beginEhhh+0x60>
 9b4:	80 e5       	ldi	r24, 0x50	; 80
 9b6:	93 ec       	ldi	r25, 0xC3	; 195
 9b8:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	8c 81       	ldd	r24, Y+4	; 0x04
 9c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	8e 81       	ldd	r24, Y+6	; 0x06
 9c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 9cc:	8d 81       	ldd	r24, Y+5	; 0x05
 9ce:	8f 3f       	cpi	r24, 0xFF	; 255
 9d0:	19 f0       	breq	.+6      	; 0x9d8 <_ZN13LiquidCrystal5beginEhhh+0xac>
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <digitalWrite>
 9d8:	6f 85       	ldd	r22, Y+15	; 0x0f
 9da:	64 fd       	sbrc	r22, 4
 9dc:	1d c0       	rjmp	.+58     	; 0xa18 <_ZN13LiquidCrystal5beginEhhh+0xec>
 9de:	63 e0       	ldi	r22, 0x03	; 3
 9e0:	ce 01       	movw	r24, r28
 9e2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>
 9e6:	84 e9       	ldi	r24, 0x94	; 148
 9e8:	91 e1       	ldi	r25, 0x11	; 17
 9ea:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 9ee:	63 e0       	ldi	r22, 0x03	; 3
 9f0:	ce 01       	movw	r24, r28
 9f2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>
 9f6:	84 e9       	ldi	r24, 0x94	; 148
 9f8:	91 e1       	ldi	r25, 0x11	; 17
 9fa:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 9fe:	63 e0       	ldi	r22, 0x03	; 3
 a00:	ce 01       	movw	r24, r28
 a02:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>
 a06:	86 e9       	ldi	r24, 0x96	; 150
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	ce 01       	movw	r24, r28
 a12:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN13LiquidCrystal10write4bitsEh>
 a16:	16 c0       	rjmp	.+44     	; 0xa44 <_ZN13LiquidCrystal5beginEhhh+0x118>
 a18:	60 62       	ori	r22, 0x20	; 32
 a1a:	ce 01       	movw	r24, r28
 a1c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>
 a20:	84 e9       	ldi	r24, 0x94	; 148
 a22:	91 e1       	ldi	r25, 0x11	; 17
 a24:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 a28:	6f 85       	ldd	r22, Y+15	; 0x0f
 a2a:	60 62       	ori	r22, 0x20	; 32
 a2c:	ce 01       	movw	r24, r28
 a2e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>
 a32:	86 e9       	ldi	r24, 0x96	; 150
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 b1 02 	call	0x562	; 0x562 <delayMicroseconds>
 a3a:	6f 85       	ldd	r22, Y+15	; 0x0f
 a3c:	60 62       	ori	r22, 0x20	; 32
 a3e:	ce 01       	movw	r24, r28
 a40:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>
 a44:	6f 85       	ldd	r22, Y+15	; 0x0f
 a46:	60 62       	ori	r22, 0x20	; 32
 a48:	ce 01       	movw	r24, r28
 a4a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>
 a4e:	84 e0       	ldi	r24, 0x04	; 4
 a50:	88 8b       	std	Y+16, r24	; 0x10
 a52:	ce 01       	movw	r24, r28
 a54:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN13LiquidCrystal7displayEv>
 a58:	ce 01       	movw	r24, r28
 a5a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN13LiquidCrystal5clearEv>
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	89 8b       	std	Y+17, r24	; 0x11
 a62:	66 e0       	ldi	r22, 0x06	; 6
 a64:	ce 01       	movw	r24, r28
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	1f 91       	pop	r17
 a6c:	0f 91       	pop	r16
 a6e:	ff 90       	pop	r15
 a70:	ef 90       	pop	r14
 a72:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_ZN13LiquidCrystal7commandEh>

00000a76 <_ZN13LiquidCrystalC1Ehhhhhh>:
 a76:	cf 92       	push	r12
 a78:	ef 92       	push	r14
 a7a:	0f 93       	push	r16
 a7c:	fc 01       	movw	r30, r24
 a7e:	13 82       	std	Z+3, r1	; 0x03
 a80:	12 82       	std	Z+2, r1	; 0x02
 a82:	84 e1       	ldi	r24, 0x14	; 20
 a84:	91 e0       	ldi	r25, 0x01	; 1
 a86:	91 83       	std	Z+1, r25	; 0x01
 a88:	80 83       	st	Z, r24
 a8a:	64 83       	std	Z+4, r22	; 0x04
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	85 83       	std	Z+5, r24	; 0x05
 a90:	46 83       	std	Z+6, r20	; 0x06
 a92:	27 83       	std	Z+7, r18	; 0x07
 a94:	00 87       	std	Z+8, r16	; 0x08
 a96:	e1 86       	std	Z+9, r14	; 0x09
 a98:	c2 86       	std	Z+10, r12	; 0x0a
 a9a:	13 86       	std	Z+11, r1	; 0x0b
 a9c:	14 86       	std	Z+12, r1	; 0x0c
 a9e:	15 86       	std	Z+13, r1	; 0x0d
 aa0:	16 86       	std	Z+14, r1	; 0x0e
 aa2:	17 86       	std	Z+15, r1	; 0x0f
 aa4:	20 e0       	ldi	r18, 0x00	; 0
 aa6:	41 e0       	ldi	r20, 0x01	; 1
 aa8:	60 e1       	ldi	r22, 0x10	; 16
 aaa:	cf 01       	movw	r24, r30
 aac:	0f 91       	pop	r16
 aae:	ef 90       	pop	r14
 ab0:	cf 90       	pop	r12
 ab2:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN13LiquidCrystal5beginEhhh>

00000ab6 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 ab6:	41 e0       	ldi	r20, 0x01	; 1
 ab8:	0e 94 48 04 	call	0x890	; 0x890 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	08 95       	ret

00000ac2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ac2:	08 95       	ret

00000ac4 <__udivmodsi4>:
 ac4:	a1 e2       	ldi	r26, 0x21	; 33
 ac6:	1a 2e       	mov	r1, r26
 ac8:	aa 1b       	sub	r26, r26
 aca:	bb 1b       	sub	r27, r27
 acc:	fd 01       	movw	r30, r26
 ace:	0d c0       	rjmp	.+26     	; 0xaea <__udivmodsi4_ep>

00000ad0 <__udivmodsi4_loop>:
 ad0:	aa 1f       	adc	r26, r26
 ad2:	bb 1f       	adc	r27, r27
 ad4:	ee 1f       	adc	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	a2 17       	cp	r26, r18
 ada:	b3 07       	cpc	r27, r19
 adc:	e4 07       	cpc	r30, r20
 ade:	f5 07       	cpc	r31, r21
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__udivmodsi4_ep>
 ae2:	a2 1b       	sub	r26, r18
 ae4:	b3 0b       	sbc	r27, r19
 ae6:	e4 0b       	sbc	r30, r20
 ae8:	f5 0b       	sbc	r31, r21

00000aea <__udivmodsi4_ep>:
 aea:	66 1f       	adc	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	1a 94       	dec	r1
 af4:	69 f7       	brne	.-38     	; 0xad0 <__udivmodsi4_loop>
 af6:	60 95       	com	r22
 af8:	70 95       	com	r23
 afa:	80 95       	com	r24
 afc:	90 95       	com	r25
 afe:	9b 01       	movw	r18, r22
 b00:	ac 01       	movw	r20, r24
 b02:	bd 01       	movw	r22, r26
 b04:	cf 01       	movw	r24, r30
 b06:	08 95       	ret

00000b08 <__tablejump2__>:
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	05 90       	lpm	r0, Z+
 b0e:	f4 91       	lpm	r31, Z
 b10:	e0 2d       	mov	r30, r0
 b12:	09 94       	ijmp

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
