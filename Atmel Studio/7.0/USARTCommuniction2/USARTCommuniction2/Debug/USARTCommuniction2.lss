
USARTCommuniction2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e9  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073d  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000081  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8e:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <USART_send>:

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <USART_send+0x4>
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	08 95       	ret

000000be <USART_putstring>:
	
}

void USART_putstring(char* StringPtr){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <USART_putstring+0x18>
  ca:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
  cc:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
  d0:	89 91       	ld	r24, Y+
  d2:	81 11       	cpse	r24, r1
  d4:	fb cf       	rjmp	.-10     	; 0xcc <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:

char String[]=" Noyakhali Bivag Chay!!";    //String[] is in fact an array but when we put the text between the " " symbols the compiler threats it as a String and automatically puts the null termination character in the end of the text

int main(void){
	USART_init();        //Call the USART initialization code
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	
	while(1){        //Infinite loop
		USART_putstring(String);    //Pass the string to the USART_putstring function and sends it over the serial
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	84 e3       	ldi	r24, 0x34	; 52
  ec:	9c e0       	ldi	r25, 0x0C	; 12
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x12>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x1c>
  f8:	00 00       	nop
  fa:	f2 cf       	rjmp	.-28     	; 0xe0 <main+0x4>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
