
AttinyLightBlinkPushButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000042  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000096  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c1  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000350  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a5  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
*/
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRB |= (1<<PB0); //Makes first pin of PORTC as Output
  22:	b8 9a       	sbi	0x17, 0	; 23
	//DDRB &= ~(1<<PB0);
	//DDRB = 0x01;
	DDRB &= ~(1<<PINB2);//Makes firs pin of PORTD as Input
  24:	ba 98       	cbi	0x17, 2	; 23
	//DDRB = 0b00000001; //Makes all pins of PORTD input
	while(1) //infinite loop
	{
		if(PINB & (1<<PB2)) //If switch is pressed
  26:	b2 9b       	sbis	0x16, 2	; 22
  28:	08 c0       	rjmp	.+16     	; 0x3a <main+0x18>
		
		{
			PORTB |= (1<<PINB2); //Turns ON LED
  2a:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  2c:	87 ea       	ldi	r24, 0xA7	; 167
  2e:	91 e6       	ldi	r25, 0x61	; 97
  30:	01 97       	sbiw	r24, 0x01	; 1
  32:	f1 f7       	brne	.-4      	; 0x30 <main+0xe>
  34:	00 c0       	rjmp	.+0      	; 0x36 <main+0x14>
  36:	00 00       	nop
  38:	f6 cf       	rjmp	.-20     	; 0x26 <main+0x4>
			//_delay_ms(500);
			//PORTB &= ~(1<<PB0);
		}
		else
		{
			PORTB &= ~(1<<PB0);
  3a:	c0 98       	cbi	0x18, 0	; 24
  3c:	f4 cf       	rjmp	.-24     	; 0x26 <main+0x4>

0000003e <_exit>:
  3e:	f8 94       	cli

00000040 <__stop_program>:
  40:	ff cf       	rjmp	.-2      	; 0x40 <__stop_program>
