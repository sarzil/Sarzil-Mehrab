
AdcUsartSendDataToVMscreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000222  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ca  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cb  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
    }
unsigned char USART_receive(void)
    {
		while(!(UCSR0A & (1<<RXC0)));
		return UDR0;
    }
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <USART_send>:
void USART_send( unsigned char data)
    {
		while(!(UCSR0A & (1<<UDRE0)));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <USART_send+0x4>
		UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	08 95       	ret

000000be <USART_putstring>:
    }
void USART_putstring(char* StringPtr)
    {
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
		while(*StringPtr != 0x00){
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <USART_putstring+0x18>
  ca:	21 96       	adiw	r28, 0x01	; 1
			USART_send(*StringPtr);
  cc:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = data;
    }
void USART_putstring(char* StringPtr)
    {
		while(*StringPtr != 0x00){
  d0:	89 91       	ld	r24, Y+
  d2:	81 11       	cpse	r24, r1
  d4:	fb cf       	rjmp	.-10     	; 0xcc <USART_putstring+0xe>
			USART_send(*StringPtr);
		StringPtr++;}
	}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:
	
int main(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x6>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0x8>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	USART_init();
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	// USART_send( unsigned char data);
	uint16_t adc_value;
	DDRB =0xff;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	ADMUX=(1<<REFS0)|(0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);  // ref is enabled and ADC0 is selected for Mux 0000
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADSC);
  f6:	87 ec       	ldi	r24, 0xC7	; 199
  f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	while (1)
	{	
		ADCSRA|=(1<<ADSC); //start conversion
  fc:	0a e7       	ldi	r16, 0x7A	; 122
  fe:	10 e0       	ldi	r17, 0x00	; 0
		while(ADCSRA &(1<<ADSC))
		adc_value=ADC;
 100:	0f 2e       	mov	r0, r31
 102:	f8 e7       	ldi	r31, 0x78	; 120
 104:	cf 2e       	mov	r12, r31
 106:	d1 2c       	mov	r13, r1
 108:	f0 2d       	mov	r31, r0
			_delay_ms(500);
						
		}
		else
		{
			PORTB=0b00000100;
 10a:	68 94       	set
 10c:	aa 24       	eor	r10, r10
 10e:	a2 f8       	bld	r10, 2
			_delay_ms(500);
 			
		}
		else if((adc_value>300)&&(adc_value<=500))
		{
			PORTB=0b00000010;
 110:	68 94       	set
 112:	bb 24       	eor	r11, r11
 114:	b1 f8       	bld	r11, 1
		
			
		if (adc_value<=300)
		
		{
			PORTB=0b00000001;
 116:	99 24       	eor	r9, r9
 118:	93 94       	inc	r9
	ADMUX=(1<<REFS0)|(0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3);  // ref is enabled and ADC0 is selected for Mux 0000
	ADCSRA=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADSC);

	while (1)
	{	
		ADCSRA|=(1<<ADSC); //start conversion
 11a:	f8 01       	movw	r30, r16
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
		while(ADCSRA &(1<<ADSC))
 122:	80 81       	ld	r24, Z
 124:	86 ff       	sbrs	r24, 6
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0x5a>
		adc_value=ADC;
 128:	f6 01       	movw	r30, r12
 12a:	e0 80       	ld	r14, Z
 12c:	f1 80       	ldd	r15, Z+1	; 0x01
	ADCSRA=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADSC);

	while (1)
	{	
		ADCSRA|=(1<<ADSC); //start conversion
		while(ADCSRA &(1<<ADSC))
 12e:	f8 01       	movw	r30, r16
 130:	80 81       	ld	r24, Z
 132:	86 fd       	sbrc	r24, 6
 134:	f9 cf       	rjmp	.-14     	; 0x128 <main+0x4c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	c7 01       	movw	r24, r14
 140:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__utoa_ncheck>
		adc_value=ADC;
		//uint16_t x=adc_value;
		char xx[4];
		utoa(adc_value,xx,10);
		USART_putstring("Value:");
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
		USART_putstring(xx);
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
				
		
			
		if (adc_value<=300)
 154:	fd e2       	ldi	r31, 0x2D	; 45
 156:	ef 16       	cp	r14, r31
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	ff 06       	cpc	r15, r31
 15c:	78 f4       	brcc	.+30     	; 0x17c <main+0xa0>
		
		{
			PORTB=0b00000001;
 15e:	95 b8       	out	0x05, r9	; 5
			USART_putstring("LOW");
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	9c e0       	ldi	r25, 0x0C	; 12
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x92>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x9c>
 178:	00 00       	nop
 17a:	23 c0       	rjmp	.+70     	; 0x1c2 <main+0xe6>
			_delay_ms(500);
 			
		}
		else if((adc_value>300)&&(adc_value<=500))
 17c:	c7 01       	movw	r24, r14
 17e:	8d 52       	subi	r24, 0x2D	; 45
 180:	91 40       	sbci	r25, 0x01	; 1
 182:	88 3c       	cpi	r24, 0xC8	; 200
 184:	91 05       	cpc	r25, r1
 186:	78 f4       	brcc	.+30     	; 0x1a6 <main+0xca>
		{
			PORTB=0b00000010;
 188:	b5 b8       	out	0x05, r11	; 5
			USART_putstring("MID");
 18a:	8b e0       	ldi	r24, 0x0B	; 11
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
 192:	ef ef       	ldi	r30, 0xFF	; 255
 194:	f4 e3       	ldi	r31, 0x34	; 52
 196:	2c e0       	ldi	r18, 0x0C	; 12
 198:	e1 50       	subi	r30, 0x01	; 1
 19a:	f0 40       	sbci	r31, 0x00	; 0
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0xbc>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xc6>
 1a2:	00 00       	nop
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <main+0xe6>
			_delay_ms(500);
						
		}
		else
		{
			PORTB=0b00000100;
 1a6:	a5 b8       	out	0x05, r10	; 5
			USART_putstring("HIGH");
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	94 e3       	ldi	r25, 0x34	; 52
 1b4:	ec e0       	ldi	r30, 0x0C	; 12
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e0 40       	sbci	r30, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0xda>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0xe4>
 1c0:	00 00       	nop
			_delay_ms(500);
			
		}
		
		USART_send('\r');
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
		
		
	}
 1c8:	a8 cf       	rjmp	.-176    	; 0x11a <main+0x3e>

000001ca <__utoa_ncheck>:
 1ca:	bb 27       	eor	r27, r27

000001cc <__utoa_common>:
 1cc:	fb 01       	movw	r30, r22
 1ce:	55 27       	eor	r21, r21
 1d0:	aa 27       	eor	r26, r26
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	aa 1f       	adc	r26, r26
 1d8:	a4 17       	cp	r26, r20
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <__utoa_common+0x14>
 1dc:	a4 1b       	sub	r26, r20
 1de:	83 95       	inc	r24
 1e0:	50 51       	subi	r21, 0x10	; 16
 1e2:	b9 f7       	brne	.-18     	; 0x1d2 <__utoa_common+0x6>
 1e4:	a0 5d       	subi	r26, 0xD0	; 208
 1e6:	aa 33       	cpi	r26, 0x3A	; 58
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <__utoa_common+0x20>
 1ea:	a9 5d       	subi	r26, 0xD9	; 217
 1ec:	a1 93       	st	Z+, r26
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	79 f7       	brne	.-34     	; 0x1d0 <__utoa_common+0x4>
 1f2:	b1 11       	cpse	r27, r1
 1f4:	b1 93       	st	Z+, r27
 1f6:	11 92       	st	Z+, r1
 1f8:	cb 01       	movw	r24, r22
 1fa:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <strrev>

000001fe <strrev>:
 1fe:	dc 01       	movw	r26, r24
 200:	fc 01       	movw	r30, r24
 202:	67 2f       	mov	r22, r23
 204:	71 91       	ld	r23, Z+
 206:	77 23       	and	r23, r23
 208:	e1 f7       	brne	.-8      	; 0x202 <strrev+0x4>
 20a:	32 97       	sbiw	r30, 0x02	; 2
 20c:	04 c0       	rjmp	.+8      	; 0x216 <strrev+0x18>
 20e:	7c 91       	ld	r23, X
 210:	6d 93       	st	X+, r22
 212:	70 83       	st	Z, r23
 214:	62 91       	ld	r22, -Z
 216:	ae 17       	cp	r26, r30
 218:	bf 07       	cpc	r27, r31
 21a:	c8 f3       	brcs	.-14     	; 0x20e <strrev+0x10>
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
