
AttinyLightBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000046  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000009a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000009a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c1  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000350  00000000  00000000  000004e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000291  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<PB0); //Nakes first pin of PORTC as Output
  22:	b8 9a       	sbi	0x17, 0	; 23
	//DDRB = 0x01;
	DDRB &= ~(1<<PINB2);//Makes firs pin of PORTD as Input
  24:	ba 98       	cbi	0x17, 2	; 23



	while(1) //infinite loop
	{
		if(PINB & (1<<PINB2)) //If switch is pressed
  26:	b2 9b       	sbis	0x16, 2	; 22
  28:	fe cf       	rjmp	.-4      	; 0x26 <main+0x4>
		{

			PINB |= (1<<PINB2); //Turns ON LED
  2a:	b2 9a       	sbi	0x16, 2	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  2c:	2f e9       	ldi	r18, 0x9F	; 159
  2e:	86 e8       	ldi	r24, 0x86	; 134
  30:	91 e0       	ldi	r25, 0x01	; 1
  32:	21 50       	subi	r18, 0x01	; 1
  34:	80 40       	sbci	r24, 0x00	; 0
  36:	90 40       	sbci	r25, 0x00	; 0
  38:	e1 f7       	brne	.-8      	; 0x32 <main+0x10>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <main+0x1a>
  3c:	00 00       	nop
			_delay_ms(500); //3 second delay
			PORTB &= ~(1<<PB0); //Turns OFF LED
  3e:	c0 98       	cbi	0x18, 0	; 24
  40:	f2 cf       	rjmp	.-28     	; 0x26 <main+0x4>

00000042 <_exit>:
  42:	f8 94       	cli

00000044 <__stop_program>:
  44:	ff cf       	rjmp	.-2      	; 0x44 <__stop_program>
