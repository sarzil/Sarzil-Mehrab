
UsartDataSend1to100.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000873  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077b  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011a  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_uart>:
#define BAUD 19200
#define MYUBRR    F_CPU/16/BAUD-1

void init_uart(unsigned short uValue  ){
	// setting the baud rate
	UBRR0H =(unsigned char)  ( uValue>> 8);  // 0x00
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =(unsigned char) uValue;  // 0x0C
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// enabling TX & RX
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
	UCSR0A = (1<<UDRE0);
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C =  (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stop
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9a:	08 95       	ret

0000009c <main>:
// return UDR0;
// }


int main ()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	64 97       	sbiw	r28, 0x14	; 20
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61




	init_uart(MYUBRR);
  b0:	83 e3       	ldi	r24, 0x33	; 51
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 40 00 	call	0x80	; 0x80 <init_uart>

	DDRD |= (1<< PD7);
  b8:	57 9a       	sbi	0x0a, 7	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	5c 01       	movw	r10, r24
  c0:	7e 01       	movw	r14, r28
  c2:	95 e1       	ldi	r25, 0x15	; 21
  c4:	e9 0e       	add	r14, r25
  c6:	f1 1c       	adc	r15, r1

			for (int j=0; j<20;j++)
			{
				//printf(buffer);
				PORTD ^= (1<< PD7);
				UDR0 = buffer[j];
  c8:	06 ec       	ldi	r16, 0xC6	; 198
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	8a 2c       	mov	r8, r10
  ce:	9b 2c       	mov	r9, r11
	init_uart(MYUBRR);

	DDRD |= (1<< PD7);
	for(;;){

		for (int i=100; i>=0; i--)
  d0:	0f 2e       	mov	r0, r31
  d2:	f4 e6       	ldi	r31, 0x64	; 100
  d4:	cf 2e       	mov	r12, r31
  d6:	d1 2c       	mov	r13, r1
  d8:	f0 2d       	mov	r31, r0
  da:	4a e0       	ldi	r20, 0x0A	; 10
  dc:	68 2d       	mov	r22, r8
  de:	79 2d       	mov	r23, r9
  e0:	c6 01       	movw	r24, r12
  e2:	0e 94 88 00 	call	0x110	; 0x110 <__itoa_ncheck>
  e6:	f5 01       	movw	r30, r10
			itoa (i,buffer,10);

			for (int j=0; j<20;j++)
			{
				//printf(buffer);
				PORTD ^= (1<< PD7);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 58       	subi	r24, 0x80	; 128
  ec:	8b b9       	out	0x0b, r24	; 11
				UDR0 = buffer[j];
  ee:	81 91       	ld	r24, Z+
  f0:	d8 01       	movw	r26, r16
  f2:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e1       	ldi	r24, 0x1F	; 31
  f6:	9e e4       	ldi	r25, 0x4E	; 78
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x5c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x62>
  fe:	00 00       	nop
		for (int i=100; i>=0; i--)
		{
			char buffer [20];
			itoa (i,buffer,10);

			for (int j=0; j<20;j++)
 100:	ee 15       	cp	r30, r14
 102:	ff 05       	cpc	r31, r15
 104:	89 f7       	brne	.-30     	; 0xe8 <main+0x4c>
	init_uart(MYUBRR);

	DDRD |= (1<< PD7);
	for(;;){

		for (int i=100; i>=0; i--)
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	c9 1a       	sub	r12, r25
 10a:	d1 08       	sbc	r13, r1
 10c:	30 f7       	brcc	.-52     	; 0xda <main+0x3e>
 10e:	e0 cf       	rjmp	.-64     	; 0xd0 <main+0x34>

00000110 <__itoa_ncheck>:
 110:	bb 27       	eor	r27, r27
 112:	4a 30       	cpi	r20, 0x0A	; 10
 114:	31 f4       	brne	.+12     	; 0x122 <__itoa_ncheck+0x12>
 116:	99 23       	and	r25, r25
 118:	22 f4       	brpl	.+8      	; 0x122 <__itoa_ncheck+0x12>
 11a:	bd e2       	ldi	r27, 0x2D	; 45
 11c:	90 95       	com	r25
 11e:	81 95       	neg	r24
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	0c 94 94 00 	jmp	0x128	; 0x128 <__utoa_common>

00000126 <__utoa_ncheck>:
 126:	bb 27       	eor	r27, r27

00000128 <__utoa_common>:
 128:	fb 01       	movw	r30, r22
 12a:	55 27       	eor	r21, r21
 12c:	aa 27       	eor	r26, r26
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	aa 1f       	adc	r26, r26
 134:	a4 17       	cp	r26, r20
 136:	10 f0       	brcs	.+4      	; 0x13c <__utoa_common+0x14>
 138:	a4 1b       	sub	r26, r20
 13a:	83 95       	inc	r24
 13c:	50 51       	subi	r21, 0x10	; 16
 13e:	b9 f7       	brne	.-18     	; 0x12e <__utoa_common+0x6>
 140:	a0 5d       	subi	r26, 0xD0	; 208
 142:	aa 33       	cpi	r26, 0x3A	; 58
 144:	08 f0       	brcs	.+2      	; 0x148 <__utoa_common+0x20>
 146:	a9 5d       	subi	r26, 0xD9	; 217
 148:	a1 93       	st	Z+, r26
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	79 f7       	brne	.-34     	; 0x12c <__utoa_common+0x4>
 14e:	b1 11       	cpse	r27, r1
 150:	b1 93       	st	Z+, r27
 152:	11 92       	st	Z+, r1
 154:	cb 01       	movw	r24, r22
 156:	0c 94 ad 00 	jmp	0x15a	; 0x15a <strrev>

0000015a <strrev>:
 15a:	dc 01       	movw	r26, r24
 15c:	fc 01       	movw	r30, r24
 15e:	67 2f       	mov	r22, r23
 160:	71 91       	ld	r23, Z+
 162:	77 23       	and	r23, r23
 164:	e1 f7       	brne	.-8      	; 0x15e <strrev+0x4>
 166:	32 97       	sbiw	r30, 0x02	; 2
 168:	04 c0       	rjmp	.+8      	; 0x172 <strrev+0x18>
 16a:	7c 91       	ld	r23, X
 16c:	6d 93       	st	X+, r22
 16e:	70 83       	st	Z, r23
 170:	62 91       	ld	r22, -Z
 172:	ae 17       	cp	r26, r30
 174:	bf 07       	cpc	r27, r31
 176:	c8 f3       	brcs	.-14     	; 0x16a <strrev+0x10>
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
