
bcdDecoderswitchingBlinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b1  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#define F_CPU 8000000
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	int i=0;
	int seg_code[]={0,1,2,3,4,5,6,7,8,9};
  96:	84 e1       	ldi	r24, 0x14	; 20
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
		int dig_code=0b00000001;
    DDRB = 0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  ac:	84 bb       	out	0x14, r24	; 20
  ae:	ae 01       	movw	r20, r28
  b0:	4b 5e       	subi	r20, 0xEB	; 235
  b2:	5f 4f       	sbci	r21, 0xFF	; 255
    while (1) 
    {
		for(i=0;i<=9;i++)
		{
		
		PORTC=0x01;
  b4:	21 e0       	ldi	r18, 0x01	; 1
		PORTB=seg_code[i];
		_delay_ms(80);
		PORTC=0x02;
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	fe 01       	movw	r30, r28
  ba:	31 96       	adiw	r30, 0x01	; 1
    while (1) 
    {
		for(i=0;i<=9;i++)
		{
		
		PORTC=0x01;
  bc:	25 bb       	out	0x15, r18	; 21
		PORTB=seg_code[i];
  be:	80 81       	ld	r24, Z
  c0:	32 96       	adiw	r30, 0x02	; 2
  c2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	3f ef       	ldi	r19, 0xFF	; 255
  c6:	63 ef       	ldi	r22, 0xF3	; 243
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	31 50       	subi	r19, 0x01	; 1
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x48>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x52>
  d4:	00 00       	nop
		_delay_ms(80);
		PORTC=0x02;
  d6:	95 bb       	out	0x15, r25	; 21
		PORTB=seg_code[dig_code];
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	88 bb       	out	0x18, r24	; 24
  dc:	3f ef       	ldi	r19, 0xFF	; 255
  de:	63 ef       	ldi	r22, 0xF3	; 243
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	31 50       	subi	r19, 0x01	; 1
  e4:	60 40       	sbci	r22, 0x00	; 0
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x60>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6a>
  ec:	00 00       	nop
		int dig_code=0b00000001;
    DDRB = 0xff;
	DDRC = 0xff;
    while (1) 
    {
		for(i=0;i<=9;i++)
  ee:	e4 17       	cp	r30, r20
  f0:	f5 07       	cpc	r31, r21
  f2:	21 f7       	brne	.-56     	; 0xbc <main+0x3a>
  f4:	e1 cf       	rjmp	.-62     	; 0xb8 <main+0x36>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
