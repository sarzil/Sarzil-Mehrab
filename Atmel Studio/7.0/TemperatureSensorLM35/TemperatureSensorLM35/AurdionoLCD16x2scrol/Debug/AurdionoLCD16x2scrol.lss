
AurdionoLCD16x2scrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000ed8  00000f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800134  00800134  00000fa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073d5  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017ef  00000000  00000000  00008685  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169f  00000000  00000000  00009e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0000b514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eec  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002644  00000000  00000000  0000db60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_18>
  4c:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	3b 03       	fmul	r19, r19

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 ed       	ldi	r30, 0xD8	; 216
  7e:	fe e0       	ldi	r31, 0x0E	; 14
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a4 33       	cpi	r26, 0x34	; 52
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a4 e3       	ldi	r26, 0x34	; 52
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a0 3e       	cpi	r26, 0xE0	; 224
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 64 07 	call	0xec8	; 0xec8 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
  b6:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  be:	26 e0       	ldi	r18, 0x06	; 6
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	55 e2       	ldi	r21, 0x25	; 37
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8a e3       	ldi	r24, 0x3A	; 58
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_ZN14HardwareSerial5beginEmh>

000000d0 <loop>:
	Serial.begin(9600);
}

void loop()
{
	temp = analogRead(tempPin);
  d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
  d4:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <analogRead>
	temp= temp*4828828125;
  d8:	bc 01       	movw	r22, r24
  da:	99 0f       	add	r25, r25
  dc:	88 0b       	sbc	r24, r24
  de:	99 0b       	sbc	r25, r25
  e0:	0e 94 a6 00 	call	0x14c	; 0x14c <__floatsisf>
  e4:	29 e0       	ldi	r18, 0x09	; 9
  e6:	39 ee       	ldi	r19, 0xE9	; 233
  e8:	4f e8       	ldi	r20, 0x8F	; 143
  ea:	5f e4       	ldi	r21, 0x4F	; 79
  ec:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__mulsf3>
  f0:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <temp>
  f4:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <temp+0x1>
  f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <temp+0x2>
  fc:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <temp+0x3>
	Serial.print("TEMPARATURE =");
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	71 e0       	ldi	r23, 0x01	; 1
 104:	8a e3       	ldi	r24, 0x3A	; 58
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN5Print5printEPKc>
	Serial.print(temp);
 10c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <temp>
 110:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <temp+0x1>
 114:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <temp+0x2>
 118:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <temp+0x3>
 11c:	22 e0       	ldi	r18, 0x02	; 2
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	8a e3       	ldi	r24, 0x3A	; 58
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN5Print5printEdi>
	Serial.print(" *C");
 128:	6f e0       	ldi	r22, 0x0F	; 15
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	8a e3       	ldi	r24, 0x3A	; 58
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN5Print5printEPKc>
	Serial.println();
 134:	8a e3       	ldi	r24, 0x3A	; 58
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
	delay(1000);
 13c:	68 ee       	ldi	r22, 0xE8	; 232
 13e:	73 e0       	ldi	r23, 0x03	; 3
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <delay>

00000148 <__floatunsisf>:
 148:	e8 94       	clt
 14a:	09 c0       	rjmp	.+18     	; 0x15e <__floatsisf+0x12>

0000014c <__floatsisf>:
 14c:	97 fb       	bst	r25, 7
 14e:	3e f4       	brtc	.+14     	; 0x15e <__floatsisf+0x12>
 150:	90 95       	com	r25
 152:	80 95       	com	r24
 154:	70 95       	com	r23
 156:	61 95       	neg	r22
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	8f 4f       	sbci	r24, 0xFF	; 255
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	99 23       	and	r25, r25
 160:	a9 f0       	breq	.+42     	; 0x18c <__floatsisf+0x40>
 162:	f9 2f       	mov	r31, r25
 164:	96 e9       	ldi	r25, 0x96	; 150
 166:	bb 27       	eor	r27, r27
 168:	93 95       	inc	r25
 16a:	f6 95       	lsr	r31
 16c:	87 95       	ror	r24
 16e:	77 95       	ror	r23
 170:	67 95       	ror	r22
 172:	b7 95       	ror	r27
 174:	f1 11       	cpse	r31, r1
 176:	f8 cf       	rjmp	.-16     	; 0x168 <__floatsisf+0x1c>
 178:	fa f4       	brpl	.+62     	; 0x1b8 <__floatsisf+0x6c>
 17a:	bb 0f       	add	r27, r27
 17c:	11 f4       	brne	.+4      	; 0x182 <__floatsisf+0x36>
 17e:	60 ff       	sbrs	r22, 0
 180:	1b c0       	rjmp	.+54     	; 0x1b8 <__floatsisf+0x6c>
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	8f 4f       	sbci	r24, 0xFF	; 255
 188:	9f 4f       	sbci	r25, 0xFF	; 255
 18a:	16 c0       	rjmp	.+44     	; 0x1b8 <__floatsisf+0x6c>
 18c:	88 23       	and	r24, r24
 18e:	11 f0       	breq	.+4      	; 0x194 <__floatsisf+0x48>
 190:	96 e9       	ldi	r25, 0x96	; 150
 192:	11 c0       	rjmp	.+34     	; 0x1b6 <__floatsisf+0x6a>
 194:	77 23       	and	r23, r23
 196:	21 f0       	breq	.+8      	; 0x1a0 <__floatsisf+0x54>
 198:	9e e8       	ldi	r25, 0x8E	; 142
 19a:	87 2f       	mov	r24, r23
 19c:	76 2f       	mov	r23, r22
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <__floatsisf+0x5e>
 1a0:	66 23       	and	r22, r22
 1a2:	71 f0       	breq	.+28     	; 0x1c0 <__floatsisf+0x74>
 1a4:	96 e8       	ldi	r25, 0x86	; 134
 1a6:	86 2f       	mov	r24, r22
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	2a f0       	brmi	.+10     	; 0x1b8 <__floatsisf+0x6c>
 1ae:	9a 95       	dec	r25
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	88 1f       	adc	r24, r24
 1b6:	da f7       	brpl	.-10     	; 0x1ae <__floatsisf+0x62>
 1b8:	88 0f       	add	r24, r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	97 f9       	bld	r25, 7
 1c0:	08 95       	ret

000001c2 <__mulsf3>:
 1c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__mulsf3x>
 1c6:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__fp_round>
 1ca:	0e 94 57 01 	call	0x2ae	; 0x2ae <__fp_pscA>
 1ce:	38 f0       	brcs	.+14     	; 0x1de <__mulsf3+0x1c>
 1d0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fp_pscB>
 1d4:	20 f0       	brcs	.+8      	; 0x1de <__mulsf3+0x1c>
 1d6:	95 23       	and	r25, r21
 1d8:	11 f0       	breq	.+4      	; 0x1de <__mulsf3+0x1c>
 1da:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__fp_inf>
 1de:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_nan>
 1e2:	11 24       	eor	r1, r1
 1e4:	0c 94 99 01 	jmp	0x332	; 0x332 <__fp_szero>

000001e8 <__mulsf3x>:
 1e8:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fp_split3>
 1ec:	70 f3       	brcs	.-36     	; 0x1ca <__mulsf3+0x8>

000001ee <__mulsf3_pse>:
 1ee:	95 9f       	mul	r25, r21
 1f0:	c1 f3       	breq	.-16     	; 0x1e2 <__mulsf3+0x20>
 1f2:	95 0f       	add	r25, r21
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	55 1f       	adc	r21, r21
 1f8:	62 9f       	mul	r22, r18
 1fa:	f0 01       	movw	r30, r0
 1fc:	72 9f       	mul	r23, r18
 1fe:	bb 27       	eor	r27, r27
 200:	f0 0d       	add	r31, r0
 202:	b1 1d       	adc	r27, r1
 204:	63 9f       	mul	r22, r19
 206:	aa 27       	eor	r26, r26
 208:	f0 0d       	add	r31, r0
 20a:	b1 1d       	adc	r27, r1
 20c:	aa 1f       	adc	r26, r26
 20e:	64 9f       	mul	r22, r20
 210:	66 27       	eor	r22, r22
 212:	b0 0d       	add	r27, r0
 214:	a1 1d       	adc	r26, r1
 216:	66 1f       	adc	r22, r22
 218:	82 9f       	mul	r24, r18
 21a:	22 27       	eor	r18, r18
 21c:	b0 0d       	add	r27, r0
 21e:	a1 1d       	adc	r26, r1
 220:	62 1f       	adc	r22, r18
 222:	73 9f       	mul	r23, r19
 224:	b0 0d       	add	r27, r0
 226:	a1 1d       	adc	r26, r1
 228:	62 1f       	adc	r22, r18
 22a:	83 9f       	mul	r24, r19
 22c:	a0 0d       	add	r26, r0
 22e:	61 1d       	adc	r22, r1
 230:	22 1f       	adc	r18, r18
 232:	74 9f       	mul	r23, r20
 234:	33 27       	eor	r19, r19
 236:	a0 0d       	add	r26, r0
 238:	61 1d       	adc	r22, r1
 23a:	23 1f       	adc	r18, r19
 23c:	84 9f       	mul	r24, r20
 23e:	60 0d       	add	r22, r0
 240:	21 1d       	adc	r18, r1
 242:	82 2f       	mov	r24, r18
 244:	76 2f       	mov	r23, r22
 246:	6a 2f       	mov	r22, r26
 248:	11 24       	eor	r1, r1
 24a:	9f 57       	subi	r25, 0x7F	; 127
 24c:	50 40       	sbci	r21, 0x00	; 0
 24e:	9a f0       	brmi	.+38     	; 0x276 <__mulsf3_pse+0x88>
 250:	f1 f0       	breq	.+60     	; 0x28e <__mulsf3_pse+0xa0>
 252:	88 23       	and	r24, r24
 254:	4a f0       	brmi	.+18     	; 0x268 <__mulsf3_pse+0x7a>
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	bb 1f       	adc	r27, r27
 25c:	66 1f       	adc	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	88 1f       	adc	r24, r24
 262:	91 50       	subi	r25, 0x01	; 1
 264:	50 40       	sbci	r21, 0x00	; 0
 266:	a9 f7       	brne	.-22     	; 0x252 <__mulsf3_pse+0x64>
 268:	9e 3f       	cpi	r25, 0xFE	; 254
 26a:	51 05       	cpc	r21, r1
 26c:	80 f0       	brcs	.+32     	; 0x28e <__mulsf3_pse+0xa0>
 26e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__fp_inf>
 272:	0c 94 99 01 	jmp	0x332	; 0x332 <__fp_szero>
 276:	5f 3f       	cpi	r21, 0xFF	; 255
 278:	e4 f3       	brlt	.-8      	; 0x272 <__mulsf3_pse+0x84>
 27a:	98 3e       	cpi	r25, 0xE8	; 232
 27c:	d4 f3       	brlt	.-12     	; 0x272 <__mulsf3_pse+0x84>
 27e:	86 95       	lsr	r24
 280:	77 95       	ror	r23
 282:	67 95       	ror	r22
 284:	b7 95       	ror	r27
 286:	f7 95       	ror	r31
 288:	e7 95       	ror	r30
 28a:	9f 5f       	subi	r25, 0xFF	; 255
 28c:	c1 f7       	brne	.-16     	; 0x27e <__mulsf3_pse+0x90>
 28e:	fe 2b       	or	r31, r30
 290:	88 0f       	add	r24, r24
 292:	91 1d       	adc	r25, r1
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	97 f9       	bld	r25, 7
 29a:	08 95       	ret

0000029c <__fp_inf>:
 29c:	97 f9       	bld	r25, 7
 29e:	9f 67       	ori	r25, 0x7F	; 127
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	08 95       	ret

000002a8 <__fp_nan>:
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
 2aa:	80 ec       	ldi	r24, 0xC0	; 192
 2ac:	08 95       	ret

000002ae <__fp_pscA>:
 2ae:	00 24       	eor	r0, r0
 2b0:	0a 94       	dec	r0
 2b2:	16 16       	cp	r1, r22
 2b4:	17 06       	cpc	r1, r23
 2b6:	18 06       	cpc	r1, r24
 2b8:	09 06       	cpc	r0, r25
 2ba:	08 95       	ret

000002bc <__fp_pscB>:
 2bc:	00 24       	eor	r0, r0
 2be:	0a 94       	dec	r0
 2c0:	12 16       	cp	r1, r18
 2c2:	13 06       	cpc	r1, r19
 2c4:	14 06       	cpc	r1, r20
 2c6:	05 06       	cpc	r0, r21
 2c8:	08 95       	ret

000002ca <__fp_round>:
 2ca:	09 2e       	mov	r0, r25
 2cc:	03 94       	inc	r0
 2ce:	00 0c       	add	r0, r0
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <__fp_round+0xc>
 2d2:	88 23       	and	r24, r24
 2d4:	52 f0       	brmi	.+20     	; 0x2ea <__fp_round+0x20>
 2d6:	bb 0f       	add	r27, r27
 2d8:	40 f4       	brcc	.+16     	; 0x2ea <__fp_round+0x20>
 2da:	bf 2b       	or	r27, r31
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <__fp_round+0x18>
 2de:	60 ff       	sbrs	r22, 0
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <__fp_round+0x20>
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__fp_split3>:
 2ec:	57 fd       	sbrc	r21, 7
 2ee:	90 58       	subi	r25, 0x80	; 128
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	59 f0       	breq	.+22     	; 0x30c <__fp_splitA+0x10>
 2f6:	5f 3f       	cpi	r21, 0xFF	; 255
 2f8:	71 f0       	breq	.+28     	; 0x316 <__fp_splitA+0x1a>
 2fa:	47 95       	ror	r20

000002fc <__fp_splitA>:
 2fc:	88 0f       	add	r24, r24
 2fe:	97 fb       	bst	r25, 7
 300:	99 1f       	adc	r25, r25
 302:	61 f0       	breq	.+24     	; 0x31c <__fp_splitA+0x20>
 304:	9f 3f       	cpi	r25, 0xFF	; 255
 306:	79 f0       	breq	.+30     	; 0x326 <__fp_splitA+0x2a>
 308:	87 95       	ror	r24
 30a:	08 95       	ret
 30c:	12 16       	cp	r1, r18
 30e:	13 06       	cpc	r1, r19
 310:	14 06       	cpc	r1, r20
 312:	55 1f       	adc	r21, r21
 314:	f2 cf       	rjmp	.-28     	; 0x2fa <__fp_split3+0xe>
 316:	46 95       	lsr	r20
 318:	f1 df       	rcall	.-30     	; 0x2fc <__fp_splitA>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__fp_splitA+0x30>
 31c:	16 16       	cp	r1, r22
 31e:	17 06       	cpc	r1, r23
 320:	18 06       	cpc	r1, r24
 322:	99 1f       	adc	r25, r25
 324:	f1 cf       	rjmp	.-30     	; 0x308 <__fp_splitA+0xc>
 326:	86 95       	lsr	r24
 328:	71 05       	cpc	r23, r1
 32a:	61 05       	cpc	r22, r1
 32c:	08 94       	sec
 32e:	08 95       	ret

00000330 <__fp_zero>:
 330:	e8 94       	clt

00000332 <__fp_szero>:
 332:	bb 27       	eor	r27, r27
 334:	66 27       	eor	r22, r22
 336:	77 27       	eor	r23, r23
 338:	cb 01       	movw	r24, r22
 33a:	97 f9       	bld	r25, 7
 33c:	08 95       	ret

0000033e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 33e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 340:	91 8d       	ldd	r25, Z+25	; 0x19
 342:	22 8d       	ldd	r18, Z+26	; 0x1a
 344:	89 2f       	mov	r24, r25
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	80 5c       	subi	r24, 0xC0	; 192
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	82 1b       	sub	r24, r18
 34e:	91 09       	sbc	r25, r1
}
 350:	8f 73       	andi	r24, 0x3F	; 63
 352:	99 27       	eor	r25, r25
 354:	08 95       	ret

00000356 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 356:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 358:	91 8d       	ldd	r25, Z+25	; 0x19
 35a:	82 8d       	ldd	r24, Z+26	; 0x1a
 35c:	98 17       	cp	r25, r24
 35e:	31 f0       	breq	.+12     	; 0x36c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 360:	82 8d       	ldd	r24, Z+26	; 0x1a
 362:	e8 0f       	add	r30, r24
 364:	f1 1d       	adc	r31, r1
 366:	85 8d       	ldd	r24, Z+29	; 0x1d
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 370:	08 95       	ret

00000372 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 372:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 374:	91 8d       	ldd	r25, Z+25	; 0x19
 376:	82 8d       	ldd	r24, Z+26	; 0x1a
 378:	98 17       	cp	r25, r24
 37a:	61 f0       	breq	.+24     	; 0x394 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 37c:	82 8d       	ldd	r24, Z+26	; 0x1a
 37e:	df 01       	movw	r26, r30
 380:	a8 0f       	add	r26, r24
 382:	b1 1d       	adc	r27, r1
 384:	5d 96       	adiw	r26, 0x1d	; 29
 386:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 388:	92 8d       	ldd	r25, Z+26	; 0x1a
 38a:	9f 5f       	subi	r25, 0xFF	; 255
 38c:	9f 73       	andi	r25, 0x3F	; 63
 38e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 398:	08 95       	ret

0000039a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 39a:	fc 01       	movw	r30, r24
 39c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 39e:	44 8d       	ldd	r20, Z+28	; 0x1c
 3a0:	25 2f       	mov	r18, r21
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	84 2f       	mov	r24, r20
 3a6:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 3a8:	82 1b       	sub	r24, r18
 3aa:	93 0b       	sbc	r25, r19
 3ac:	54 17       	cp	r21, r20
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 3b0:	cf 96       	adiw	r24, 0x3f	; 63
 3b2:	08 95       	ret
  return tail - head - 1;
 3b4:	01 97       	sbiw	r24, 0x01	; 1
}
 3b6:	08 95       	ret

000003b8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3b8:	81 e3       	ldi	r24, 0x31	; 49
 3ba:	93 e0       	ldi	r25, 0x03	; 3
 3bc:	89 2b       	or	r24, r25
 3be:	49 f0       	breq	.+18     	; 0x3d2 <_Z14serialEventRunv+0x1a>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	89 2b       	or	r24, r25
 3c6:	29 f0       	breq	.+10     	; 0x3d2 <_Z14serialEventRunv+0x1a>
 3c8:	0e 94 31 03 	call	0x662	; 0x662 <_Z17Serial0_availablev>
 3cc:	81 11       	cpse	r24, r1
 3ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3d2:	08 95       	ret

000003d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3d6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3d8:	df 01       	movw	r26, r30
 3da:	a8 0f       	add	r26, r24
 3dc:	b1 1d       	adc	r27, r1
 3de:	a3 5a       	subi	r26, 0xA3	; 163
 3e0:	bf 4f       	sbci	r27, 0xFF	; 255
 3e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3e4:	84 8d       	ldd	r24, Z+28	; 0x1c
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	8f 73       	andi	r24, 0x3F	; 63
 3ec:	99 27       	eor	r25, r25
 3ee:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3f0:	a6 89       	ldd	r26, Z+22	; 0x16
 3f2:	b7 89       	ldd	r27, Z+23	; 0x17
 3f4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3f6:	a0 89       	ldd	r26, Z+16	; 0x10
 3f8:	b1 89       	ldd	r27, Z+17	; 0x11
 3fa:	8c 91       	ld	r24, X
 3fc:	80 64       	ori	r24, 0x40	; 64
 3fe:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 400:	93 8d       	ldd	r25, Z+27	; 0x1b
 402:	84 8d       	ldd	r24, Z+28	; 0x1c
 404:	98 13       	cpse	r25, r24
 406:	06 c0       	rjmp	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 408:	02 88       	ldd	r0, Z+18	; 0x12
 40a:	f3 89       	ldd	r31, Z+19	; 0x13
 40c:	e0 2d       	mov	r30, r0
 40e:	80 81       	ld	r24, Z
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
  _written = true;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 428:	9b 8d       	ldd	r25, Y+27	; 0x1b
 42a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 42c:	98 13       	cpse	r25, r24
 42e:	05 c0       	rjmp	.+10     	; 0x43a <_ZN14HardwareSerial5writeEh+0x24>
 430:	e8 89       	ldd	r30, Y+16	; 0x10
 432:	f9 89       	ldd	r31, Y+17	; 0x11
 434:	80 81       	ld	r24, Z
 436:	85 fd       	sbrc	r24, 5
 438:	24 c0       	rjmp	.+72     	; 0x482 <_ZN14HardwareSerial5writeEh+0x6c>
 43a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 43c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	0f 73       	andi	r16, 0x3F	; 63
 446:	11 27       	eor	r17, r17
 448:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 44a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 44c:	e8 12       	cpse	r14, r24
 44e:	0c c0       	rjmp	.+24     	; 0x468 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	07 fc       	sbrc	r0, 7
 454:	fa cf       	rjmp	.-12     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 456:	e8 89       	ldd	r30, Y+16	; 0x10
 458:	f9 89       	ldd	r31, Y+17	; 0x11
 45a:	80 81       	ld	r24, Z
 45c:	85 ff       	sbrs	r24, 5
 45e:	f5 cf       	rjmp	.-22     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 460:	ce 01       	movw	r24, r28
 462:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 466:	f1 cf       	rjmp	.-30     	; 0x44a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 468:	8b 8d       	ldd	r24, Y+27	; 0x1b
 46a:	fe 01       	movw	r30, r28
 46c:	e8 0f       	add	r30, r24
 46e:	f1 1d       	adc	r31, r1
 470:	e3 5a       	subi	r30, 0xA3	; 163
 472:	ff 4f       	sbci	r31, 0xFF	; 255
 474:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 476:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 478:	ea 89       	ldd	r30, Y+18	; 0x12
 47a:	fb 89       	ldd	r31, Y+19	; 0x13
 47c:	80 81       	ld	r24, Z
 47e:	80 62       	ori	r24, 0x20	; 32
 480:	07 c0       	rjmp	.+14     	; 0x490 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 482:	ee 89       	ldd	r30, Y+22	; 0x16
 484:	ff 89       	ldd	r31, Y+23	; 0x17
 486:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 488:	e8 89       	ldd	r30, Y+16	; 0x10
 48a:	f9 89       	ldd	r31, Y+17	; 0x11
 48c:	80 81       	ld	r24, Z
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4aa:	88 8d       	ldd	r24, Y+24	; 0x18
 4ac:	88 23       	and	r24, r24
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4b0:	ea 89       	ldd	r30, Y+18	; 0x12
 4b2:	fb 89       	ldd	r31, Y+19	; 0x13
 4b4:	80 81       	ld	r24, Z
 4b6:	85 fd       	sbrc	r24, 5
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x20>
 4ba:	a8 89       	ldd	r26, Y+16	; 0x10
 4bc:	b9 89       	ldd	r27, Y+17	; 0x11
 4be:	8c 91       	ld	r24, X
 4c0:	86 fd       	sbrc	r24, 6
 4c2:	0f c0       	rjmp	.+30     	; 0x4e2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	07 fc       	sbrc	r0, 7
 4c8:	f5 cf       	rjmp	.-22     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x10>
 4ca:	80 81       	ld	r24, Z
 4cc:	85 ff       	sbrs	r24, 5
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4d0:	a8 89       	ldd	r26, Y+16	; 0x10
 4d2:	b9 89       	ldd	r27, Y+17	; 0x11
 4d4:	8c 91       	ld	r24, X
 4d6:	85 ff       	sbrs	r24, 5
 4d8:	ed cf       	rjmp	.-38     	; 0x4b4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4e0:	e7 cf       	rjmp	.-50     	; 0x4b0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	6a 01       	movw	r12, r20
 4fa:	7b 01       	movw	r14, r22
 4fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4fe:	e8 89       	ldd	r30, Y+16	; 0x10
 500:	f9 89       	ldd	r31, Y+17	; 0x11
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 506:	41 15       	cp	r20, r1
 508:	51 4e       	sbci	r21, 0xE1	; 225
 50a:	61 05       	cpc	r22, r1
 50c:	71 05       	cpc	r23, r1
 50e:	b1 f0       	breq	.+44     	; 0x53c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	79 e0       	ldi	r23, 0x09	; 9
 514:	8d e3       	ldi	r24, 0x3D	; 61
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	a7 01       	movw	r20, r14
 51a:	96 01       	movw	r18, r12
 51c:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
 520:	da 01       	movw	r26, r20
 522:	c9 01       	movw	r24, r18
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	a1 09       	sbc	r26, r1
 528:	b1 09       	sbc	r27, r1
 52a:	b6 95       	lsr	r27
 52c:	a7 95       	ror	r26
 52e:	97 95       	ror	r25
 530:	87 95       	ror	r24
 532:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 534:	21 15       	cp	r18, r1
 536:	80 e1       	ldi	r24, 0x10	; 16
 538:	38 07       	cpc	r19, r24
 53a:	a8 f0       	brcs	.+42     	; 0x566 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 53c:	e8 89       	ldd	r30, Y+16	; 0x10
 53e:	f9 89       	ldd	r31, Y+17	; 0x11
 540:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 542:	60 e8       	ldi	r22, 0x80	; 128
 544:	74 e8       	ldi	r23, 0x84	; 132
 546:	8e e1       	ldi	r24, 0x1E	; 30
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	a7 01       	movw	r20, r14
 54c:	96 01       	movw	r18, r12
 54e:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
 552:	da 01       	movw	r26, r20
 554:	c9 01       	movw	r24, r18
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	a1 09       	sbc	r26, r1
 55a:	b1 09       	sbc	r27, r1
 55c:	b6 95       	lsr	r27
 55e:	a7 95       	ror	r26
 560:	97 95       	ror	r25
 562:	87 95       	ror	r24
 564:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 566:	ec 85       	ldd	r30, Y+12	; 0x0c
 568:	fd 85       	ldd	r31, Y+13	; 0x0d
 56a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 56c:	ee 85       	ldd	r30, Y+14	; 0x0e
 56e:	ff 85       	ldd	r31, Y+15	; 0x0f
 570:	20 83       	st	Z, r18

  _written = false;
 572:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 574:	ec 89       	ldd	r30, Y+20	; 0x14
 576:	fd 89       	ldd	r31, Y+21	; 0x15
 578:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 57a:	ea 89       	ldd	r30, Y+18	; 0x12
 57c:	fb 89       	ldd	r31, Y+19	; 0x13
 57e:	80 81       	ld	r24, Z
 580:	80 61       	ori	r24, 0x10	; 16
 582:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 584:	ea 89       	ldd	r30, Y+18	; 0x12
 586:	fb 89       	ldd	r31, Y+19	; 0x13
 588:	80 81       	ld	r24, Z
 58a:	88 60       	ori	r24, 0x08	; 8
 58c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 58e:	ea 89       	ldd	r30, Y+18	; 0x12
 590:	fb 89       	ldd	r31, Y+19	; 0x13
 592:	80 81       	ld	r24, Z
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 598:	ea 89       	ldd	r30, Y+18	; 0x12
 59a:	fb 89       	ldd	r31, Y+19	; 0x13
 59c:	80 81       	ld	r24, Z
 59e:	8f 7d       	andi	r24, 0xDF	; 223
 5a0:	80 83       	st	Z, r24
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	df 90       	pop	r13
 5ae:	cf 90       	pop	r12
 5b0:	08 95       	ret

000005b2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5c6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Serial+0x10>
 5ca:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Serial+0x11>
 5ce:	80 81       	ld	r24, Z
 5d0:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x16>
 5d4:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x17>
 5d8:	82 fd       	sbrc	r24, 2
 5da:	12 c0       	rjmp	.+36     	; 0x600 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5dc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5de:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Serial+0x19>
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5e6:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <Serial+0x1a>
 5ea:	82 17       	cp	r24, r18
 5ec:	51 f0       	breq	.+20     	; 0x602 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5ee:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Serial+0x19>
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	e6 5c       	subi	r30, 0xC6	; 198
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5fa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Serial+0x19>
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 600:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 638:	8a e3       	ldi	r24, 0x3A	; 58
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 662:	8a e3       	ldi	r24, 0x3A	; 58
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN14HardwareSerial9availableEv>
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	89 2b       	or	r24, r25
 66e:	09 f4       	brne	.+2      	; 0x672 <_Z17Serial0_availablev+0x10>
 670:	20 e0       	ldi	r18, 0x00	; 0
}
 672:	82 2f       	mov	r24, r18
 674:	08 95       	ret

00000676 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 676:	ea e3       	ldi	r30, 0x3A	; 58
 678:	f1 e0       	ldi	r31, 0x01	; 1
 67a:	13 82       	std	Z+3, r1	; 0x03
 67c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 67e:	88 ee       	ldi	r24, 0xE8	; 232
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	a0 e0       	ldi	r26, 0x00	; 0
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	84 83       	std	Z+4, r24	; 0x04
 688:	95 83       	std	Z+5, r25	; 0x05
 68a:	a6 83       	std	Z+6, r26	; 0x06
 68c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 68e:	87 e1       	ldi	r24, 0x17	; 23
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	91 83       	std	Z+1, r25	; 0x01
 694:	80 83       	st	Z, r24
 696:	85 ec       	ldi	r24, 0xC5	; 197
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	95 87       	std	Z+13, r25	; 0x0d
 69c:	84 87       	std	Z+12, r24	; 0x0c
 69e:	84 ec       	ldi	r24, 0xC4	; 196
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	97 87       	std	Z+15, r25	; 0x0f
 6a4:	86 87       	std	Z+14, r24	; 0x0e
 6a6:	80 ec       	ldi	r24, 0xC0	; 192
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	91 8b       	std	Z+17, r25	; 0x11
 6ac:	80 8b       	std	Z+16, r24	; 0x10
 6ae:	81 ec       	ldi	r24, 0xC1	; 193
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	93 8b       	std	Z+19, r25	; 0x13
 6b4:	82 8b       	std	Z+18, r24	; 0x12
 6b6:	82 ec       	ldi	r24, 0xC2	; 194
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	95 8b       	std	Z+21, r25	; 0x15
 6bc:	84 8b       	std	Z+20, r24	; 0x14
 6be:	86 ec       	ldi	r24, 0xC6	; 198
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	97 8b       	std	Z+23, r25	; 0x17
 6c4:	86 8b       	std	Z+22, r24	; 0x16
 6c6:	11 8e       	std	Z+25, r1	; 0x19
 6c8:	12 8e       	std	Z+26, r1	; 0x1a
 6ca:	13 8e       	std	Z+27, r1	; 0x1b
 6cc:	14 8e       	std	Z+28, r1	; 0x1c
 6ce:	08 95       	ret

000006d0 <initVariant>:
 6d0:	08 95       	ret

000006d2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6d2:	0e 94 a8 05 	call	0xb50	; 0xb50 <init>

	initVariant();
 6d6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6da:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6de:	cc ed       	ldi	r28, 0xDC	; 220
 6e0:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6e2:	0e 94 68 00 	call	0xd0	; 0xd0 <loop>
		if (serialEventRun) serialEventRun();
 6e6:	20 97       	sbiw	r28, 0x00	; 0
 6e8:	e1 f3       	breq	.-8      	; 0x6e2 <main+0x10>
 6ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z14serialEventRunv>
 6ee:	f9 cf       	rjmp	.-14     	; 0x6e2 <main+0x10>

000006f0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 6f0:	cf 92       	push	r12
 6f2:	df 92       	push	r13
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	6c 01       	movw	r12, r24
 702:	7a 01       	movw	r14, r20
 704:	8b 01       	movw	r16, r22
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	d0 e0       	ldi	r29, 0x00	; 0
 70a:	ce 15       	cp	r28, r14
 70c:	df 05       	cpc	r29, r15
 70e:	81 f0       	breq	.+32     	; 0x730 <_ZN5Print5writeEPKhj+0x40>
 710:	d8 01       	movw	r26, r16
 712:	6d 91       	ld	r22, X+
 714:	8d 01       	movw	r16, r26
 716:	d6 01       	movw	r26, r12
 718:	ed 91       	ld	r30, X+
 71a:	fc 91       	ld	r31, X
 71c:	01 90       	ld	r0, Z+
 71e:	f0 81       	ld	r31, Z
 720:	e0 2d       	mov	r30, r0
 722:	c6 01       	movw	r24, r12
 724:	09 95       	icall
 726:	89 2b       	or	r24, r25
 728:	11 f0       	breq	.+4      	; 0x72e <_ZN5Print5writeEPKhj+0x3e>
 72a:	21 96       	adiw	r28, 0x01	; 1
 72c:	ee cf       	rjmp	.-36     	; 0x70a <_ZN5Print5writeEPKhj+0x1a>
 72e:	7e 01       	movw	r14, r28
 730:	c7 01       	movw	r24, r14
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	08 95       	ret

00000744 <_ZN5Print5writeEPKc>:
 744:	61 15       	cp	r22, r1
 746:	71 05       	cpc	r23, r1
 748:	79 f0       	breq	.+30     	; 0x768 <_ZN5Print5writeEPKc+0x24>
 74a:	fb 01       	movw	r30, r22
 74c:	01 90       	ld	r0, Z+
 74e:	00 20       	and	r0, r0
 750:	e9 f7       	brne	.-6      	; 0x74c <_ZN5Print5writeEPKc+0x8>
 752:	31 97       	sbiw	r30, 0x01	; 1
 754:	af 01       	movw	r20, r30
 756:	46 1b       	sub	r20, r22
 758:	57 0b       	sbc	r21, r23
 75a:	dc 01       	movw	r26, r24
 75c:	ed 91       	ld	r30, X+
 75e:	fc 91       	ld	r31, X
 760:	02 80       	ldd	r0, Z+2	; 0x02
 762:	f3 81       	ldd	r31, Z+3	; 0x03
 764:	e0 2d       	mov	r30, r0
 766:	09 94       	ijmp
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret

0000076e <_ZN5Print5printEPKc>:
 76e:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN5Print5writeEPKc>

00000772 <_ZN5Print5printEc>:
 772:	dc 01       	movw	r26, r24
 774:	ed 91       	ld	r30, X+
 776:	fc 91       	ld	r31, X
 778:	01 90       	ld	r0, Z+
 77a:	f0 81       	ld	r31, Z
 77c:	e0 2d       	mov	r30, r0
 77e:	09 94       	ijmp

00000780 <_ZN5Print7printlnEv>:
 780:	65 e2       	ldi	r22, 0x25	; 37
 782:	71 e0       	ldi	r23, 0x01	; 1
 784:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN5Print5writeEPKc>

00000788 <_ZN5Print11printNumberEmh>:
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	a1 97       	sbiw	r28, 0x21	; 33
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	7c 01       	movw	r14, r24
 7ae:	fa 01       	movw	r30, r20
 7b0:	cb 01       	movw	r24, r22
 7b2:	19 a2       	std	Y+33, r1	; 0x21
 7b4:	22 30       	cpi	r18, 0x02	; 2
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <_ZN5Print11printNumberEmh+0x32>
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	8e 01       	movw	r16, r28
 7bc:	0f 5d       	subi	r16, 0xDF	; 223
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	82 2e       	mov	r8, r18
 7c2:	91 2c       	mov	r9, r1
 7c4:	a1 2c       	mov	r10, r1
 7c6:	b1 2c       	mov	r11, r1
 7c8:	bf 01       	movw	r22, r30
 7ca:	a5 01       	movw	r20, r10
 7cc:	94 01       	movw	r18, r8
 7ce:	0e 94 42 07 	call	0xe84	; 0xe84 <__udivmodsi4>
 7d2:	f9 01       	movw	r30, r18
 7d4:	ca 01       	movw	r24, r20
 7d6:	01 50       	subi	r16, 0x01	; 1
 7d8:	11 09       	sbc	r17, r1
 7da:	6a 30       	cpi	r22, 0x0A	; 10
 7dc:	10 f4       	brcc	.+4      	; 0x7e2 <_ZN5Print11printNumberEmh+0x5a>
 7de:	60 5d       	subi	r22, 0xD0	; 208
 7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <_ZN5Print11printNumberEmh+0x5c>
 7e2:	69 5c       	subi	r22, 0xC9	; 201
 7e4:	d8 01       	movw	r26, r16
 7e6:	6c 93       	st	X, r22
 7e8:	23 2b       	or	r18, r19
 7ea:	24 2b       	or	r18, r20
 7ec:	25 2b       	or	r18, r21
 7ee:	61 f7       	brne	.-40     	; 0x7c8 <_ZN5Print11printNumberEmh+0x40>
 7f0:	b8 01       	movw	r22, r16
 7f2:	c7 01       	movw	r24, r14
 7f4:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN5Print5writeEPKc>
 7f8:	a1 96       	adiw	r28, 0x21	; 33
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	ff 90       	pop	r15
 80e:	ef 90       	pop	r14
 810:	bf 90       	pop	r11
 812:	af 90       	pop	r10
 814:	9f 90       	pop	r9
 816:	8f 90       	pop	r8
 818:	08 95       	ret

0000081a <_ZN5Print5printEmi>:
 81a:	21 15       	cp	r18, r1
 81c:	31 05       	cpc	r19, r1
 81e:	41 f4       	brne	.+16     	; 0x830 <_ZN5Print5printEmi+0x16>
 820:	dc 01       	movw	r26, r24
 822:	ed 91       	ld	r30, X+
 824:	fc 91       	ld	r31, X
 826:	01 90       	ld	r0, Z+
 828:	f0 81       	ld	r31, Z
 82a:	e0 2d       	mov	r30, r0
 82c:	64 2f       	mov	r22, r20
 82e:	09 94       	ijmp
 830:	0c 94 c4 03 	jmp	0x788	; 0x788 <_ZN5Print11printNumberEmh>

00000834 <_ZN5Print5printEji>:
 834:	9a 01       	movw	r18, r20
 836:	ab 01       	movw	r20, r22
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_ZN5Print5printEmi>

00000840 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
 840:	7f 92       	push	r7
 842:	8f 92       	push	r8
 844:	9f 92       	push	r9
 846:	af 92       	push	r10
 848:	bf 92       	push	r11
 84a:	cf 92       	push	r12
 84c:	df 92       	push	r13
 84e:	ef 92       	push	r14
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	8c 01       	movw	r16, r24
 85c:	6a 01       	movw	r12, r20
 85e:	7b 01       	movw	r14, r22
 860:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
 862:	9a 01       	movw	r18, r20
 864:	ab 01       	movw	r20, r22
 866:	c7 01       	movw	r24, r14
 868:	b6 01       	movw	r22, r12
 86a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__unordsf2>
 86e:	88 23       	and	r24, r24
 870:	19 f0       	breq	.+6      	; 0x878 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 872:	68 e2       	ldi	r22, 0x28	; 40
 874:	71 e0       	ldi	r23, 0x01	; 1
 876:	27 c0       	rjmp	.+78     	; 0x8c6 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 878:	46 01       	movw	r8, r12
 87a:	57 01       	movw	r10, r14
 87c:	e8 94       	clt
 87e:	b7 f8       	bld	r11, 7
 880:	2f ef       	ldi	r18, 0xFF	; 255
 882:	3f ef       	ldi	r19, 0xFF	; 255
 884:	4f e7       	ldi	r20, 0x7F	; 127
 886:	5f e7       	ldi	r21, 0x7F	; 127
 888:	c5 01       	movw	r24, r10
 88a:	b4 01       	movw	r22, r8
 88c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__unordsf2>
 890:	81 11       	cpse	r24, r1
 892:	0d c0       	rjmp	.+26     	; 0x8ae <_ZN5Print10printFloatEdh+0x6e>
 894:	2f ef       	ldi	r18, 0xFF	; 255
 896:	3f ef       	ldi	r19, 0xFF	; 255
 898:	4f e7       	ldi	r20, 0x7F	; 127
 89a:	5f e7       	ldi	r21, 0x7F	; 127
 89c:	c5 01       	movw	r24, r10
 89e:	b4 01       	movw	r22, r8
 8a0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__cmpsf2>
 8a4:	18 16       	cp	r1, r24
 8a6:	1c f4       	brge	.+6      	; 0x8ae <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 8a8:	6c e2       	ldi	r22, 0x2C	; 44
 8aa:	71 e0       	ldi	r23, 0x01	; 1
 8ac:	0c c0       	rjmp	.+24     	; 0x8c6 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8ae:	2f ef       	ldi	r18, 0xFF	; 255
 8b0:	3f ef       	ldi	r19, 0xFF	; 255
 8b2:	4f e7       	ldi	r20, 0x7F	; 127
 8b4:	5f e4       	ldi	r21, 0x4F	; 79
 8b6:	c7 01       	movw	r24, r14
 8b8:	b6 01       	movw	r22, r12
 8ba:	0e 94 38 07 	call	0xe70	; 0xe70 <__gesf2>
 8be:	18 16       	cp	r1, r24
 8c0:	94 f4       	brge	.+36     	; 0x8e6 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 8c2:	60 e3       	ldi	r22, 0x30	; 48
 8c4:	71 e0       	ldi	r23, 0x01	; 1
 8c6:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	ff 90       	pop	r15
 8d2:	ef 90       	pop	r14
 8d4:	df 90       	pop	r13
 8d6:	cf 90       	pop	r12
 8d8:	bf 90       	pop	r11
 8da:	af 90       	pop	r10
 8dc:	9f 90       	pop	r9
 8de:	8f 90       	pop	r8
 8e0:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 8e2:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8e6:	2f ef       	ldi	r18, 0xFF	; 255
 8e8:	3f ef       	ldi	r19, 0xFF	; 255
 8ea:	4f e7       	ldi	r20, 0x7F	; 127
 8ec:	5f ec       	ldi	r21, 0xCF	; 207
 8ee:	c7 01       	movw	r24, r14
 8f0:	b6 01       	movw	r22, r12
 8f2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__cmpsf2>
 8f6:	87 fd       	sbrc	r24, 7
 8f8:	e4 cf       	rjmp	.-56     	; 0x8c2 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
 8fa:	20 e0       	ldi	r18, 0x00	; 0
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	a9 01       	movw	r20, r18
 900:	c7 01       	movw	r24, r14
 902:	b6 01       	movw	r22, r12
 904:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__cmpsf2>
 908:	87 ff       	sbrs	r24, 7
 90a:	0a c0       	rjmp	.+20     	; 0x920 <__stack+0x21>
  {
     n += print('-');
 90c:	6d e2       	ldi	r22, 0x2D	; 45
 90e:	c8 01       	movw	r24, r16
 910:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEc>
 914:	ec 01       	movw	r28, r24
     number = -number;
 916:	f7 fa       	bst	r15, 7
 918:	f0 94       	com	r15
 91a:	f7 f8       	bld	r15, 7
 91c:	f0 94       	com	r15
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
 920:	c0 e0       	ldi	r28, 0x00	; 0
 922:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 924:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
 92e:	7b 14       	cp	r7, r11
 930:	41 f0       	breq	.+16     	; 0x942 <__stack+0x43>
    rounding /= 10.0;
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	40 e2       	ldi	r20, 0x20	; 32
 938:	51 e4       	ldi	r21, 0x41	; 65
 93a:	0e 94 73 06 	call	0xce6	; 0xce6 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 93e:	b3 94       	inc	r11
 940:	f6 cf       	rjmp	.-20     	; 0x92e <__stack+0x2f>
    rounding /= 10.0;
  
  number += rounding;
 942:	a7 01       	movw	r20, r14
 944:	96 01       	movw	r18, r12
 946:	0e 94 02 06 	call	0xc04	; 0xc04 <__addsf3>
 94a:	6b 01       	movw	r12, r22
 94c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 94e:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
 952:	4b 01       	movw	r8, r22
 954:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 956:	2a e0       	ldi	r18, 0x0A	; 10
 958:	ab 01       	movw	r20, r22
 95a:	bc 01       	movw	r22, r24
 95c:	c8 01       	movw	r24, r16
 95e:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 962:	c8 0f       	add	r28, r24
 964:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 966:	77 20       	and	r7, r7
 968:	b9 f1       	breq	.+110    	; 0x9d8 <__stack+0xd9>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 96a:	c5 01       	movw	r24, r10
 96c:	b4 01       	movw	r22, r8
 96e:	0e 94 a4 00 	call	0x148	; 0x148 <__floatunsisf>
 972:	9b 01       	movw	r18, r22
 974:	ac 01       	movw	r20, r24
 976:	c7 01       	movw	r24, r14
 978:	b6 01       	movw	r22, r12
 97a:	0e 94 01 06 	call	0xc02	; 0xc02 <__subsf3>
 97e:	6b 01       	movw	r12, r22
 980:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
 982:	6e e2       	ldi	r22, 0x2E	; 46
 984:	c8 01       	movw	r24, r16
 986:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEc>
 98a:	c8 0f       	add	r28, r24
 98c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	40 e2       	ldi	r20, 0x20	; 32
 994:	51 e4       	ldi	r21, 0x41	; 65
 996:	c7 01       	movw	r24, r14
 998:	b6 01       	movw	r22, r12
 99a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__mulsf3>
 99e:	4b 01       	movw	r8, r22
 9a0:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
 9a2:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
 9a6:	6b 01       	movw	r12, r22
 9a8:	7c 01       	movw	r14, r24
    n += print(toPrint);
 9aa:	4a e0       	ldi	r20, 0x0A	; 10
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	c8 01       	movw	r24, r16
 9b0:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5Print5printEji>
 9b4:	c8 0f       	add	r28, r24
 9b6:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
 9b8:	b6 01       	movw	r22, r12
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 a4 00 	call	0x148	; 0x148 <__floatunsisf>
 9c2:	9b 01       	movw	r18, r22
 9c4:	ac 01       	movw	r20, r24
 9c6:	c5 01       	movw	r24, r10
 9c8:	b4 01       	movw	r22, r8
 9ca:	0e 94 01 06 	call	0xc02	; 0xc02 <__subsf3>
 9ce:	6b 01       	movw	r12, r22
 9d0:	7c 01       	movw	r14, r24
 9d2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 9d4:	71 10       	cpse	r7, r1
 9d6:	db cf       	rjmp	.-74     	; 0x98e <__stack+0x8f>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 9d8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	ff 90       	pop	r15
 9e4:	ef 90       	pop	r14
 9e6:	df 90       	pop	r13
 9e8:	cf 90       	pop	r12
 9ea:	bf 90       	pop	r11
 9ec:	af 90       	pop	r10
 9ee:	9f 90       	pop	r9
 9f0:	8f 90       	pop	r8
 9f2:	7f 90       	pop	r7
 9f4:	08 95       	ret

000009f6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 9f6:	0c 94 20 04 	jmp	0x840	; 0x840 <_ZN5Print10printFloatEdh>

000009fa <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 9fa:	1f 92       	push	r1
 9fc:	0f 92       	push	r0
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	0f 92       	push	r0
 a02:	11 24       	eor	r1, r1
 a04:	2f 93       	push	r18
 a06:	3f 93       	push	r19
 a08:	8f 93       	push	r24
 a0a:	9f 93       	push	r25
 a0c:	af 93       	push	r26
 a0e:	bf 93       	push	r27
 a10:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <timer0_millis>
 a14:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <timer0_millis+0x1>
 a18:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <timer0_millis+0x2>
 a1c:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <timer0_millis+0x3>
 a20:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <timer0_fract>
 a24:	23 e0       	ldi	r18, 0x03	; 3
 a26:	23 0f       	add	r18, r19
 a28:	2d 37       	cpi	r18, 0x7D	; 125
 a2a:	20 f4       	brcc	.+8      	; 0xa34 <__vector_16+0x3a>
 a2c:	01 96       	adiw	r24, 0x01	; 1
 a2e:	a1 1d       	adc	r26, r1
 a30:	b1 1d       	adc	r27, r1
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <__vector_16+0x44>
 a34:	26 e8       	ldi	r18, 0x86	; 134
 a36:	23 0f       	add	r18, r19
 a38:	02 96       	adiw	r24, 0x02	; 2
 a3a:	a1 1d       	adc	r26, r1
 a3c:	b1 1d       	adc	r27, r1
 a3e:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <timer0_fract>
 a42:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <timer0_millis>
 a46:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <timer0_millis+0x1>
 a4a:	a0 93 da 01 	sts	0x01DA, r26	; 0x8001da <timer0_millis+0x2>
 a4e:	b0 93 db 01 	sts	0x01DB, r27	; 0x8001db <timer0_millis+0x3>
 a52:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
 a56:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
 a5a:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
 a5e:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	a1 1d       	adc	r26, r1
 a66:	b1 1d       	adc	r27, r1
 a68:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_overflow_count>
 a6c:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_overflow_count+0x1>
 a70:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_overflow_count+0x2>
 a74:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_overflow_count+0x3>
 a78:	bf 91       	pop	r27
 a7a:	af 91       	pop	r26
 a7c:	9f 91       	pop	r25
 a7e:	8f 91       	pop	r24
 a80:	3f 91       	pop	r19
 a82:	2f 91       	pop	r18
 a84:	0f 90       	pop	r0
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	0f 90       	pop	r0
 a8a:	1f 90       	pop	r1
 a8c:	18 95       	reti

00000a8e <micros>:
 a8e:	3f b7       	in	r19, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_overflow_count>
 a96:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_overflow_count+0x1>
 a9a:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_overflow_count+0x2>
 a9e:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_overflow_count+0x3>
 aa2:	26 b5       	in	r18, 0x26	; 38
 aa4:	a8 9b       	sbis	0x15, 0	; 21
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <micros+0x24>
 aa8:	2f 3f       	cpi	r18, 0xFF	; 255
 aaa:	19 f0       	breq	.+6      	; 0xab2 <micros+0x24>
 aac:	01 96       	adiw	r24, 0x01	; 1
 aae:	a1 1d       	adc	r26, r1
 ab0:	b1 1d       	adc	r27, r1
 ab2:	3f bf       	out	0x3f, r19	; 63
 ab4:	ba 2f       	mov	r27, r26
 ab6:	a9 2f       	mov	r26, r25
 ab8:	98 2f       	mov	r25, r24
 aba:	88 27       	eor	r24, r24
 abc:	82 0f       	add	r24, r18
 abe:	91 1d       	adc	r25, r1
 ac0:	a1 1d       	adc	r26, r1
 ac2:	b1 1d       	adc	r27, r1
 ac4:	bc 01       	movw	r22, r24
 ac6:	cd 01       	movw	r24, r26
 ac8:	42 e0       	ldi	r20, 0x02	; 2
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	4a 95       	dec	r20
 ad4:	d1 f7       	brne	.-12     	; 0xaca <micros+0x3c>
 ad6:	08 95       	ret

00000ad8 <delay>:
 ad8:	8f 92       	push	r8
 ada:	9f 92       	push	r9
 adc:	af 92       	push	r10
 ade:	bf 92       	push	r11
 ae0:	cf 92       	push	r12
 ae2:	df 92       	push	r13
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	6b 01       	movw	r12, r22
 aea:	7c 01       	movw	r14, r24
 aec:	0e 94 47 05 	call	0xa8e	; 0xa8e <micros>
 af0:	4b 01       	movw	r8, r22
 af2:	5c 01       	movw	r10, r24
 af4:	c1 14       	cp	r12, r1
 af6:	d1 04       	cpc	r13, r1
 af8:	e1 04       	cpc	r14, r1
 afa:	f1 04       	cpc	r15, r1
 afc:	01 f1       	breq	.+64     	; 0xb3e <delay+0x66>
 afe:	0e 94 00 06 	call	0xc00	; 0xc00 <yield>
 b02:	0e 94 47 05 	call	0xa8e	; 0xa8e <micros>
 b06:	dc 01       	movw	r26, r24
 b08:	cb 01       	movw	r24, r22
 b0a:	88 19       	sub	r24, r8
 b0c:	99 09       	sbc	r25, r9
 b0e:	aa 09       	sbc	r26, r10
 b10:	bb 09       	sbc	r27, r11
 b12:	88 3e       	cpi	r24, 0xE8	; 232
 b14:	93 40       	sbci	r25, 0x03	; 3
 b16:	a1 05       	cpc	r26, r1
 b18:	b1 05       	cpc	r27, r1
 b1a:	60 f3       	brcs	.-40     	; 0xaf4 <delay+0x1c>
 b1c:	21 e0       	ldi	r18, 0x01	; 1
 b1e:	c2 1a       	sub	r12, r18
 b20:	d1 08       	sbc	r13, r1
 b22:	e1 08       	sbc	r14, r1
 b24:	f1 08       	sbc	r15, r1
 b26:	88 ee       	ldi	r24, 0xE8	; 232
 b28:	88 0e       	add	r8, r24
 b2a:	83 e0       	ldi	r24, 0x03	; 3
 b2c:	98 1e       	adc	r9, r24
 b2e:	a1 1c       	adc	r10, r1
 b30:	b1 1c       	adc	r11, r1
 b32:	c1 14       	cp	r12, r1
 b34:	d1 04       	cpc	r13, r1
 b36:	e1 04       	cpc	r14, r1
 b38:	f1 04       	cpc	r15, r1
 b3a:	19 f7       	brne	.-58     	; 0xb02 <delay+0x2a>
 b3c:	db cf       	rjmp	.-74     	; 0xaf4 <delay+0x1c>
 b3e:	ff 90       	pop	r15
 b40:	ef 90       	pop	r14
 b42:	df 90       	pop	r13
 b44:	cf 90       	pop	r12
 b46:	bf 90       	pop	r11
 b48:	af 90       	pop	r10
 b4a:	9f 90       	pop	r9
 b4c:	8f 90       	pop	r8
 b4e:	08 95       	ret

00000b50 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b50:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b52:	84 b5       	in	r24, 0x24	; 36
 b54:	82 60       	ori	r24, 0x02	; 2
 b56:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b58:	84 b5       	in	r24, 0x24	; 36
 b5a:	81 60       	ori	r24, 0x01	; 1
 b5c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b5e:	85 b5       	in	r24, 0x25	; 37
 b60:	82 60       	ori	r24, 0x02	; 2
 b62:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b64:	85 b5       	in	r24, 0x25	; 37
 b66:	81 60       	ori	r24, 0x01	; 1
 b68:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b6a:	ee e6       	ldi	r30, 0x6E	; 110
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	81 60       	ori	r24, 0x01	; 1
 b72:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b74:	e1 e8       	ldi	r30, 0x81	; 129
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b7a:	80 81       	ld	r24, Z
 b7c:	82 60       	ori	r24, 0x02	; 2
 b7e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b80:	80 81       	ld	r24, Z
 b82:	81 60       	ori	r24, 0x01	; 1
 b84:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b86:	e0 e8       	ldi	r30, 0x80	; 128
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	80 81       	ld	r24, Z
 b8c:	81 60       	ori	r24, 0x01	; 1
 b8e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b90:	e1 eb       	ldi	r30, 0xB1	; 177
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	80 81       	ld	r24, Z
 b96:	84 60       	ori	r24, 0x04	; 4
 b98:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b9a:	e0 eb       	ldi	r30, 0xB0	; 176
 b9c:	f0 e0       	ldi	r31, 0x00	; 0
 b9e:	80 81       	ld	r24, Z
 ba0:	81 60       	ori	r24, 0x01	; 1
 ba2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 ba4:	ea e7       	ldi	r30, 0x7A	; 122
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	84 60       	ori	r24, 0x04	; 4
 bac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 bae:	80 81       	ld	r24, Z
 bb0:	82 60       	ori	r24, 0x02	; 2
 bb2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 bb4:	80 81       	ld	r24, Z
 bb6:	81 60       	ori	r24, 0x01	; 1
 bb8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bba:	80 81       	ld	r24, Z
 bbc:	80 68       	ori	r24, 0x80	; 128
 bbe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 bc0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 bc4:	08 95       	ret

00000bc6 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 bc6:	8e 30       	cpi	r24, 0x0E	; 14
 bc8:	08 f0       	brcs	.+2      	; 0xbcc <analogRead+0x6>
 bca:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 bcc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 bd0:	90 e4       	ldi	r25, 0x40	; 64
 bd2:	29 9f       	mul	r18, r25
 bd4:	90 01       	movw	r18, r0
 bd6:	11 24       	eor	r1, r1
 bd8:	87 70       	andi	r24, 0x07	; 7
 bda:	82 2b       	or	r24, r18
 bdc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 be0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 be4:	80 64       	ori	r24, 0x40	; 64
 be6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 bea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 bee:	86 fd       	sbrc	r24, 6
 bf0:	fc cf       	rjmp	.-8      	; 0xbea <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 bf2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 bf6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 bfa:	90 e0       	ldi	r25, 0x00	; 0
}
 bfc:	92 2b       	or	r25, r18
 bfe:	08 95       	ret

00000c00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 c00:	08 95       	ret

00000c02 <__subsf3>:
 c02:	50 58       	subi	r21, 0x80	; 128

00000c04 <__addsf3>:
 c04:	bb 27       	eor	r27, r27
 c06:	aa 27       	eor	r26, r26
 c08:	0e 94 19 06 	call	0xc32	; 0xc32 <__addsf3x>
 c0c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__fp_round>
 c10:	0e 94 57 01 	call	0x2ae	; 0x2ae <__fp_pscA>
 c14:	38 f0       	brcs	.+14     	; 0xc24 <__addsf3+0x20>
 c16:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fp_pscB>
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__addsf3+0x20>
 c1c:	39 f4       	brne	.+14     	; 0xc2c <__addsf3+0x28>
 c1e:	9f 3f       	cpi	r25, 0xFF	; 255
 c20:	19 f4       	brne	.+6      	; 0xc28 <__addsf3+0x24>
 c22:	26 f4       	brtc	.+8      	; 0xc2c <__addsf3+0x28>
 c24:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_nan>
 c28:	0e f4       	brtc	.+2      	; 0xc2c <__addsf3+0x28>
 c2a:	e0 95       	com	r30
 c2c:	e7 fb       	bst	r30, 7
 c2e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__fp_inf>

00000c32 <__addsf3x>:
 c32:	e9 2f       	mov	r30, r25
 c34:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fp_split3>
 c38:	58 f3       	brcs	.-42     	; 0xc10 <__addsf3+0xc>
 c3a:	ba 17       	cp	r27, r26
 c3c:	62 07       	cpc	r22, r18
 c3e:	73 07       	cpc	r23, r19
 c40:	84 07       	cpc	r24, r20
 c42:	95 07       	cpc	r25, r21
 c44:	20 f0       	brcs	.+8      	; 0xc4e <__addsf3x+0x1c>
 c46:	79 f4       	brne	.+30     	; 0xc66 <__addsf3x+0x34>
 c48:	a6 f5       	brtc	.+104    	; 0xcb2 <__addsf3x+0x80>
 c4a:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_zero>
 c4e:	0e f4       	brtc	.+2      	; 0xc52 <__addsf3x+0x20>
 c50:	e0 95       	com	r30
 c52:	0b 2e       	mov	r0, r27
 c54:	ba 2f       	mov	r27, r26
 c56:	a0 2d       	mov	r26, r0
 c58:	0b 01       	movw	r0, r22
 c5a:	b9 01       	movw	r22, r18
 c5c:	90 01       	movw	r18, r0
 c5e:	0c 01       	movw	r0, r24
 c60:	ca 01       	movw	r24, r20
 c62:	a0 01       	movw	r20, r0
 c64:	11 24       	eor	r1, r1
 c66:	ff 27       	eor	r31, r31
 c68:	59 1b       	sub	r21, r25
 c6a:	99 f0       	breq	.+38     	; 0xc92 <__addsf3x+0x60>
 c6c:	59 3f       	cpi	r21, 0xF9	; 249
 c6e:	50 f4       	brcc	.+20     	; 0xc84 <__addsf3x+0x52>
 c70:	50 3e       	cpi	r21, 0xE0	; 224
 c72:	68 f1       	brcs	.+90     	; 0xcce <__addsf3x+0x9c>
 c74:	1a 16       	cp	r1, r26
 c76:	f0 40       	sbci	r31, 0x00	; 0
 c78:	a2 2f       	mov	r26, r18
 c7a:	23 2f       	mov	r18, r19
 c7c:	34 2f       	mov	r19, r20
 c7e:	44 27       	eor	r20, r20
 c80:	58 5f       	subi	r21, 0xF8	; 248
 c82:	f3 cf       	rjmp	.-26     	; 0xc6a <__addsf3x+0x38>
 c84:	46 95       	lsr	r20
 c86:	37 95       	ror	r19
 c88:	27 95       	ror	r18
 c8a:	a7 95       	ror	r26
 c8c:	f0 40       	sbci	r31, 0x00	; 0
 c8e:	53 95       	inc	r21
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__addsf3x+0x52>
 c92:	7e f4       	brtc	.+30     	; 0xcb2 <__addsf3x+0x80>
 c94:	1f 16       	cp	r1, r31
 c96:	ba 0b       	sbc	r27, r26
 c98:	62 0b       	sbc	r22, r18
 c9a:	73 0b       	sbc	r23, r19
 c9c:	84 0b       	sbc	r24, r20
 c9e:	ba f0       	brmi	.+46     	; 0xcce <__addsf3x+0x9c>
 ca0:	91 50       	subi	r25, 0x01	; 1
 ca2:	a1 f0       	breq	.+40     	; 0xccc <__addsf3x+0x9a>
 ca4:	ff 0f       	add	r31, r31
 ca6:	bb 1f       	adc	r27, r27
 ca8:	66 1f       	adc	r22, r22
 caa:	77 1f       	adc	r23, r23
 cac:	88 1f       	adc	r24, r24
 cae:	c2 f7       	brpl	.-16     	; 0xca0 <__addsf3x+0x6e>
 cb0:	0e c0       	rjmp	.+28     	; 0xcce <__addsf3x+0x9c>
 cb2:	ba 0f       	add	r27, r26
 cb4:	62 1f       	adc	r22, r18
 cb6:	73 1f       	adc	r23, r19
 cb8:	84 1f       	adc	r24, r20
 cba:	48 f4       	brcc	.+18     	; 0xcce <__addsf3x+0x9c>
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b7 95       	ror	r27
 cc4:	f7 95       	ror	r31
 cc6:	9e 3f       	cpi	r25, 0xFE	; 254
 cc8:	08 f0       	brcs	.+2      	; 0xccc <__addsf3x+0x9a>
 cca:	b0 cf       	rjmp	.-160    	; 0xc2c <__addsf3+0x28>
 ccc:	93 95       	inc	r25
 cce:	88 0f       	add	r24, r24
 cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0xa2>
 cd2:	99 27       	eor	r25, r25
 cd4:	ee 0f       	add	r30, r30
 cd6:	97 95       	ror	r25
 cd8:	87 95       	ror	r24
 cda:	08 95       	ret

00000cdc <__cmpsf2>:
 cdc:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_cmp>
 ce0:	08 f4       	brcc	.+2      	; 0xce4 <__cmpsf2+0x8>
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	08 95       	ret

00000ce6 <__divsf3>:
 ce6:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divsf3x>
 cea:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__fp_round>
 cee:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fp_pscB>
 cf2:	58 f0       	brcs	.+22     	; 0xd0a <__divsf3+0x24>
 cf4:	0e 94 57 01 	call	0x2ae	; 0x2ae <__fp_pscA>
 cf8:	40 f0       	brcs	.+16     	; 0xd0a <__divsf3+0x24>
 cfa:	29 f4       	brne	.+10     	; 0xd06 <__divsf3+0x20>
 cfc:	5f 3f       	cpi	r21, 0xFF	; 255
 cfe:	29 f0       	breq	.+10     	; 0xd0a <__divsf3+0x24>
 d00:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__fp_inf>
 d04:	51 11       	cpse	r21, r1
 d06:	0c 94 99 01 	jmp	0x332	; 0x332 <__fp_szero>
 d0a:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_nan>

00000d0e <__divsf3x>:
 d0e:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fp_split3>
 d12:	68 f3       	brcs	.-38     	; 0xcee <__divsf3+0x8>

00000d14 <__divsf3_pse>:
 d14:	99 23       	and	r25, r25
 d16:	b1 f3       	breq	.-20     	; 0xd04 <__divsf3+0x1e>
 d18:	55 23       	and	r21, r21
 d1a:	91 f3       	breq	.-28     	; 0xd00 <__divsf3+0x1a>
 d1c:	95 1b       	sub	r25, r21
 d1e:	55 0b       	sbc	r21, r21
 d20:	bb 27       	eor	r27, r27
 d22:	aa 27       	eor	r26, r26
 d24:	62 17       	cp	r22, r18
 d26:	73 07       	cpc	r23, r19
 d28:	84 07       	cpc	r24, r20
 d2a:	38 f0       	brcs	.+14     	; 0xd3a <__divsf3_pse+0x26>
 d2c:	9f 5f       	subi	r25, 0xFF	; 255
 d2e:	5f 4f       	sbci	r21, 0xFF	; 255
 d30:	22 0f       	add	r18, r18
 d32:	33 1f       	adc	r19, r19
 d34:	44 1f       	adc	r20, r20
 d36:	aa 1f       	adc	r26, r26
 d38:	a9 f3       	breq	.-22     	; 0xd24 <__divsf3_pse+0x10>
 d3a:	35 d0       	rcall	.+106    	; 0xda6 <__divsf3_pse+0x92>
 d3c:	0e 2e       	mov	r0, r30
 d3e:	3a f0       	brmi	.+14     	; 0xd4e <__divsf3_pse+0x3a>
 d40:	e0 e8       	ldi	r30, 0x80	; 128
 d42:	32 d0       	rcall	.+100    	; 0xda8 <__divsf3_pse+0x94>
 d44:	91 50       	subi	r25, 0x01	; 1
 d46:	50 40       	sbci	r21, 0x00	; 0
 d48:	e6 95       	lsr	r30
 d4a:	00 1c       	adc	r0, r0
 d4c:	ca f7       	brpl	.-14     	; 0xd40 <__divsf3_pse+0x2c>
 d4e:	2b d0       	rcall	.+86     	; 0xda6 <__divsf3_pse+0x92>
 d50:	fe 2f       	mov	r31, r30
 d52:	29 d0       	rcall	.+82     	; 0xda6 <__divsf3_pse+0x92>
 d54:	66 0f       	add	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	bb 1f       	adc	r27, r27
 d5c:	26 17       	cp	r18, r22
 d5e:	37 07       	cpc	r19, r23
 d60:	48 07       	cpc	r20, r24
 d62:	ab 07       	cpc	r26, r27
 d64:	b0 e8       	ldi	r27, 0x80	; 128
 d66:	09 f0       	breq	.+2      	; 0xd6a <__divsf3_pse+0x56>
 d68:	bb 0b       	sbc	r27, r27
 d6a:	80 2d       	mov	r24, r0
 d6c:	bf 01       	movw	r22, r30
 d6e:	ff 27       	eor	r31, r31
 d70:	93 58       	subi	r25, 0x83	; 131
 d72:	5f 4f       	sbci	r21, 0xFF	; 255
 d74:	3a f0       	brmi	.+14     	; 0xd84 <__divsf3_pse+0x70>
 d76:	9e 3f       	cpi	r25, 0xFE	; 254
 d78:	51 05       	cpc	r21, r1
 d7a:	78 f0       	brcs	.+30     	; 0xd9a <__divsf3_pse+0x86>
 d7c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__fp_inf>
 d80:	0c 94 99 01 	jmp	0x332	; 0x332 <__fp_szero>
 d84:	5f 3f       	cpi	r21, 0xFF	; 255
 d86:	e4 f3       	brlt	.-8      	; 0xd80 <__divsf3_pse+0x6c>
 d88:	98 3e       	cpi	r25, 0xE8	; 232
 d8a:	d4 f3       	brlt	.-12     	; 0xd80 <__divsf3_pse+0x6c>
 d8c:	86 95       	lsr	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b7 95       	ror	r27
 d94:	f7 95       	ror	r31
 d96:	9f 5f       	subi	r25, 0xFF	; 255
 d98:	c9 f7       	brne	.-14     	; 0xd8c <__divsf3_pse+0x78>
 d9a:	88 0f       	add	r24, r24
 d9c:	91 1d       	adc	r25, r1
 d9e:	96 95       	lsr	r25
 da0:	87 95       	ror	r24
 da2:	97 f9       	bld	r25, 7
 da4:	08 95       	ret
 da6:	e1 e0       	ldi	r30, 0x01	; 1
 da8:	66 0f       	add	r22, r22
 daa:	77 1f       	adc	r23, r23
 dac:	88 1f       	adc	r24, r24
 dae:	bb 1f       	adc	r27, r27
 db0:	62 17       	cp	r22, r18
 db2:	73 07       	cpc	r23, r19
 db4:	84 07       	cpc	r24, r20
 db6:	ba 07       	cpc	r27, r26
 db8:	20 f0       	brcs	.+8      	; 0xdc2 <__divsf3_pse+0xae>
 dba:	62 1b       	sub	r22, r18
 dbc:	73 0b       	sbc	r23, r19
 dbe:	84 0b       	sbc	r24, r20
 dc0:	ba 0b       	sbc	r27, r26
 dc2:	ee 1f       	adc	r30, r30
 dc4:	88 f7       	brcc	.-30     	; 0xda8 <__divsf3_pse+0x94>
 dc6:	e0 95       	com	r30
 dc8:	08 95       	ret

00000dca <__fixunssfsi>:
 dca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fp_splitA>
 dce:	88 f0       	brcs	.+34     	; 0xdf2 <__fixunssfsi+0x28>
 dd0:	9f 57       	subi	r25, 0x7F	; 127
 dd2:	98 f0       	brcs	.+38     	; 0xdfa <__fixunssfsi+0x30>
 dd4:	b9 2f       	mov	r27, r25
 dd6:	99 27       	eor	r25, r25
 dd8:	b7 51       	subi	r27, 0x17	; 23
 dda:	b0 f0       	brcs	.+44     	; 0xe08 <__fixunssfsi+0x3e>
 ddc:	e1 f0       	breq	.+56     	; 0xe16 <__fixunssfsi+0x4c>
 dde:	66 0f       	add	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	88 1f       	adc	r24, r24
 de4:	99 1f       	adc	r25, r25
 de6:	1a f0       	brmi	.+6      	; 0xdee <__fixunssfsi+0x24>
 de8:	ba 95       	dec	r27
 dea:	c9 f7       	brne	.-14     	; 0xdde <__fixunssfsi+0x14>
 dec:	14 c0       	rjmp	.+40     	; 0xe16 <__fixunssfsi+0x4c>
 dee:	b1 30       	cpi	r27, 0x01	; 1
 df0:	91 f0       	breq	.+36     	; 0xe16 <__fixunssfsi+0x4c>
 df2:	0e 94 98 01 	call	0x330	; 0x330 <__fp_zero>
 df6:	b1 e0       	ldi	r27, 0x01	; 1
 df8:	08 95       	ret
 dfa:	0c 94 98 01 	jmp	0x330	; 0x330 <__fp_zero>
 dfe:	67 2f       	mov	r22, r23
 e00:	78 2f       	mov	r23, r24
 e02:	88 27       	eor	r24, r24
 e04:	b8 5f       	subi	r27, 0xF8	; 248
 e06:	39 f0       	breq	.+14     	; 0xe16 <__fixunssfsi+0x4c>
 e08:	b9 3f       	cpi	r27, 0xF9	; 249
 e0a:	cc f3       	brlt	.-14     	; 0xdfe <__fixunssfsi+0x34>
 e0c:	86 95       	lsr	r24
 e0e:	77 95       	ror	r23
 e10:	67 95       	ror	r22
 e12:	b3 95       	inc	r27
 e14:	d9 f7       	brne	.-10     	; 0xe0c <__fixunssfsi+0x42>
 e16:	3e f4       	brtc	.+14     	; 0xe26 <__fixunssfsi+0x5c>
 e18:	90 95       	com	r25
 e1a:	80 95       	com	r24
 e1c:	70 95       	com	r23
 e1e:	61 95       	neg	r22
 e20:	7f 4f       	sbci	r23, 0xFF	; 255
 e22:	8f 4f       	sbci	r24, 0xFF	; 255
 e24:	9f 4f       	sbci	r25, 0xFF	; 255
 e26:	08 95       	ret

00000e28 <__fp_cmp>:
 e28:	99 0f       	add	r25, r25
 e2a:	00 08       	sbc	r0, r0
 e2c:	55 0f       	add	r21, r21
 e2e:	aa 0b       	sbc	r26, r26
 e30:	e0 e8       	ldi	r30, 0x80	; 128
 e32:	fe ef       	ldi	r31, 0xFE	; 254
 e34:	16 16       	cp	r1, r22
 e36:	17 06       	cpc	r1, r23
 e38:	e8 07       	cpc	r30, r24
 e3a:	f9 07       	cpc	r31, r25
 e3c:	c0 f0       	brcs	.+48     	; 0xe6e <__fp_cmp+0x46>
 e3e:	12 16       	cp	r1, r18
 e40:	13 06       	cpc	r1, r19
 e42:	e4 07       	cpc	r30, r20
 e44:	f5 07       	cpc	r31, r21
 e46:	98 f0       	brcs	.+38     	; 0xe6e <__fp_cmp+0x46>
 e48:	62 1b       	sub	r22, r18
 e4a:	73 0b       	sbc	r23, r19
 e4c:	84 0b       	sbc	r24, r20
 e4e:	95 0b       	sbc	r25, r21
 e50:	39 f4       	brne	.+14     	; 0xe60 <__fp_cmp+0x38>
 e52:	0a 26       	eor	r0, r26
 e54:	61 f0       	breq	.+24     	; 0xe6e <__fp_cmp+0x46>
 e56:	23 2b       	or	r18, r19
 e58:	24 2b       	or	r18, r20
 e5a:	25 2b       	or	r18, r21
 e5c:	21 f4       	brne	.+8      	; 0xe66 <__fp_cmp+0x3e>
 e5e:	08 95       	ret
 e60:	0a 26       	eor	r0, r26
 e62:	09 f4       	brne	.+2      	; 0xe66 <__fp_cmp+0x3e>
 e64:	a1 40       	sbci	r26, 0x01	; 1
 e66:	a6 95       	lsr	r26
 e68:	8f ef       	ldi	r24, 0xFF	; 255
 e6a:	81 1d       	adc	r24, r1
 e6c:	81 1d       	adc	r24, r1
 e6e:	08 95       	ret

00000e70 <__gesf2>:
 e70:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_cmp>
 e74:	08 f4       	brcc	.+2      	; 0xe78 <__gesf2+0x8>
 e76:	8f ef       	ldi	r24, 0xFF	; 255
 e78:	08 95       	ret

00000e7a <__unordsf2>:
 e7a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_cmp>
 e7e:	88 0b       	sbc	r24, r24
 e80:	99 0b       	sbc	r25, r25
 e82:	08 95       	ret

00000e84 <__udivmodsi4>:
 e84:	a1 e2       	ldi	r26, 0x21	; 33
 e86:	1a 2e       	mov	r1, r26
 e88:	aa 1b       	sub	r26, r26
 e8a:	bb 1b       	sub	r27, r27
 e8c:	fd 01       	movw	r30, r26
 e8e:	0d c0       	rjmp	.+26     	; 0xeaa <__udivmodsi4_ep>

00000e90 <__udivmodsi4_loop>:
 e90:	aa 1f       	adc	r26, r26
 e92:	bb 1f       	adc	r27, r27
 e94:	ee 1f       	adc	r30, r30
 e96:	ff 1f       	adc	r31, r31
 e98:	a2 17       	cp	r26, r18
 e9a:	b3 07       	cpc	r27, r19
 e9c:	e4 07       	cpc	r30, r20
 e9e:	f5 07       	cpc	r31, r21
 ea0:	20 f0       	brcs	.+8      	; 0xeaa <__udivmodsi4_ep>
 ea2:	a2 1b       	sub	r26, r18
 ea4:	b3 0b       	sbc	r27, r19
 ea6:	e4 0b       	sbc	r30, r20
 ea8:	f5 0b       	sbc	r31, r21

00000eaa <__udivmodsi4_ep>:
 eaa:	66 1f       	adc	r22, r22
 eac:	77 1f       	adc	r23, r23
 eae:	88 1f       	adc	r24, r24
 eb0:	99 1f       	adc	r25, r25
 eb2:	1a 94       	dec	r1
 eb4:	69 f7       	brne	.-38     	; 0xe90 <__udivmodsi4_loop>
 eb6:	60 95       	com	r22
 eb8:	70 95       	com	r23
 eba:	80 95       	com	r24
 ebc:	90 95       	com	r25
 ebe:	9b 01       	movw	r18, r22
 ec0:	ac 01       	movw	r20, r24
 ec2:	bd 01       	movw	r22, r26
 ec4:	cf 01       	movw	r24, r30
 ec6:	08 95       	ret

00000ec8 <__tablejump2__>:
 ec8:	ee 0f       	add	r30, r30
 eca:	ff 1f       	adc	r31, r31
 ecc:	05 90       	lpm	r0, Z+
 ece:	f4 91       	lpm	r31, Z
 ed0:	e0 2d       	mov	r30, r0
 ed2:	09 94       	ijmp

00000ed4 <_exit>:
 ed4:	f8 94       	cli

00000ed6 <__stop_program>:
 ed6:	ff cf       	rjmp	.-2      	; 0xed6 <__stop_program>
