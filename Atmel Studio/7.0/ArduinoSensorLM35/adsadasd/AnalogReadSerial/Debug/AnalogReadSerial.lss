
AnalogReadSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000101e  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000101e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800144  00800144  000010f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a7d  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001959  00000000  00000000  00008ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001916  00000000  00000000  0000a816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000804  00000000  00000000  0000c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f67  00000000  00000000  0000c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d2d  00000000  00000000  0000e897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  000115c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_16>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_18>
      4c:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_19>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	01 02       	muls	r16, r17
      6a:	04 08       	sbc	r0, r4
      6c:	10 20       	and	r1, r0
      6e:	40 80       	ld	r4, Z
      70:	01 02       	muls	r16, r17
      72:	04 08       	sbc	r0, r4
      74:	10 20       	and	r1, r0
      76:	01 02       	muls	r16, r17
      78:	04 08       	sbc	r0, r4
      7a:	10 20       	and	r1, r0

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03                                         ....

00000090 <port_to_output_PGM>:
      90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_mode_PGM>:
      9a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000a4 <__ctors_start>:
      a4:	02 04       	cpc	r0, r2

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d8 e0       	ldi	r29, 0x08	; 8
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	ee e1       	ldi	r30, 0x1E	; 30
      ba:	f0 e1       	ldi	r31, 0x10	; 16
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a4 34       	cpi	r26, 0x44	; 68
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	a4 e4       	ldi	r26, 0x44	; 68
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	aa 3e       	cpi	r26, 0xEA	; 234
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
      d8:	10 e0       	ldi	r17, 0x00	; 0
      da:	c3 e5       	ldi	r28, 0x53	; 83
      dc:	d0 e0       	ldi	r29, 0x00	; 0
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
      e0:	21 97       	sbiw	r28, 0x01	; 1
      e2:	fe 01       	movw	r30, r28
      e4:	0e 94 07 08 	call	0x100e	; 0x100e <__tablejump2__>
      e8:	c2 35       	cpi	r28, 0x52	; 82
      ea:	d1 07       	cpc	r29, r17
      ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
      ee:	0e 94 30 04 	call	0x860	; 0x860 <main>
      f2:	0c 94 0d 08 	jmp	0x101a	; 0x101a <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
      fa:	26 e0       	ldi	r18, 0x06	; 6
      fc:	40 e8       	ldi	r20, 0x80	; 128
      fe:	55 e2       	ldi	r21, 0x25	; 37
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	84 e4       	ldi	r24, 0x44	; 68
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 3b 03 	call	0x676	; 0x676 <_ZN14HardwareSerial5beginEmh>
ï»¿/*Begining of Auto generated code by Atmel studio */
#include <Arduino.h>
void setup() {
	Serial.begin(9600);
	pinMode(A1,INPUT);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	8f e0       	ldi	r24, 0x0F	; 15
     110:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <pinMode>

00000114 <loop>:
}

void loop() {
     114:	8f 92       	push	r8
     116:	9f 92       	push	r9
     118:	af 92       	push	r10
     11a:	bf 92       	push	r11
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
	// put your main code here, to run repeatedly:
	float temp=analogRead(A1);
     124:	8f e0       	ldi	r24, 0x0F	; 15
     126:	0e 94 bc 06 	call	0xd78	; 0xd78 <analogRead>
     12a:	bc 01       	movw	r22, r24
     12c:	99 0f       	add	r25, r25
     12e:	88 0b       	sbc	r24, r24
     130:	99 0b       	sbc	r25, r25
     132:	0e 94 6d 01 	call	0x2da	; 0x2da <__floatsisf>
     136:	6b 01       	movw	r12, r22
     138:	7c 01       	movw	r14, r24
	//float check=((temp*5.0)-5.0)*100;

	float mv = ( temp/1024.0)*5000;
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e8       	ldi	r20, 0x80	; 128
     140:	5a e3       	ldi	r21, 0x3A	; 58
     142:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__mulsf3>
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e4       	ldi	r19, 0x40	; 64
     14a:	4c e9       	ldi	r20, 0x9C	; 156
     14c:	55 e4       	ldi	r21, 0x45	; 69
     14e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__mulsf3>
     152:	4b 01       	movw	r8, r22
     154:	5c 01       	movw	r10, r24
	float cel = mv/10;
	//float farh = (cel*9)/5 + 32;
	Serial.print("Current temp: ");
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	71 e0       	ldi	r23, 0x01	; 1
     15a:	84 e4       	ldi	r24, 0x44	; 68
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print5printEPKc>
	Serial.print(cel);
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	40 e2       	ldi	r20, 0x20	; 32
     168:	51 e4       	ldi	r21, 0x41	; 65
     16a:	c5 01       	movw	r24, r10
     16c:	b4 01       	movw	r22, r8
     16e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__divsf3>
     172:	ab 01       	movw	r20, r22
     174:	bc 01       	movw	r22, r24
     176:	22 e0       	ldi	r18, 0x02	; 2
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	84 e4       	ldi	r24, 0x44	; 68
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN5Print5printEdi>
	Serial.println("*C");
     182:	60 e1       	ldi	r22, 0x10	; 16
     184:	71 e0       	ldi	r23, 0x01	; 1
     186:	84 e4       	ldi	r24, 0x44	; 68
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print7printlnEPKc>
	Serial.print("Current ADC: ");
     18e:	63 e1       	ldi	r22, 0x13	; 19
     190:	71 e0       	ldi	r23, 0x01	; 1
     192:	84 e4       	ldi	r24, 0x44	; 68
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print5printEPKc>
	Serial.print(mv/1000);
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	4a e7       	ldi	r20, 0x7A	; 122
     1a0:	54 e4       	ldi	r21, 0x44	; 68
     1a2:	c5 01       	movw	r24, r10
     1a4:	b4 01       	movw	r22, r8
     1a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__divsf3>
     1aa:	ab 01       	movw	r20, r22
     1ac:	bc 01       	movw	r22, r24
     1ae:	22 e0       	ldi	r18, 0x02	; 2
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	84 e4       	ldi	r24, 0x44	; 68
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN5Print5printEdi>
	Serial.println("V");
     1ba:	61 e2       	ldi	r22, 0x21	; 33
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	84 e4       	ldi	r24, 0x44	; 68
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN5Print7printlnEPKc>
	Serial.print(temp);
     1c6:	22 e0       	ldi	r18, 0x02	; 2
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	b7 01       	movw	r22, r14
     1cc:	a6 01       	movw	r20, r12
     1ce:	84 e4       	ldi	r24, 0x44	; 68
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN5Print5printEdi>
	delay(1500);
     1d6:	6c ed       	ldi	r22, 0xDC	; 220
     1d8:	75 e0       	ldi	r23, 0x05	; 5
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
	

     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	bf 90       	pop	r11
     1e8:	af 90       	pop	r10
     1ea:	9f 90       	pop	r9
     1ec:	8f 90       	pop	r8
	Serial.println("*C");
	Serial.print("Current ADC: ");
	Serial.print(mv/1000);
	Serial.println("V");
	Serial.print(temp);
	delay(1500);
     1ee:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <delay>

000001f2 <__divsf3>:
     1f2:	0e 94 0d 01 	call	0x21a	; 0x21a <__divsf3x>
     1f6:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_round>
     1fa:	0e 94 b8 01 	call	0x370	; 0x370 <__fp_pscB>
     1fe:	58 f0       	brcs	.+22     	; 0x216 <__divsf3+0x24>
     200:	0e 94 b1 01 	call	0x362	; 0x362 <__fp_pscA>
     204:	40 f0       	brcs	.+16     	; 0x216 <__divsf3+0x24>
     206:	29 f4       	brne	.+10     	; 0x212 <__divsf3+0x20>
     208:	5f 3f       	cpi	r21, 0xFF	; 255
     20a:	29 f0       	breq	.+10     	; 0x216 <__divsf3+0x24>
     20c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_inf>
     210:	51 11       	cpse	r21, r1
     212:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_szero>
     216:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_nan>

0000021a <__divsf3x>:
     21a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_split3>
     21e:	68 f3       	brcs	.-38     	; 0x1fa <__divsf3+0x8>

00000220 <__divsf3_pse>:
     220:	99 23       	and	r25, r25
     222:	b1 f3       	breq	.-20     	; 0x210 <__divsf3+0x1e>
     224:	55 23       	and	r21, r21
     226:	91 f3       	breq	.-28     	; 0x20c <__divsf3+0x1a>
     228:	95 1b       	sub	r25, r21
     22a:	55 0b       	sbc	r21, r21
     22c:	bb 27       	eor	r27, r27
     22e:	aa 27       	eor	r26, r26
     230:	62 17       	cp	r22, r18
     232:	73 07       	cpc	r23, r19
     234:	84 07       	cpc	r24, r20
     236:	38 f0       	brcs	.+14     	; 0x246 <__divsf3_pse+0x26>
     238:	9f 5f       	subi	r25, 0xFF	; 255
     23a:	5f 4f       	sbci	r21, 0xFF	; 255
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	44 1f       	adc	r20, r20
     242:	aa 1f       	adc	r26, r26
     244:	a9 f3       	breq	.-22     	; 0x230 <__divsf3_pse+0x10>
     246:	35 d0       	rcall	.+106    	; 0x2b2 <__divsf3_pse+0x92>
     248:	0e 2e       	mov	r0, r30
     24a:	3a f0       	brmi	.+14     	; 0x25a <__divsf3_pse+0x3a>
     24c:	e0 e8       	ldi	r30, 0x80	; 128
     24e:	32 d0       	rcall	.+100    	; 0x2b4 <__divsf3_pse+0x94>
     250:	91 50       	subi	r25, 0x01	; 1
     252:	50 40       	sbci	r21, 0x00	; 0
     254:	e6 95       	lsr	r30
     256:	00 1c       	adc	r0, r0
     258:	ca f7       	brpl	.-14     	; 0x24c <__divsf3_pse+0x2c>
     25a:	2b d0       	rcall	.+86     	; 0x2b2 <__divsf3_pse+0x92>
     25c:	fe 2f       	mov	r31, r30
     25e:	29 d0       	rcall	.+82     	; 0x2b2 <__divsf3_pse+0x92>
     260:	66 0f       	add	r22, r22
     262:	77 1f       	adc	r23, r23
     264:	88 1f       	adc	r24, r24
     266:	bb 1f       	adc	r27, r27
     268:	26 17       	cp	r18, r22
     26a:	37 07       	cpc	r19, r23
     26c:	48 07       	cpc	r20, r24
     26e:	ab 07       	cpc	r26, r27
     270:	b0 e8       	ldi	r27, 0x80	; 128
     272:	09 f0       	breq	.+2      	; 0x276 <__divsf3_pse+0x56>
     274:	bb 0b       	sbc	r27, r27
     276:	80 2d       	mov	r24, r0
     278:	bf 01       	movw	r22, r30
     27a:	ff 27       	eor	r31, r31
     27c:	93 58       	subi	r25, 0x83	; 131
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	3a f0       	brmi	.+14     	; 0x290 <__divsf3_pse+0x70>
     282:	9e 3f       	cpi	r25, 0xFE	; 254
     284:	51 05       	cpc	r21, r1
     286:	78 f0       	brcs	.+30     	; 0x2a6 <__divsf3_pse+0x86>
     288:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_inf>
     28c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_szero>
     290:	5f 3f       	cpi	r21, 0xFF	; 255
     292:	e4 f3       	brlt	.-8      	; 0x28c <__divsf3_pse+0x6c>
     294:	98 3e       	cpi	r25, 0xE8	; 232
     296:	d4 f3       	brlt	.-12     	; 0x28c <__divsf3_pse+0x6c>
     298:	86 95       	lsr	r24
     29a:	77 95       	ror	r23
     29c:	67 95       	ror	r22
     29e:	b7 95       	ror	r27
     2a0:	f7 95       	ror	r31
     2a2:	9f 5f       	subi	r25, 0xFF	; 255
     2a4:	c9 f7       	brne	.-14     	; 0x298 <__divsf3_pse+0x78>
     2a6:	88 0f       	add	r24, r24
     2a8:	91 1d       	adc	r25, r1
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
     2ae:	97 f9       	bld	r25, 7
     2b0:	08 95       	ret
     2b2:	e1 e0       	ldi	r30, 0x01	; 1
     2b4:	66 0f       	add	r22, r22
     2b6:	77 1f       	adc	r23, r23
     2b8:	88 1f       	adc	r24, r24
     2ba:	bb 1f       	adc	r27, r27
     2bc:	62 17       	cp	r22, r18
     2be:	73 07       	cpc	r23, r19
     2c0:	84 07       	cpc	r24, r20
     2c2:	ba 07       	cpc	r27, r26
     2c4:	20 f0       	brcs	.+8      	; 0x2ce <__divsf3_pse+0xae>
     2c6:	62 1b       	sub	r22, r18
     2c8:	73 0b       	sbc	r23, r19
     2ca:	84 0b       	sbc	r24, r20
     2cc:	ba 0b       	sbc	r27, r26
     2ce:	ee 1f       	adc	r30, r30
     2d0:	88 f7       	brcc	.-30     	; 0x2b4 <__divsf3_pse+0x94>
     2d2:	e0 95       	com	r30
     2d4:	08 95       	ret

000002d6 <__floatunsisf>:
     2d6:	e8 94       	clt
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <__floatsisf+0x12>

000002da <__floatsisf>:
     2da:	97 fb       	bst	r25, 7
     2dc:	3e f4       	brtc	.+14     	; 0x2ec <__floatsisf+0x12>
     2de:	90 95       	com	r25
     2e0:	80 95       	com	r24
     2e2:	70 95       	com	r23
     2e4:	61 95       	neg	r22
     2e6:	7f 4f       	sbci	r23, 0xFF	; 255
     2e8:	8f 4f       	sbci	r24, 0xFF	; 255
     2ea:	9f 4f       	sbci	r25, 0xFF	; 255
     2ec:	99 23       	and	r25, r25
     2ee:	a9 f0       	breq	.+42     	; 0x31a <__floatsisf+0x40>
     2f0:	f9 2f       	mov	r31, r25
     2f2:	96 e9       	ldi	r25, 0x96	; 150
     2f4:	bb 27       	eor	r27, r27
     2f6:	93 95       	inc	r25
     2f8:	f6 95       	lsr	r31
     2fa:	87 95       	ror	r24
     2fc:	77 95       	ror	r23
     2fe:	67 95       	ror	r22
     300:	b7 95       	ror	r27
     302:	f1 11       	cpse	r31, r1
     304:	f8 cf       	rjmp	.-16     	; 0x2f6 <__floatsisf+0x1c>
     306:	fa f4       	brpl	.+62     	; 0x346 <__floatsisf+0x6c>
     308:	bb 0f       	add	r27, r27
     30a:	11 f4       	brne	.+4      	; 0x310 <__floatsisf+0x36>
     30c:	60 ff       	sbrs	r22, 0
     30e:	1b c0       	rjmp	.+54     	; 0x346 <__floatsisf+0x6c>
     310:	6f 5f       	subi	r22, 0xFF	; 255
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	8f 4f       	sbci	r24, 0xFF	; 255
     316:	9f 4f       	sbci	r25, 0xFF	; 255
     318:	16 c0       	rjmp	.+44     	; 0x346 <__floatsisf+0x6c>
     31a:	88 23       	and	r24, r24
     31c:	11 f0       	breq	.+4      	; 0x322 <__floatsisf+0x48>
     31e:	96 e9       	ldi	r25, 0x96	; 150
     320:	11 c0       	rjmp	.+34     	; 0x344 <__floatsisf+0x6a>
     322:	77 23       	and	r23, r23
     324:	21 f0       	breq	.+8      	; 0x32e <__floatsisf+0x54>
     326:	9e e8       	ldi	r25, 0x8E	; 142
     328:	87 2f       	mov	r24, r23
     32a:	76 2f       	mov	r23, r22
     32c:	05 c0       	rjmp	.+10     	; 0x338 <__floatsisf+0x5e>
     32e:	66 23       	and	r22, r22
     330:	71 f0       	breq	.+28     	; 0x34e <__floatsisf+0x74>
     332:	96 e8       	ldi	r25, 0x86	; 134
     334:	86 2f       	mov	r24, r22
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	2a f0       	brmi	.+10     	; 0x346 <__floatsisf+0x6c>
     33c:	9a 95       	dec	r25
     33e:	66 0f       	add	r22, r22
     340:	77 1f       	adc	r23, r23
     342:	88 1f       	adc	r24, r24
     344:	da f7       	brpl	.-10     	; 0x33c <__floatsisf+0x62>
     346:	88 0f       	add	r24, r24
     348:	96 95       	lsr	r25
     34a:	87 95       	ror	r24
     34c:	97 f9       	bld	r25, 7
     34e:	08 95       	ret

00000350 <__fp_inf>:
     350:	97 f9       	bld	r25, 7
     352:	9f 67       	ori	r25, 0x7F	; 127
     354:	80 e8       	ldi	r24, 0x80	; 128
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	08 95       	ret

0000035c <__fp_nan>:
     35c:	9f ef       	ldi	r25, 0xFF	; 255
     35e:	80 ec       	ldi	r24, 0xC0	; 192
     360:	08 95       	ret

00000362 <__fp_pscA>:
     362:	00 24       	eor	r0, r0
     364:	0a 94       	dec	r0
     366:	16 16       	cp	r1, r22
     368:	17 06       	cpc	r1, r23
     36a:	18 06       	cpc	r1, r24
     36c:	09 06       	cpc	r0, r25
     36e:	08 95       	ret

00000370 <__fp_pscB>:
     370:	00 24       	eor	r0, r0
     372:	0a 94       	dec	r0
     374:	12 16       	cp	r1, r18
     376:	13 06       	cpc	r1, r19
     378:	14 06       	cpc	r1, r20
     37a:	05 06       	cpc	r0, r21
     37c:	08 95       	ret

0000037e <__fp_round>:
     37e:	09 2e       	mov	r0, r25
     380:	03 94       	inc	r0
     382:	00 0c       	add	r0, r0
     384:	11 f4       	brne	.+4      	; 0x38a <__fp_round+0xc>
     386:	88 23       	and	r24, r24
     388:	52 f0       	brmi	.+20     	; 0x39e <__fp_round+0x20>
     38a:	bb 0f       	add	r27, r27
     38c:	40 f4       	brcc	.+16     	; 0x39e <__fp_round+0x20>
     38e:	bf 2b       	or	r27, r31
     390:	11 f4       	brne	.+4      	; 0x396 <__fp_round+0x18>
     392:	60 ff       	sbrs	r22, 0
     394:	04 c0       	rjmp	.+8      	; 0x39e <__fp_round+0x20>
     396:	6f 5f       	subi	r22, 0xFF	; 255
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	8f 4f       	sbci	r24, 0xFF	; 255
     39c:	9f 4f       	sbci	r25, 0xFF	; 255
     39e:	08 95       	ret

000003a0 <__fp_split3>:
     3a0:	57 fd       	sbrc	r21, 7
     3a2:	90 58       	subi	r25, 0x80	; 128
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	59 f0       	breq	.+22     	; 0x3c0 <__fp_splitA+0x10>
     3aa:	5f 3f       	cpi	r21, 0xFF	; 255
     3ac:	71 f0       	breq	.+28     	; 0x3ca <__fp_splitA+0x1a>
     3ae:	47 95       	ror	r20

000003b0 <__fp_splitA>:
     3b0:	88 0f       	add	r24, r24
     3b2:	97 fb       	bst	r25, 7
     3b4:	99 1f       	adc	r25, r25
     3b6:	61 f0       	breq	.+24     	; 0x3d0 <__fp_splitA+0x20>
     3b8:	9f 3f       	cpi	r25, 0xFF	; 255
     3ba:	79 f0       	breq	.+30     	; 0x3da <__fp_splitA+0x2a>
     3bc:	87 95       	ror	r24
     3be:	08 95       	ret
     3c0:	12 16       	cp	r1, r18
     3c2:	13 06       	cpc	r1, r19
     3c4:	14 06       	cpc	r1, r20
     3c6:	55 1f       	adc	r21, r21
     3c8:	f2 cf       	rjmp	.-28     	; 0x3ae <__fp_split3+0xe>
     3ca:	46 95       	lsr	r20
     3cc:	f1 df       	rcall	.-30     	; 0x3b0 <__fp_splitA>
     3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <__fp_splitA+0x30>
     3d0:	16 16       	cp	r1, r22
     3d2:	17 06       	cpc	r1, r23
     3d4:	18 06       	cpc	r1, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	f1 cf       	rjmp	.-30     	; 0x3bc <__fp_splitA+0xc>
     3da:	86 95       	lsr	r24
     3dc:	71 05       	cpc	r23, r1
     3de:	61 05       	cpc	r22, r1
     3e0:	08 94       	sec
     3e2:	08 95       	ret

000003e4 <__fp_zero>:
     3e4:	e8 94       	clt

000003e6 <__fp_szero>:
     3e6:	bb 27       	eor	r27, r27
     3e8:	66 27       	eor	r22, r22
     3ea:	77 27       	eor	r23, r23
     3ec:	cb 01       	movw	r24, r22
     3ee:	97 f9       	bld	r25, 7
     3f0:	08 95       	ret

000003f2 <__mulsf3>:
     3f2:	0e 94 0c 02 	call	0x418	; 0x418 <__mulsf3x>
     3f6:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_round>
     3fa:	0e 94 b1 01 	call	0x362	; 0x362 <__fp_pscA>
     3fe:	38 f0       	brcs	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     400:	0e 94 b8 01 	call	0x370	; 0x370 <__fp_pscB>
     404:	20 f0       	brcs	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	95 23       	and	r25, r21
     408:	11 f0       	breq	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_inf>
     40e:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_nan>
     412:	11 24       	eor	r1, r1
     414:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_szero>

00000418 <__mulsf3x>:
     418:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_split3>
     41c:	70 f3       	brcs	.-36     	; 0x3fa <__mulsf3+0x8>

0000041e <__mulsf3_pse>:
     41e:	95 9f       	mul	r25, r21
     420:	c1 f3       	breq	.-16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     422:	95 0f       	add	r25, r21
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	55 1f       	adc	r21, r21
     428:	62 9f       	mul	r22, r18
     42a:	f0 01       	movw	r30, r0
     42c:	72 9f       	mul	r23, r18
     42e:	bb 27       	eor	r27, r27
     430:	f0 0d       	add	r31, r0
     432:	b1 1d       	adc	r27, r1
     434:	63 9f       	mul	r22, r19
     436:	aa 27       	eor	r26, r26
     438:	f0 0d       	add	r31, r0
     43a:	b1 1d       	adc	r27, r1
     43c:	aa 1f       	adc	r26, r26
     43e:	64 9f       	mul	r22, r20
     440:	66 27       	eor	r22, r22
     442:	b0 0d       	add	r27, r0
     444:	a1 1d       	adc	r26, r1
     446:	66 1f       	adc	r22, r22
     448:	82 9f       	mul	r24, r18
     44a:	22 27       	eor	r18, r18
     44c:	b0 0d       	add	r27, r0
     44e:	a1 1d       	adc	r26, r1
     450:	62 1f       	adc	r22, r18
     452:	73 9f       	mul	r23, r19
     454:	b0 0d       	add	r27, r0
     456:	a1 1d       	adc	r26, r1
     458:	62 1f       	adc	r22, r18
     45a:	83 9f       	mul	r24, r19
     45c:	a0 0d       	add	r26, r0
     45e:	61 1d       	adc	r22, r1
     460:	22 1f       	adc	r18, r18
     462:	74 9f       	mul	r23, r20
     464:	33 27       	eor	r19, r19
     466:	a0 0d       	add	r26, r0
     468:	61 1d       	adc	r22, r1
     46a:	23 1f       	adc	r18, r19
     46c:	84 9f       	mul	r24, r20
     46e:	60 0d       	add	r22, r0
     470:	21 1d       	adc	r18, r1
     472:	82 2f       	mov	r24, r18
     474:	76 2f       	mov	r23, r22
     476:	6a 2f       	mov	r22, r26
     478:	11 24       	eor	r1, r1
     47a:	9f 57       	subi	r25, 0x7F	; 127
     47c:	50 40       	sbci	r21, 0x00	; 0
     47e:	9a f0       	brmi	.+38     	; 0x4a6 <__mulsf3_pse+0x88>
     480:	f1 f0       	breq	.+60     	; 0x4be <__mulsf3_pse+0xa0>
     482:	88 23       	and	r24, r24
     484:	4a f0       	brmi	.+18     	; 0x498 <__mulsf3_pse+0x7a>
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	bb 1f       	adc	r27, r27
     48c:	66 1f       	adc	r22, r22
     48e:	77 1f       	adc	r23, r23
     490:	88 1f       	adc	r24, r24
     492:	91 50       	subi	r25, 0x01	; 1
     494:	50 40       	sbci	r21, 0x00	; 0
     496:	a9 f7       	brne	.-22     	; 0x482 <__mulsf3_pse+0x64>
     498:	9e 3f       	cpi	r25, 0xFE	; 254
     49a:	51 05       	cpc	r21, r1
     49c:	80 f0       	brcs	.+32     	; 0x4be <__mulsf3_pse+0xa0>
     49e:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_inf>
     4a2:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_szero>
     4a6:	5f 3f       	cpi	r21, 0xFF	; 255
     4a8:	e4 f3       	brlt	.-8      	; 0x4a2 <__mulsf3_pse+0x84>
     4aa:	98 3e       	cpi	r25, 0xE8	; 232
     4ac:	d4 f3       	brlt	.-12     	; 0x4a2 <__mulsf3_pse+0x84>
     4ae:	86 95       	lsr	r24
     4b0:	77 95       	ror	r23
     4b2:	67 95       	ror	r22
     4b4:	b7 95       	ror	r27
     4b6:	f7 95       	ror	r31
     4b8:	e7 95       	ror	r30
     4ba:	9f 5f       	subi	r25, 0xFF	; 255
     4bc:	c1 f7       	brne	.-16     	; 0x4ae <__mulsf3_pse+0x90>
     4be:	fe 2b       	or	r31, r30
     4c0:	88 0f       	add	r24, r24
     4c2:	91 1d       	adc	r25, r1
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	97 f9       	bld	r25, 7
     4ca:	08 95       	ret

000004cc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     4cc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     4ce:	91 8d       	ldd	r25, Z+25	; 0x19
     4d0:	22 8d       	ldd	r18, Z+26	; 0x1a
     4d2:	89 2f       	mov	r24, r25
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	80 5c       	subi	r24, 0xC0	; 192
     4d8:	9f 4f       	sbci	r25, 0xFF	; 255
     4da:	82 1b       	sub	r24, r18
     4dc:	91 09       	sbc	r25, r1
}
     4de:	8f 73       	andi	r24, 0x3F	; 63
     4e0:	99 27       	eor	r25, r25
     4e2:	08 95       	ret

000004e4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     4e4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     4e6:	91 8d       	ldd	r25, Z+25	; 0x19
     4e8:	82 8d       	ldd	r24, Z+26	; 0x1a
     4ea:	98 17       	cp	r25, r24
     4ec:	31 f0       	breq	.+12     	; 0x4fa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     4ee:	82 8d       	ldd	r24, Z+26	; 0x1a
     4f0:	e8 0f       	add	r30, r24
     4f2:	f1 1d       	adc	r31, r1
     4f4:	85 8d       	ldd	r24, Z+29	; 0x1d
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     4fe:	08 95       	ret

00000500 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     500:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     502:	91 8d       	ldd	r25, Z+25	; 0x19
     504:	82 8d       	ldd	r24, Z+26	; 0x1a
     506:	98 17       	cp	r25, r24
     508:	61 f0       	breq	.+24     	; 0x522 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     50a:	82 8d       	ldd	r24, Z+26	; 0x1a
     50c:	df 01       	movw	r26, r30
     50e:	a8 0f       	add	r26, r24
     510:	b1 1d       	adc	r27, r1
     512:	5d 96       	adiw	r26, 0x1d	; 29
     514:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     516:	92 8d       	ldd	r25, Z+26	; 0x1a
     518:	9f 5f       	subi	r25, 0xFF	; 255
     51a:	9f 73       	andi	r25, 0x3F	; 63
     51c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     526:	08 95       	ret

00000528 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     528:	fc 01       	movw	r30, r24
     52a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     52c:	44 8d       	ldd	r20, Z+28	; 0x1c
     52e:	25 2f       	mov	r18, r21
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	84 2f       	mov	r24, r20
     534:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     536:	82 1b       	sub	r24, r18
     538:	93 0b       	sbc	r25, r19
     53a:	54 17       	cp	r21, r20
     53c:	10 f0       	brcs	.+4      	; 0x542 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     53e:	cf 96       	adiw	r24, 0x3f	; 63
     540:	08 95       	ret
  return tail - head - 1;
     542:	01 97       	sbiw	r24, 0x01	; 1
}
     544:	08 95       	ret

00000546 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     546:	88 ef       	ldi	r24, 0xF8	; 248
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	89 2b       	or	r24, r25
     54c:	49 f0       	breq	.+18     	; 0x560 <_Z14serialEventRunv+0x1a>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	89 2b       	or	r24, r25
     554:	29 f0       	breq	.+10     	; 0x560 <_Z14serialEventRunv+0x1a>
     556:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z17Serial0_availablev>
     55a:	81 11       	cpse	r24, r1
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     560:	08 95       	ret

00000562 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     562:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     564:	84 8d       	ldd	r24, Z+28	; 0x1c
     566:	df 01       	movw	r26, r30
     568:	a8 0f       	add	r26, r24
     56a:	b1 1d       	adc	r27, r1
     56c:	a3 5a       	subi	r26, 0xA3	; 163
     56e:	bf 4f       	sbci	r27, 0xFF	; 255
     570:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     572:	84 8d       	ldd	r24, Z+28	; 0x1c
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	8f 73       	andi	r24, 0x3F	; 63
     57a:	99 27       	eor	r25, r25
     57c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     57e:	a6 89       	ldd	r26, Z+22	; 0x16
     580:	b7 89       	ldd	r27, Z+23	; 0x17
     582:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     584:	a0 89       	ldd	r26, Z+16	; 0x10
     586:	b1 89       	ldd	r27, Z+17	; 0x11
     588:	8c 91       	ld	r24, X
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     58e:	93 8d       	ldd	r25, Z+27	; 0x1b
     590:	84 8d       	ldd	r24, Z+28	; 0x1c
     592:	98 13       	cpse	r25, r24
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     596:	02 88       	ldd	r0, Z+18	; 0x12
     598:	f3 89       	ldd	r31, Z+19	; 0x13
     59a:	e0 2d       	mov	r30, r0
     59c:	80 81       	ld	r24, Z
     59e:	8f 7d       	andi	r24, 0xDF	; 223
     5a0:	80 83       	st	Z, r24
     5a2:	08 95       	ret

000005a4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
  _written = true;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ba:	98 13       	cpse	r25, r24
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <_ZN14HardwareSerial5writeEh+0x24>
     5be:	e8 89       	ldd	r30, Y+16	; 0x10
     5c0:	f9 89       	ldd	r31, Y+17	; 0x11
     5c2:	80 81       	ld	r24, Z
     5c4:	85 fd       	sbrc	r24, 5
     5c6:	24 c0       	rjmp	.+72     	; 0x610 <_ZN14HardwareSerial5writeEh+0x6c>
     5c8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     5ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	0f 73       	andi	r16, 0x3F	; 63
     5d4:	11 27       	eor	r17, r17
     5d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     5d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5da:	e8 12       	cpse	r14, r24
     5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	07 fc       	sbrc	r0, 7
     5e2:	fa cf       	rjmp	.-12     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     5e4:	e8 89       	ldd	r30, Y+16	; 0x10
     5e6:	f9 89       	ldd	r31, Y+17	; 0x11
     5e8:	80 81       	ld	r24, Z
     5ea:	85 ff       	sbrs	r24, 5
     5ec:	f5 cf       	rjmp	.-22     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     5f4:	f1 cf       	rjmp	.-30     	; 0x5d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     5f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5f8:	fe 01       	movw	r30, r28
     5fa:	e8 0f       	add	r30, r24
     5fc:	f1 1d       	adc	r31, r1
     5fe:	e3 5a       	subi	r30, 0xA3	; 163
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     604:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     606:	ea 89       	ldd	r30, Y+18	; 0x12
     608:	fb 89       	ldd	r31, Y+19	; 0x13
     60a:	80 81       	ld	r24, Z
     60c:	80 62       	ori	r24, 0x20	; 32
     60e:	07 c0       	rjmp	.+14     	; 0x61e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     610:	ee 89       	ldd	r30, Y+22	; 0x16
     612:	ff 89       	ldd	r31, Y+23	; 0x17
     614:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     616:	e8 89       	ldd	r30, Y+16	; 0x10
     618:	f9 89       	ldd	r31, Y+17	; 0x11
     61a:	80 81       	ld	r24, Z
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	08 95       	ret

00000632 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     638:	88 8d       	ldd	r24, Y+24	; 0x18
     63a:	88 23       	and	r24, r24
     63c:	c9 f0       	breq	.+50     	; 0x670 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     63e:	ea 89       	ldd	r30, Y+18	; 0x12
     640:	fb 89       	ldd	r31, Y+19	; 0x13
     642:	80 81       	ld	r24, Z
     644:	85 fd       	sbrc	r24, 5
     646:	05 c0       	rjmp	.+10     	; 0x652 <_ZN14HardwareSerial5flushEv+0x20>
     648:	a8 89       	ldd	r26, Y+16	; 0x10
     64a:	b9 89       	ldd	r27, Y+17	; 0x11
     64c:	8c 91       	ld	r24, X
     64e:	86 fd       	sbrc	r24, 6
     650:	0f c0       	rjmp	.+30     	; 0x670 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	07 fc       	sbrc	r0, 7
     656:	f5 cf       	rjmp	.-22     	; 0x642 <_ZN14HardwareSerial5flushEv+0x10>
     658:	80 81       	ld	r24, Z
     65a:	85 ff       	sbrs	r24, 5
     65c:	f2 cf       	rjmp	.-28     	; 0x642 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     65e:	a8 89       	ldd	r26, Y+16	; 0x10
     660:	b9 89       	ldd	r27, Y+17	; 0x11
     662:	8c 91       	ld	r24, X
     664:	85 ff       	sbrs	r24, 5
     666:	ed cf       	rjmp	.-38     	; 0x642 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     66e:	e7 cf       	rjmp	.-50     	; 0x63e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	6a 01       	movw	r12, r20
     688:	7b 01       	movw	r14, r22
     68a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     68c:	e8 89       	ldd	r30, Y+16	; 0x10
     68e:	f9 89       	ldd	r31, Y+17	; 0x11
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     694:	41 15       	cp	r20, r1
     696:	51 4e       	sbci	r21, 0xE1	; 225
     698:	61 05       	cpc	r22, r1
     69a:	71 05       	cpc	r23, r1
     69c:	b1 f0       	breq	.+44     	; 0x6ca <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	79 e0       	ldi	r23, 0x09	; 9
     6a2:	8d e3       	ldi	r24, 0x3D	; 61
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	a7 01       	movw	r20, r14
     6a8:	96 01       	movw	r18, r12
     6aa:	0e 94 e5 07 	call	0xfca	; 0xfca <__udivmodsi4>
     6ae:	da 01       	movw	r26, r20
     6b0:	c9 01       	movw	r24, r18
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	a1 09       	sbc	r26, r1
     6b6:	b1 09       	sbc	r27, r1
     6b8:	b6 95       	lsr	r27
     6ba:	a7 95       	ror	r26
     6bc:	97 95       	ror	r25
     6be:	87 95       	ror	r24
     6c0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6c2:	21 15       	cp	r18, r1
     6c4:	80 e1       	ldi	r24, 0x10	; 16
     6c6:	38 07       	cpc	r19, r24
     6c8:	a8 f0       	brcs	.+42     	; 0x6f4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     6ca:	e8 89       	ldd	r30, Y+16	; 0x10
     6cc:	f9 89       	ldd	r31, Y+17	; 0x11
     6ce:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     6d0:	60 e8       	ldi	r22, 0x80	; 128
     6d2:	74 e8       	ldi	r23, 0x84	; 132
     6d4:	8e e1       	ldi	r24, 0x1E	; 30
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	a7 01       	movw	r20, r14
     6da:	96 01       	movw	r18, r12
     6dc:	0e 94 e5 07 	call	0xfca	; 0xfca <__udivmodsi4>
     6e0:	da 01       	movw	r26, r20
     6e2:	c9 01       	movw	r24, r18
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	a1 09       	sbc	r26, r1
     6e8:	b1 09       	sbc	r27, r1
     6ea:	b6 95       	lsr	r27
     6ec:	a7 95       	ror	r26
     6ee:	97 95       	ror	r25
     6f0:	87 95       	ror	r24
     6f2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     6f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     6f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     6f8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     6fa:	ee 85       	ldd	r30, Y+14	; 0x0e
     6fc:	ff 85       	ldd	r31, Y+15	; 0x0f
     6fe:	20 83       	st	Z, r18

  _written = false;
     700:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     702:	ec 89       	ldd	r30, Y+20	; 0x14
     704:	fd 89       	ldd	r31, Y+21	; 0x15
     706:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     708:	ea 89       	ldd	r30, Y+18	; 0x12
     70a:	fb 89       	ldd	r31, Y+19	; 0x13
     70c:	80 81       	ld	r24, Z
     70e:	80 61       	ori	r24, 0x10	; 16
     710:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     712:	ea 89       	ldd	r30, Y+18	; 0x12
     714:	fb 89       	ldd	r31, Y+19	; 0x13
     716:	80 81       	ld	r24, Z
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     71c:	ea 89       	ldd	r30, Y+18	; 0x12
     71e:	fb 89       	ldd	r31, Y+19	; 0x13
     720:	80 81       	ld	r24, Z
     722:	80 68       	ori	r24, 0x80	; 128
     724:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     726:	ea 89       	ldd	r30, Y+18	; 0x12
     728:	fb 89       	ldd	r31, Y+19	; 0x13
     72a:	80 81       	ld	r24, Z
     72c:	8f 7d       	andi	r24, 0xDF	; 223
     72e:	80 83       	st	Z, r24
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	2f 93       	push	r18
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     754:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end+0x10>
     758:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__data_end+0x11>
     75c:	80 81       	ld	r24, Z
     75e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__data_end+0x16>
     762:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__data_end+0x17>
     766:	82 fd       	sbrc	r24, 2
     768:	12 c0       	rjmp	.+36     	; 0x78e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     76a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     76c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <__data_end+0x19>
     770:	8f 5f       	subi	r24, 0xFF	; 255
     772:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     774:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__data_end+0x1a>
     778:	82 17       	cp	r24, r18
     77a:	51 f0       	breq	.+20     	; 0x790 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     77c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <__data_end+0x19>
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ec 5b       	subi	r30, 0xBC	; 188
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     788:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <__data_end+0x19>
     78c:	01 c0       	rjmp	.+2      	; 0x790 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     78e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     7c6:	84 e4       	ldi	r24, 0x44	; 68
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	0f 90       	pop	r0
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	18 95       	reti

000007f0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     7f0:	84 e4       	ldi	r24, 0x44	; 68
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN14HardwareSerial9availableEv>
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	89 2b       	or	r24, r25
     7fc:	09 f4       	brne	.+2      	; 0x800 <_Z17Serial0_availablev+0x10>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
}
     800:	82 2f       	mov	r24, r18
     802:	08 95       	ret

00000804 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     804:	e4 e4       	ldi	r30, 0x44	; 68
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	13 82       	std	Z+3, r1	; 0x03
     80a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     80c:	88 ee       	ldi	r24, 0xE8	; 232
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	84 83       	std	Z+4, r24	; 0x04
     816:	95 83       	std	Z+5, r25	; 0x05
     818:	a6 83       	std	Z+6, r26	; 0x06
     81a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     81c:	87 e2       	ldi	r24, 0x27	; 39
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
     824:	85 ec       	ldi	r24, 0xC5	; 197
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	95 87       	std	Z+13, r25	; 0x0d
     82a:	84 87       	std	Z+12, r24	; 0x0c
     82c:	84 ec       	ldi	r24, 0xC4	; 196
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	97 87       	std	Z+15, r25	; 0x0f
     832:	86 87       	std	Z+14, r24	; 0x0e
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	91 8b       	std	Z+17, r25	; 0x11
     83a:	80 8b       	std	Z+16, r24	; 0x10
     83c:	81 ec       	ldi	r24, 0xC1	; 193
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	93 8b       	std	Z+19, r25	; 0x13
     842:	82 8b       	std	Z+18, r24	; 0x12
     844:	82 ec       	ldi	r24, 0xC2	; 194
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	95 8b       	std	Z+21, r25	; 0x15
     84a:	84 8b       	std	Z+20, r24	; 0x14
     84c:	86 ec       	ldi	r24, 0xC6	; 198
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	97 8b       	std	Z+23, r25	; 0x17
     852:	86 8b       	std	Z+22, r24	; 0x16
     854:	11 8e       	std	Z+25, r1	; 0x19
     856:	12 8e       	std	Z+26, r1	; 0x1a
     858:	13 8e       	std	Z+27, r1	; 0x1b
     85a:	14 8e       	std	Z+28, r1	; 0x1c
     85c:	08 95       	ret

0000085e <initVariant>:
     85e:	08 95       	ret

00000860 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     860:	0e 94 81 06 	call	0xd02	; 0xd02 <init>

	initVariant();
     864:	0e 94 2f 04 	call	0x85e	; 0x85e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     868:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     86c:	c3 ea       	ldi	r28, 0xA3	; 163
     86e:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     870:	0e 94 8a 00 	call	0x114	; 0x114 <loop>
		if (serialEventRun) serialEventRun();
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	e1 f3       	breq	.-8      	; 0x870 <main+0x10>
     878:	0e 94 a3 02 	call	0x546	; 0x546 <_Z14serialEventRunv>
     87c:	f9 cf       	rjmp	.-14     	; 0x870 <main+0x10>

0000087e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	6c 01       	movw	r12, r24
     890:	7a 01       	movw	r14, r20
     892:	8b 01       	movw	r16, r22
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
     898:	ce 15       	cp	r28, r14
     89a:	df 05       	cpc	r29, r15
     89c:	81 f0       	breq	.+32     	; 0x8be <_ZN5Print5writeEPKhj+0x40>
     89e:	d8 01       	movw	r26, r16
     8a0:	6d 91       	ld	r22, X+
     8a2:	8d 01       	movw	r16, r26
     8a4:	d6 01       	movw	r26, r12
     8a6:	ed 91       	ld	r30, X+
     8a8:	fc 91       	ld	r31, X
     8aa:	01 90       	ld	r0, Z+
     8ac:	f0 81       	ld	r31, Z
     8ae:	e0 2d       	mov	r30, r0
     8b0:	c6 01       	movw	r24, r12
     8b2:	09 95       	icall
     8b4:	89 2b       	or	r24, r25
     8b6:	11 f0       	breq	.+4      	; 0x8bc <_ZN5Print5writeEPKhj+0x3e>
     8b8:	21 96       	adiw	r28, 0x01	; 1
     8ba:	ee cf       	rjmp	.-36     	; 0x898 <_ZN5Print5writeEPKhj+0x1a>
     8bc:	7e 01       	movw	r14, r28
     8be:	c7 01       	movw	r24, r14
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	08 95       	ret

000008d2 <_ZN5Print5writeEPKc>:
     8d2:	61 15       	cp	r22, r1
     8d4:	71 05       	cpc	r23, r1
     8d6:	79 f0       	breq	.+30     	; 0x8f6 <_ZN5Print5writeEPKc+0x24>
     8d8:	fb 01       	movw	r30, r22
     8da:	01 90       	ld	r0, Z+
     8dc:	00 20       	and	r0, r0
     8de:	e9 f7       	brne	.-6      	; 0x8da <_ZN5Print5writeEPKc+0x8>
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	af 01       	movw	r20, r30
     8e4:	46 1b       	sub	r20, r22
     8e6:	57 0b       	sbc	r21, r23
     8e8:	dc 01       	movw	r26, r24
     8ea:	ed 91       	ld	r30, X+
     8ec:	fc 91       	ld	r31, X
     8ee:	02 80       	ldd	r0, Z+2	; 0x02
     8f0:	f3 81       	ldd	r31, Z+3	; 0x03
     8f2:	e0 2d       	mov	r30, r0
     8f4:	09 94       	ijmp
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	08 95       	ret

000008fc <_ZN5Print5printEPKc>:
     8fc:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_ZN5Print5writeEPKc>

00000900 <_ZN5Print5printEc>:
     900:	dc 01       	movw	r26, r24
     902:	ed 91       	ld	r30, X+
     904:	fc 91       	ld	r31, X
     906:	01 90       	ld	r0, Z+
     908:	f0 81       	ld	r31, Z
     90a:	e0 2d       	mov	r30, r0
     90c:	09 94       	ijmp

0000090e <_ZN5Print7printlnEv>:
     90e:	65 e3       	ldi	r22, 0x35	; 53
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_ZN5Print5writeEPKc>

00000916 <_ZN5Print7printlnEPKc>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN5Print5writeEPKc>
     924:	8c 01       	movw	r16, r24
     926:	ce 01       	movw	r24, r28
     928:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN5Print7printlnEv>
     92c:	80 0f       	add	r24, r16
     92e:	91 1f       	adc	r25, r17
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <_ZN5Print11printNumberEmh>:
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	a1 97       	sbiw	r28, 0x21	; 33
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	7c 01       	movw	r14, r24
     960:	fa 01       	movw	r30, r20
     962:	cb 01       	movw	r24, r22
     964:	19 a2       	std	Y+33, r1	; 0x21
     966:	22 30       	cpi	r18, 0x02	; 2
     968:	08 f4       	brcc	.+2      	; 0x96c <_ZN5Print11printNumberEmh+0x32>
     96a:	2a e0       	ldi	r18, 0x0A	; 10
     96c:	8e 01       	movw	r16, r28
     96e:	0f 5d       	subi	r16, 0xDF	; 223
     970:	1f 4f       	sbci	r17, 0xFF	; 255
     972:	82 2e       	mov	r8, r18
     974:	91 2c       	mov	r9, r1
     976:	a1 2c       	mov	r10, r1
     978:	b1 2c       	mov	r11, r1
     97a:	bf 01       	movw	r22, r30
     97c:	a5 01       	movw	r20, r10
     97e:	94 01       	movw	r18, r8
     980:	0e 94 e5 07 	call	0xfca	; 0xfca <__udivmodsi4>
     984:	f9 01       	movw	r30, r18
     986:	ca 01       	movw	r24, r20
     988:	01 50       	subi	r16, 0x01	; 1
     98a:	11 09       	sbc	r17, r1
     98c:	6a 30       	cpi	r22, 0x0A	; 10
     98e:	10 f4       	brcc	.+4      	; 0x994 <_ZN5Print11printNumberEmh+0x5a>
     990:	60 5d       	subi	r22, 0xD0	; 208
     992:	01 c0       	rjmp	.+2      	; 0x996 <_ZN5Print11printNumberEmh+0x5c>
     994:	69 5c       	subi	r22, 0xC9	; 201
     996:	d8 01       	movw	r26, r16
     998:	6c 93       	st	X, r22
     99a:	23 2b       	or	r18, r19
     99c:	24 2b       	or	r18, r20
     99e:	25 2b       	or	r18, r21
     9a0:	61 f7       	brne	.-40     	; 0x97a <_ZN5Print11printNumberEmh+0x40>
     9a2:	b8 01       	movw	r22, r16
     9a4:	c7 01       	movw	r24, r14
     9a6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN5Print5writeEPKc>
     9aa:	a1 96       	adiw	r28, 0x21	; 33
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	bf 90       	pop	r11
     9c4:	af 90       	pop	r10
     9c6:	9f 90       	pop	r9
     9c8:	8f 90       	pop	r8
     9ca:	08 95       	ret

000009cc <_ZN5Print5printEmi>:
     9cc:	21 15       	cp	r18, r1
     9ce:	31 05       	cpc	r19, r1
     9d0:	41 f4       	brne	.+16     	; 0x9e2 <_ZN5Print5printEmi+0x16>
     9d2:	dc 01       	movw	r26, r24
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	01 90       	ld	r0, Z+
     9da:	f0 81       	ld	r31, Z
     9dc:	e0 2d       	mov	r30, r0
     9de:	64 2f       	mov	r22, r20
     9e0:	09 94       	ijmp
     9e2:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_ZN5Print11printNumberEmh>

000009e6 <_ZN5Print5printEji>:
     9e6:	9a 01       	movw	r18, r20
     9e8:	ab 01       	movw	r20, r22
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <_ZN5Print5printEmi>

000009f2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	8c 01       	movw	r16, r24
     a0e:	6a 01       	movw	r12, r20
     a10:	7b 01       	movw	r14, r22
     a12:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     a14:	9a 01       	movw	r18, r20
     a16:	ab 01       	movw	r20, r22
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__unordsf2>
     a20:	88 23       	and	r24, r24
     a22:	19 f0       	breq	.+6      	; 0xa2a <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     a24:	68 e3       	ldi	r22, 0x38	; 56
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	27 c0       	rjmp	.+78     	; 0xa78 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     a2a:	46 01       	movw	r8, r12
     a2c:	57 01       	movw	r10, r14
     a2e:	e8 94       	clt
     a30:	b7 f8       	bld	r11, 7
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	5f e7       	ldi	r21, 0x7F	; 127
     a3a:	c5 01       	movw	r24, r10
     a3c:	b4 01       	movw	r22, r8
     a3e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__unordsf2>
     a42:	81 11       	cpse	r24, r1
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <_ZN5Print10printFloatEdh+0x6e>
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	3f ef       	ldi	r19, 0xFF	; 255
     a4a:	4f e7       	ldi	r20, 0x7F	; 127
     a4c:	5f e7       	ldi	r21, 0x7F	; 127
     a4e:	c5 01       	movw	r24, r10
     a50:	b4 01       	movw	r22, r8
     a52:	0e 94 83 07 	call	0xf06	; 0xf06 <__cmpsf2>
     a56:	18 16       	cp	r1, r24
     a58:	1c f4       	brge	.+6      	; 0xa60 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     a5a:	6c e3       	ldi	r22, 0x3C	; 60
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	0c c0       	rjmp	.+24     	; 0xa78 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	3f ef       	ldi	r19, 0xFF	; 255
     a64:	4f e7       	ldi	r20, 0x7F	; 127
     a66:	5f e4       	ldi	r21, 0x4F	; 79
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	94 f4       	brge	.+36     	; 0xa98 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     a74:	60 e4       	ldi	r22, 0x40	; 64
     a76:	71 e0       	ldi	r23, 0x01	; 1
     a78:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	bf 90       	pop	r11
     a8c:	af 90       	pop	r10
     a8e:	9f 90       	pop	r9
     a90:	8f 90       	pop	r8
     a92:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     a94:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	3f ef       	ldi	r19, 0xFF	; 255
     a9c:	4f e7       	ldi	r20, 0x7F	; 127
     a9e:	5f ec       	ldi	r21, 0xCF	; 207
     aa0:	c7 01       	movw	r24, r14
     aa2:	b6 01       	movw	r22, r12
     aa4:	0e 94 83 07 	call	0xf06	; 0xf06 <__cmpsf2>
     aa8:	87 fd       	sbrc	r24, 7
     aaa:	e4 cf       	rjmp	.-56     	; 0xa74 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	a9 01       	movw	r20, r18
     ab2:	c7 01       	movw	r24, r14
     ab4:	b6 01       	movw	r22, r12
     ab6:	0e 94 83 07 	call	0xf06	; 0xf06 <__cmpsf2>
     aba:	87 ff       	sbrs	r24, 7
     abc:	0a c0       	rjmp	.+20     	; 0xad2 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     abe:	6d e2       	ldi	r22, 0x2D	; 45
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 80 04 	call	0x900	; 0x900 <_ZN5Print5printEc>
     ac6:	ec 01       	movw	r28, r24
     number = -number;
     ac8:	f7 fa       	bst	r15, 7
     aca:	f0 94       	com	r15
     acc:	f7 f8       	bld	r15, 7
     ace:	f0 94       	com	r15
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     ad6:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     ae0:	7b 14       	cp	r7, r11
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     af0:	b3 94       	inc	r11
     af2:	f6 cf       	rjmp	.-20     	; 0xae0 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     af4:	a7 01       	movw	r20, r14
     af6:	96 01       	movw	r18, r12
     af8:	0e 94 17 07 	call	0xe2e	; 0xe2e <__addsf3>
     afc:	6b 01       	movw	r12, r22
     afe:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     b00:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     b04:	4b 01       	movw	r8, r22
     b06:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     b08:	2a e0       	ldi	r18, 0x0A	; 10
     b0a:	ab 01       	movw	r20, r22
     b0c:	bc 01       	movw	r22, r24
     b0e:	c8 01       	movw	r24, r16
     b10:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     b14:	c8 0f       	add	r28, r24
     b16:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     b18:	77 20       	and	r7, r7
     b1a:	b9 f1       	breq	.+110    	; 0xb8a <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     b1c:	c5 01       	movw	r24, r10
     b1e:	b4 01       	movw	r22, r8
     b20:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__floatunsisf>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	c7 01       	movw	r24, r14
     b2a:	b6 01       	movw	r22, r12
     b2c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__subsf3>
     b30:	6b 01       	movw	r12, r22
     b32:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     b34:	6e e2       	ldi	r22, 0x2E	; 46
     b36:	c8 01       	movw	r24, r16
     b38:	0e 94 80 04 	call	0x900	; 0x900 <_ZN5Print5printEc>
     b3c:	c8 0f       	add	r28, r24
     b3e:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e2       	ldi	r20, 0x20	; 32
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__mulsf3>
     b50:	4b 01       	movw	r8, r22
     b52:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     b54:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     b58:	6b 01       	movw	r12, r22
     b5a:	7c 01       	movw	r14, r24
    n += print(toPrint);
     b5c:	4a e0       	ldi	r20, 0x0A	; 10
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	c8 01       	movw	r24, r16
     b62:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN5Print5printEji>
     b66:	c8 0f       	add	r28, r24
     b68:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     b6a:	b6 01       	movw	r22, r12
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__floatunsisf>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__subsf3>
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
     b84:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     b86:	71 10       	cpse	r7, r1
     b88:	db cf       	rjmp	.-74     	; 0xb40 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     b8a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	7f 90       	pop	r7
     ba6:	08 95       	ret

00000ba8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     ba8:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN5Print10printFloatEdh>

00000bac <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <timer0_millis>
     bc6:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <timer0_millis+0x1>
     bca:	a0 91 e4 01 	lds	r26, 0x01E4	; 0x8001e4 <timer0_millis+0x2>
     bce:	b0 91 e5 01 	lds	r27, 0x01E5	; 0x8001e5 <timer0_millis+0x3>
     bd2:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <timer0_fract>
     bd6:	23 e0       	ldi	r18, 0x03	; 3
     bd8:	23 0f       	add	r18, r19
     bda:	2d 37       	cpi	r18, 0x7D	; 125
     bdc:	20 f4       	brcc	.+8      	; 0xbe6 <__vector_16+0x3a>
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	a1 1d       	adc	r26, r1
     be2:	b1 1d       	adc	r27, r1
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__vector_16+0x44>
     be6:	26 e8       	ldi	r18, 0x86	; 134
     be8:	23 0f       	add	r18, r19
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	a1 1d       	adc	r26, r1
     bee:	b1 1d       	adc	r27, r1
     bf0:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <timer0_fract>
     bf4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <timer0_millis>
     bf8:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <timer0_millis+0x1>
     bfc:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <timer0_millis+0x2>
     c00:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <timer0_millis+0x3>
     c04:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timer0_overflow_count>
     c08:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <timer0_overflow_count+0x1>
     c0c:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <timer0_overflow_count+0x2>
     c10:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <timer0_overflow_count+0x3>
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	a1 1d       	adc	r26, r1
     c18:	b1 1d       	adc	r27, r1
     c1a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <timer0_overflow_count>
     c1e:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <timer0_overflow_count+0x1>
     c22:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <timer0_overflow_count+0x2>
     c26:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <timer0_overflow_count+0x3>
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <micros>:
     c40:	3f b7       	in	r19, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timer0_overflow_count>
     c48:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <timer0_overflow_count+0x1>
     c4c:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <timer0_overflow_count+0x2>
     c50:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <timer0_overflow_count+0x3>
     c54:	26 b5       	in	r18, 0x26	; 38
     c56:	a8 9b       	sbis	0x15, 0	; 21
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <micros+0x24>
     c5a:	2f 3f       	cpi	r18, 0xFF	; 255
     c5c:	19 f0       	breq	.+6      	; 0xc64 <micros+0x24>
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	a1 1d       	adc	r26, r1
     c62:	b1 1d       	adc	r27, r1
     c64:	3f bf       	out	0x3f, r19	; 63
     c66:	ba 2f       	mov	r27, r26
     c68:	a9 2f       	mov	r26, r25
     c6a:	98 2f       	mov	r25, r24
     c6c:	88 27       	eor	r24, r24
     c6e:	82 0f       	add	r24, r18
     c70:	91 1d       	adc	r25, r1
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	42 e0       	ldi	r20, 0x02	; 2
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	88 1f       	adc	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	4a 95       	dec	r20
     c86:	d1 f7       	brne	.-12     	; 0xc7c <micros+0x3c>
     c88:	08 95       	ret

00000c8a <delay>:
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	6b 01       	movw	r12, r22
     c9c:	7c 01       	movw	r14, r24
     c9e:	0e 94 20 06 	call	0xc40	; 0xc40 <micros>
     ca2:	4b 01       	movw	r8, r22
     ca4:	5c 01       	movw	r10, r24
     ca6:	c1 14       	cp	r12, r1
     ca8:	d1 04       	cpc	r13, r1
     caa:	e1 04       	cpc	r14, r1
     cac:	f1 04       	cpc	r15, r1
     cae:	01 f1       	breq	.+64     	; 0xcf0 <delay+0x66>
     cb0:	0e 94 15 07 	call	0xe2a	; 0xe2a <yield>
     cb4:	0e 94 20 06 	call	0xc40	; 0xc40 <micros>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	88 19       	sub	r24, r8
     cbe:	99 09       	sbc	r25, r9
     cc0:	aa 09       	sbc	r26, r10
     cc2:	bb 09       	sbc	r27, r11
     cc4:	88 3e       	cpi	r24, 0xE8	; 232
     cc6:	93 40       	sbci	r25, 0x03	; 3
     cc8:	a1 05       	cpc	r26, r1
     cca:	b1 05       	cpc	r27, r1
     ccc:	60 f3       	brcs	.-40     	; 0xca6 <delay+0x1c>
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	c2 1a       	sub	r12, r18
     cd2:	d1 08       	sbc	r13, r1
     cd4:	e1 08       	sbc	r14, r1
     cd6:	f1 08       	sbc	r15, r1
     cd8:	88 ee       	ldi	r24, 0xE8	; 232
     cda:	88 0e       	add	r8, r24
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	98 1e       	adc	r9, r24
     ce0:	a1 1c       	adc	r10, r1
     ce2:	b1 1c       	adc	r11, r1
     ce4:	c1 14       	cp	r12, r1
     ce6:	d1 04       	cpc	r13, r1
     ce8:	e1 04       	cpc	r14, r1
     cea:	f1 04       	cpc	r15, r1
     cec:	19 f7       	brne	.-58     	; 0xcb4 <delay+0x2a>
     cee:	db cf       	rjmp	.-74     	; 0xca6 <delay+0x1c>
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	08 95       	ret

00000d02 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d02:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d04:	84 b5       	in	r24, 0x24	; 36
     d06:	82 60       	ori	r24, 0x02	; 2
     d08:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d0a:	84 b5       	in	r24, 0x24	; 36
     d0c:	81 60       	ori	r24, 0x01	; 1
     d0e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d10:	85 b5       	in	r24, 0x25	; 37
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d16:	85 b5       	in	r24, 0x25	; 37
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d1c:	ee e6       	ldi	r30, 0x6E	; 110
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d26:	e1 e8       	ldi	r30, 0x81	; 129
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d32:	80 81       	ld	r24, Z
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d38:	e0 e8       	ldi	r30, 0x80	; 128
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d42:	e1 eb       	ldi	r30, 0xB1	; 177
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	84 60       	ori	r24, 0x04	; 4
     d4a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d4c:	e0 eb       	ldi	r30, 0xB0	; 176
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d56:	ea e7       	ldi	r30, 0x7A	; 122
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d60:	80 81       	ld	r24, Z
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d66:	80 81       	ld	r24, Z
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d6c:	80 81       	ld	r24, Z
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d72:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d76:	08 95       	ret

00000d78 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     d78:	8e 30       	cpi	r24, 0x0E	; 14
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <analogRead+0x6>
     d7c:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     d7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d82:	90 e4       	ldi	r25, 0x40	; 64
     d84:	29 9f       	mul	r18, r25
     d86:	90 01       	movw	r18, r0
     d88:	11 24       	eor	r1, r1
     d8a:	87 70       	andi	r24, 0x07	; 7
     d8c:	82 2b       	or	r24, r18
     d8e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     d92:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     d9c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     da0:	86 fd       	sbrc	r24, 6
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     da4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
     da8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     dac:	90 e0       	ldi	r25, 0x00	; 0
}
     dae:	92 2b       	or	r25, r18
     db0:	08 95       	ret

00000db2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	e8 59       	subi	r30, 0x98	; 152
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     dc0:	fc 01       	movw	r30, r24
     dc2:	e4 58       	subi	r30, 0x84	; 132
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     dc8:	88 23       	and	r24, r24
     dca:	61 f1       	breq	.+88     	; 0xe24 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	fc 01       	movw	r30, r24
     dd4:	e6 56       	subi	r30, 0x66	; 102
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	c5 91       	lpm	r28, Z+
     dda:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     ddc:	fc 01       	movw	r30, r24
     dde:	e0 57       	subi	r30, 0x70	; 112
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	a5 91       	lpm	r26, Z+
     de4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     de6:	61 11       	cpse	r22, r1
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     dea:	9f b7       	in	r25, 0x3f	; 63
                cli();
     dec:	f8 94       	cli
		*reg &= ~bit;
     dee:	88 81       	ld	r24, Y
     df0:	20 95       	com	r18
     df2:	82 23       	and	r24, r18
     df4:	88 83       	st	Y, r24
		*out &= ~bit;
     df6:	ec 91       	ld	r30, X
     df8:	2e 23       	and	r18, r30
     dfa:	0b c0       	rjmp	.+22     	; 0xe12 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     dfc:	62 30       	cpi	r22, 0x02	; 2
     dfe:	61 f4       	brne	.+24     	; 0xe18 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e00:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e02:	f8 94       	cli
		*reg &= ~bit;
     e04:	88 81       	ld	r24, Y
     e06:	32 2f       	mov	r19, r18
     e08:	30 95       	com	r19
     e0a:	83 23       	and	r24, r19
     e0c:	88 83       	st	Y, r24
		*out |= bit;
     e0e:	ec 91       	ld	r30, X
     e10:	2e 2b       	or	r18, r30
     e12:	2c 93       	st	X, r18
		SREG = oldSREG;
     e14:	9f bf       	out	0x3f, r25	; 63
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     e18:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e1a:	f8 94       	cli
		*reg |= bit;
     e1c:	e8 81       	ld	r30, Y
     e1e:	2e 2b       	or	r18, r30
     e20:	28 83       	st	Y, r18
		SREG = oldSREG;
     e22:	8f bf       	out	0x3f, r24	; 63
	}
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     e2a:	08 95       	ret

00000e2c <__subsf3>:
     e2c:	50 58       	subi	r21, 0x80	; 128

00000e2e <__addsf3>:
     e2e:	bb 27       	eor	r27, r27
     e30:	aa 27       	eor	r26, r26
     e32:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__addsf3x>
     e36:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_round>
     e3a:	0e 94 b1 01 	call	0x362	; 0x362 <__fp_pscA>
     e3e:	38 f0       	brcs	.+14     	; 0xe4e <__addsf3+0x20>
     e40:	0e 94 b8 01 	call	0x370	; 0x370 <__fp_pscB>
     e44:	20 f0       	brcs	.+8      	; 0xe4e <__addsf3+0x20>
     e46:	39 f4       	brne	.+14     	; 0xe56 <__addsf3+0x28>
     e48:	9f 3f       	cpi	r25, 0xFF	; 255
     e4a:	19 f4       	brne	.+6      	; 0xe52 <__addsf3+0x24>
     e4c:	26 f4       	brtc	.+8      	; 0xe56 <__addsf3+0x28>
     e4e:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_nan>
     e52:	0e f4       	brtc	.+2      	; 0xe56 <__addsf3+0x28>
     e54:	e0 95       	com	r30
     e56:	e7 fb       	bst	r30, 7
     e58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__fp_inf>

00000e5c <__addsf3x>:
     e5c:	e9 2f       	mov	r30, r25
     e5e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_split3>
     e62:	58 f3       	brcs	.-42     	; 0xe3a <__addsf3+0xc>
     e64:	ba 17       	cp	r27, r26
     e66:	62 07       	cpc	r22, r18
     e68:	73 07       	cpc	r23, r19
     e6a:	84 07       	cpc	r24, r20
     e6c:	95 07       	cpc	r25, r21
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__addsf3x+0x1c>
     e70:	79 f4       	brne	.+30     	; 0xe90 <__addsf3x+0x34>
     e72:	a6 f5       	brtc	.+104    	; 0xedc <__addsf3x+0x80>
     e74:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_zero>
     e78:	0e f4       	brtc	.+2      	; 0xe7c <__addsf3x+0x20>
     e7a:	e0 95       	com	r30
     e7c:	0b 2e       	mov	r0, r27
     e7e:	ba 2f       	mov	r27, r26
     e80:	a0 2d       	mov	r26, r0
     e82:	0b 01       	movw	r0, r22
     e84:	b9 01       	movw	r22, r18
     e86:	90 01       	movw	r18, r0
     e88:	0c 01       	movw	r0, r24
     e8a:	ca 01       	movw	r24, r20
     e8c:	a0 01       	movw	r20, r0
     e8e:	11 24       	eor	r1, r1
     e90:	ff 27       	eor	r31, r31
     e92:	59 1b       	sub	r21, r25
     e94:	99 f0       	breq	.+38     	; 0xebc <__addsf3x+0x60>
     e96:	59 3f       	cpi	r21, 0xF9	; 249
     e98:	50 f4       	brcc	.+20     	; 0xeae <__addsf3x+0x52>
     e9a:	50 3e       	cpi	r21, 0xE0	; 224
     e9c:	68 f1       	brcs	.+90     	; 0xef8 <__addsf3x+0x9c>
     e9e:	1a 16       	cp	r1, r26
     ea0:	f0 40       	sbci	r31, 0x00	; 0
     ea2:	a2 2f       	mov	r26, r18
     ea4:	23 2f       	mov	r18, r19
     ea6:	34 2f       	mov	r19, r20
     ea8:	44 27       	eor	r20, r20
     eaa:	58 5f       	subi	r21, 0xF8	; 248
     eac:	f3 cf       	rjmp	.-26     	; 0xe94 <__addsf3x+0x38>
     eae:	46 95       	lsr	r20
     eb0:	37 95       	ror	r19
     eb2:	27 95       	ror	r18
     eb4:	a7 95       	ror	r26
     eb6:	f0 40       	sbci	r31, 0x00	; 0
     eb8:	53 95       	inc	r21
     eba:	c9 f7       	brne	.-14     	; 0xeae <__addsf3x+0x52>
     ebc:	7e f4       	brtc	.+30     	; 0xedc <__addsf3x+0x80>
     ebe:	1f 16       	cp	r1, r31
     ec0:	ba 0b       	sbc	r27, r26
     ec2:	62 0b       	sbc	r22, r18
     ec4:	73 0b       	sbc	r23, r19
     ec6:	84 0b       	sbc	r24, r20
     ec8:	ba f0       	brmi	.+46     	; 0xef8 <__addsf3x+0x9c>
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	a1 f0       	breq	.+40     	; 0xef6 <__addsf3x+0x9a>
     ece:	ff 0f       	add	r31, r31
     ed0:	bb 1f       	adc	r27, r27
     ed2:	66 1f       	adc	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	c2 f7       	brpl	.-16     	; 0xeca <__addsf3x+0x6e>
     eda:	0e c0       	rjmp	.+28     	; 0xef8 <__addsf3x+0x9c>
     edc:	ba 0f       	add	r27, r26
     ede:	62 1f       	adc	r22, r18
     ee0:	73 1f       	adc	r23, r19
     ee2:	84 1f       	adc	r24, r20
     ee4:	48 f4       	brcc	.+18     	; 0xef8 <__addsf3x+0x9c>
     ee6:	87 95       	ror	r24
     ee8:	77 95       	ror	r23
     eea:	67 95       	ror	r22
     eec:	b7 95       	ror	r27
     eee:	f7 95       	ror	r31
     ef0:	9e 3f       	cpi	r25, 0xFE	; 254
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <__addsf3x+0x9a>
     ef4:	b0 cf       	rjmp	.-160    	; 0xe56 <__addsf3+0x28>
     ef6:	93 95       	inc	r25
     ef8:	88 0f       	add	r24, r24
     efa:	08 f0       	brcs	.+2      	; 0xefe <__addsf3x+0xa2>
     efc:	99 27       	eor	r25, r25
     efe:	ee 0f       	add	r30, r30
     f00:	97 95       	ror	r25
     f02:	87 95       	ror	r24
     f04:	08 95       	ret

00000f06 <__cmpsf2>:
     f06:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_cmp>
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__cmpsf2+0x8>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret

00000f10 <__fixunssfsi>:
     f10:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_splitA>
     f14:	88 f0       	brcs	.+34     	; 0xf38 <__fixunssfsi+0x28>
     f16:	9f 57       	subi	r25, 0x7F	; 127
     f18:	98 f0       	brcs	.+38     	; 0xf40 <__fixunssfsi+0x30>
     f1a:	b9 2f       	mov	r27, r25
     f1c:	99 27       	eor	r25, r25
     f1e:	b7 51       	subi	r27, 0x17	; 23
     f20:	b0 f0       	brcs	.+44     	; 0xf4e <__fixunssfsi+0x3e>
     f22:	e1 f0       	breq	.+56     	; 0xf5c <__fixunssfsi+0x4c>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	1a f0       	brmi	.+6      	; 0xf34 <__fixunssfsi+0x24>
     f2e:	ba 95       	dec	r27
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__fixunssfsi+0x14>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <__fixunssfsi+0x4c>
     f34:	b1 30       	cpi	r27, 0x01	; 1
     f36:	91 f0       	breq	.+36     	; 0xf5c <__fixunssfsi+0x4c>
     f38:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__fp_zero>
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	08 95       	ret
     f40:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_zero>
     f44:	67 2f       	mov	r22, r23
     f46:	78 2f       	mov	r23, r24
     f48:	88 27       	eor	r24, r24
     f4a:	b8 5f       	subi	r27, 0xF8	; 248
     f4c:	39 f0       	breq	.+14     	; 0xf5c <__fixunssfsi+0x4c>
     f4e:	b9 3f       	cpi	r27, 0xF9	; 249
     f50:	cc f3       	brlt	.-14     	; 0xf44 <__fixunssfsi+0x34>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b3 95       	inc	r27
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <__fixunssfsi+0x42>
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__fixunssfsi+0x5c>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__fp_cmp>:
     f6e:	99 0f       	add	r25, r25
     f70:	00 08       	sbc	r0, r0
     f72:	55 0f       	add	r21, r21
     f74:	aa 0b       	sbc	r26, r26
     f76:	e0 e8       	ldi	r30, 0x80	; 128
     f78:	fe ef       	ldi	r31, 0xFE	; 254
     f7a:	16 16       	cp	r1, r22
     f7c:	17 06       	cpc	r1, r23
     f7e:	e8 07       	cpc	r30, r24
     f80:	f9 07       	cpc	r31, r25
     f82:	c0 f0       	brcs	.+48     	; 0xfb4 <__fp_cmp+0x46>
     f84:	12 16       	cp	r1, r18
     f86:	13 06       	cpc	r1, r19
     f88:	e4 07       	cpc	r30, r20
     f8a:	f5 07       	cpc	r31, r21
     f8c:	98 f0       	brcs	.+38     	; 0xfb4 <__fp_cmp+0x46>
     f8e:	62 1b       	sub	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	95 0b       	sbc	r25, r21
     f96:	39 f4       	brne	.+14     	; 0xfa6 <__fp_cmp+0x38>
     f98:	0a 26       	eor	r0, r26
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <__fp_cmp+0x46>
     f9c:	23 2b       	or	r18, r19
     f9e:	24 2b       	or	r18, r20
     fa0:	25 2b       	or	r18, r21
     fa2:	21 f4       	brne	.+8      	; 0xfac <__fp_cmp+0x3e>
     fa4:	08 95       	ret
     fa6:	0a 26       	eor	r0, r26
     fa8:	09 f4       	brne	.+2      	; 0xfac <__fp_cmp+0x3e>
     faa:	a1 40       	sbci	r26, 0x01	; 1
     fac:	a6 95       	lsr	r26
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	81 1d       	adc	r24, r1
     fb2:	81 1d       	adc	r24, r1
     fb4:	08 95       	ret

00000fb6 <__gesf2>:
     fb6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_cmp>
     fba:	08 f4       	brcc	.+2      	; 0xfbe <__gesf2+0x8>
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__unordsf2>:
     fc0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_cmp>
     fc4:	88 0b       	sbc	r24, r24
     fc6:	99 0b       	sbc	r25, r25
     fc8:	08 95       	ret

00000fca <__udivmodsi4>:
     fca:	a1 e2       	ldi	r26, 0x21	; 33
     fcc:	1a 2e       	mov	r1, r26
     fce:	aa 1b       	sub	r26, r26
     fd0:	bb 1b       	sub	r27, r27
     fd2:	fd 01       	movw	r30, r26
     fd4:	0d c0       	rjmp	.+26     	; 0xff0 <__udivmodsi4_ep>

00000fd6 <__udivmodsi4_loop>:
     fd6:	aa 1f       	adc	r26, r26
     fd8:	bb 1f       	adc	r27, r27
     fda:	ee 1f       	adc	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	a2 17       	cp	r26, r18
     fe0:	b3 07       	cpc	r27, r19
     fe2:	e4 07       	cpc	r30, r20
     fe4:	f5 07       	cpc	r31, r21
     fe6:	20 f0       	brcs	.+8      	; 0xff0 <__udivmodsi4_ep>
     fe8:	a2 1b       	sub	r26, r18
     fea:	b3 0b       	sbc	r27, r19
     fec:	e4 0b       	sbc	r30, r20
     fee:	f5 0b       	sbc	r31, r21

00000ff0 <__udivmodsi4_ep>:
     ff0:	66 1f       	adc	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	1a 94       	dec	r1
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <__udivmodsi4_loop>
     ffc:	60 95       	com	r22
     ffe:	70 95       	com	r23
    1000:	80 95       	com	r24
    1002:	90 95       	com	r25
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	bd 01       	movw	r22, r26
    100a:	cf 01       	movw	r24, r30
    100c:	08 95       	ret

0000100e <__tablejump2__>:
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	05 90       	lpm	r0, Z+
    1014:	f4 91       	lpm	r31, Z
    1016:	e0 2d       	mov	r30, r0
    1018:	09 94       	ijmp

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
